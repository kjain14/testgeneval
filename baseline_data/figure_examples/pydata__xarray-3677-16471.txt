Instance ID: pydata__xarray-3677-16471

Baseline 1 (Pynguin):
Predicted Test Suite: # Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import xarray.core.dataset as module_0
import numpy as module_1
import scipy.linalg.decomp_qr as module_2
import pandas.core.dtypes.cast as module_3
import matplotlib.bezier as module_4
import numba.core.utils as module_5
import numpy.ma.core as module_6
import numba.cpython.listobj as module_7
import pandas.core.apply as module_8
import scipy.sparse.linalg._isolve.utils as module_9
import distributed.diagnostics.progressbar as module_10
import pandas.core.algorithms as module_11
import dask.array.routines as module_12
import pandas.core.roperator as module_13
import scipy.sparse.base as module_14
import urllib.request as module_15
import pandas._testing as module_16
import pkg_resources._vendor.more_itertools.recipes as module_17
import encodings.utf_8 as module_18
import pkg_resources._vendor.more_itertools.more as module_19
import numba.core.ir_utils as module_20
import pandas.core.window.common as module_21
import bottleneck.benchmark.bench_detailed as module_22
import inspect as module_23
import llvmlite.ir.types as module_24
import pkg_resources.extern.jaraco.context as module_25


def test_case_0():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_1.isreal(dataset_1)
    dataset_2 = dataset_0.ffill(var_0)


def test_case_2():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_3():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_4():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.interp_like(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = dataset_0.__getitem__(dataset_0)


def test_case_5():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.tail(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = dataset_0.fillna(var_0)
    dataset_0.to_array()


def test_case_7():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.reset_coords(drop=dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_8():
    bool_0 = True
    str_0 = "i,$lE#h^`BQ7&G6"
    tuple_0 = (bool_0, str_0)
    data_variables_0 = module_0.DataVariables(tuple_0)
    assert (
        f"{type(data_variables_0).__module__}.{type(data_variables_0).__qualname__}"
        == "xarray.core.dataset.DataVariables"
    )
    assert (
        f"{type(module_0.DataVariables.variables).__module__}.{type(module_0.DataVariables.variables).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AttributeError):
        module_2.__getattr__(data_variables_0)


def test_case_9():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = module_3.maybe_cast_to_datetime(dataset_0, dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_10():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.to_zarr(dataset_0, group=dataset_0, compute=dataset_0)


def test_case_11():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.apply(dataset_0, **dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.expand_dims()


def test_case_12():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = module_0.Dataset()
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.combine_first(dataset_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0


def test_case_13():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.all(dataset_0, keepdims=dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = module_4.get_cos_sin(var_0, var_0, dataset_0, var_0)


def test_case_14():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.fillna(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_1.isreal(dataset_1)
    dataset_2 = dataset_0.unstack(sparse=var_0)


def test_case_15():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_1.isreal(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


def test_case_16():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.rename()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_17():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = module_5.dump_llvm(dataset_0, dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.__str__()
    assert var_0 == "<xarray.Dataset>\nDimensions:  ()\nData variables:\n    *empty*"
    var_1 = dataset_0.get(var_0)
    var_1.to_array()


def test_case_19():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.rename_vars(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.expand_dims()


@pytest.mark.xfail(strict=True)
def test_case_20():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.drop(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_0.__rdivmod__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    str_0 = "{_\nx*0##0#}PPofU8Vc"
    dataset_1 = var_0.drop_vars(var_0, errors=str_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_1.write_version_directive(dataset_1)


def test_case_22():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.drop_sel()
    assert len(var_0) == 0


def test_case_23():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    str_0 = "J'P{cWQ^Vln22ve`"
    dict_0 = {str_0: str_0, str_0: str_0}
    with pytest.raises(ValueError):
        dataset_0.shift(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.shift(**dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = dataset_0.all(dataset_0, keepdims=dataset_0)
    var_1.dropna(axis=dataset_0, how=var_1)


def test_case_25():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.unstack(dataset_0, sparse=dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_26():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    module_6.masked_greater_equal(dataset_0, dataset_0)


def test_case_27():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.head(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_28():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.head()
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0


@pytest.mark.xfail(strict=True)
def test_case_29():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.ffill(dataset_0)
    dataset_2.to_dataframe()


@pytest.mark.xfail(strict=True)
def test_case_30():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.roll()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    module_7.getitem_list(var_0, dataset_0, dataset_0, var_0)


def test_case_31():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.interp_like(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


def test_case_32():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    loc_indexer_0 = module_0._LocIndexer(dataset_0)
    dataset_1 = dataset_0.persist()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    data_variables_0 = module_0.DataVariables(dataset_0)
    dataset_2 = module_0.Dataset(coords=data_variables_0)
    var_0 = dataset_0.get(dataset_0, data_variables_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.__eq__(dataset_0)
    with pytest.raises(NotImplementedError):
        var_0.__setitem__(data_variables_0, var_1)


def test_case_33():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.rename()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.reindex(dataset_1)


def test_case_34():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        dataset_0.to_stacked_array(dataset_0, dataset_0, name=dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_8.reconstruct_func(dataset_0)
    var_1 = dataset_0.fillna(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_1) == 0
    dataset_0.to_array()


@pytest.mark.xfail(strict=True)
def test_case_36():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    data_variables_0 = module_0.DataVariables(dataset_0)
    assert len(data_variables_0) == 0
    module_0.Dataset(coords=dataset_0, compat=dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.all(dataset_0, keepdims=dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    cycler_0 = var_0.__imul__(dataset_0)
    var_0.__rdivmod__(cycler_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.sortby(dataset_0, dataset_0)


def test_case_39():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    data_variables_0 = module_0.DataVariables(dataset_0)
    assert len(data_variables_0) == 0
    dataset_1 = module_0.as_dataset(data_variables_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = dataset_1.to_zarr(group=dataset_0, encoding=dataset_0)


def test_case_40():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = module_0.as_dataset(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_9.id(dataset_0)


def test_case_41():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dict_0 = {}
    dataset_1 = dataset_0.sel(**dict_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    with pytest.raises(ValueError):
        dataset_1.expand_dims(dataset_1, dataset_0)


def test_case_42():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.get(dataset_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = dataset_0.reset_coords(var_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.unify_chunks()
    with pytest.raises(TypeError):
        var_0.thin()


def test_case_43():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.all(dataset_0, keepdims=dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.reorder_levels(dataset_0)


def test_case_44():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    dataset_1 = dataset_0.set_index(append=bool_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = module_0.Dataset(coords=dataset_0)
    with pytest.raises(ValueError):
        module_10.progress(*dataset_1)


def test_case_45():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.filter_by_attrs()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = dataset_0.to_zarr(compute=dataset_0, consolidated=dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_1.to_zarr(dataset_0, encoding=dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.integrate(dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    data_variables_0 = module_0.DataVariables(dataset_0)
    assert len(data_variables_0) == 0
    var_0 = dataset_0.get(dataset_0, data_variables_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.assign()
    dataset_2 = var_0.drop_vars(var_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0
    var_1 = dataset_2.to_zarr(group=dataset_2, consolidated=dataset_0)
    var_0.__call__(dataset_2)


def test_case_49():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = module_4.get_cos_sin(dataset_0, dataset_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.clip()
    assert len(var_1) == 0
    module_11.searchsorted(none_type_0, var_1)


def test_case_51():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.head()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.interpolate_na(method=dataset_1, **dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.rename(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.compute()
    dataset_3 = dataset_1.drop_vars(dataset_2)
    assert (
        f"{type(dataset_3).__module__}.{type(dataset_3).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_3) == 0
    str_0 = "wwY?UbEXifkN.toF\n6"
    dict_0 = {str_0: dataset_3, str_0: dataset_3}
    module_12.swapaxes(dataset_1, dataset_1, dict_0)


def test_case_53():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dict_0 = {}
    dataset_2 = dataset_1.rename(dataset_1, **dict_0)
    dataset_3 = dataset_2.tail(dataset_0, **dict_0)
    assert (
        f"{type(dataset_3).__module__}.{type(dataset_3).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_3) == 0
    var_0 = module_13.rxor(dataset_2, dict_0)
    dataset_4 = dataset_1.map(dataset_2, dataset_0)
    var_1 = dataset_2.filter_by_attrs(**var_0)
    var_2 = dataset_1.__enter__()
    none_type_0 = dataset_0.info()


def test_case_54():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = module_14.__dir__()
    cycler_0 = var_0.__imul__(var_1)
    assert len(cycler_0) == 0


def test_case_55():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    bool_0 = dataset_0.broadcast_equals(dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_1.info(dataset_1)


def test_case_57():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    data_variables_0 = module_0.DataVariables(dataset_0)
    assert len(data_variables_0) == 0
    none_type_0 = None
    with pytest.raises(ValueError):
        dataset_0.rank(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    dataset_1 = module_0.Dataset(none_type_0, attrs=none_type_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_15.getproxies_environment()
    var_1 = dataset_0.get(none_type_0, var_0)
    var_2 = var_1.__eq__(dataset_0)
    var_1.fileno()


@pytest.mark.xfail(strict=True)
def test_case_59():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.drop_dims(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    module_12.notnull(dataset_1)


def test_case_60():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.tail()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = dataset_1.interp_like(dataset_1, assume_sorted=dataset_1, kwargs=dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_61():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.map_blocks(dataset_0, kwargs=dataset_0)


def test_case_62():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.persist()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_63():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.load()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_16.loc(dataset_0)
    var_0.get_resource_reader()


def test_case_64():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    loc_indexer_0 = module_0._LocIndexer(dataset_0)
    none_type_0 = None
    with pytest.raises(TypeError):
        loc_indexer_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    loc_indexer_0 = module_0._LocIndexer(dataset_0)
    bool_0 = dataset_0.equals(loc_indexer_0)
    assert bool_0 is False
    dataset_1 = module_17.triplewise(dataset_0)
    dataset_1.apply(loc_indexer_0, dataset_0, dataset_0)


def test_case_66():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        dataset_0.drop()


def test_case_67():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.transpose()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.head()
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0


def test_case_68():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.load()
    assert len(dataset_1) == 0
    dataset_2 = var_0.unstack(fill_value=dataset_1)
    assert len(dataset_2) == 0


def test_case_69():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = dataset_0.merge(var_0, fill_value=var_0)


def test_case_70():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.reset_coords()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.drop_dims(dataset_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0


def test_case_71():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_1.isreal(dataset_1)
    var_1 = var_0.sum()


@pytest.mark.xfail(strict=True)
def test_case_72():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    data_variables_0 = module_0.DataVariables(dataset_0)
    assert len(data_variables_0) == 0
    bool_0 = False
    dataset_1 = dataset_0.set_index(append=bool_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.transpose()
    dataset_3 = module_0.Dataset(coords=data_variables_0)
    var_0 = dataset_0.get(dataset_0, data_variables_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.__eq__(dataset_0)
    var_0.dump_to_store(dataset_1, **var_1)


def test_case_73():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        dataset_0.expand_dims(dataset_0, dataset_0)


def test_case_74():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.__dask_postcompute__()


def test_case_75():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.get(dataset_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    str_0 = "U=scUFi{Q* /22"
    with pytest.raises(ValueError):
        dataset_0.drop_dims(var_0, errors=str_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.to_zarr(
        dataset_0,
        synchronizer=dataset_0,
        group=dataset_0,
        compute=dataset_0,
        append_dim=dataset_0,
    )


def test_case_77():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    str_0 = "\tFM8Pj>"
    dataset_1 = dataset_0.chunk(dataset_0, str_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    with pytest.raises(TypeError):
        dataset_0.head(**dict_0)


def test_case_78():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.__dask_postpersist__()


def test_case_79():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.rename_vars()
    dataset_3 = dataset_1.expand_dims()


@pytest.mark.xfail(strict=True)
def test_case_80():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.reset_index(dataset_0)


def test_case_81():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


def test_case_82():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.unify_chunks()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_83():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.all(dataset_0, keepdims=var_0)
    bool_0 = dataset_0.broadcast_equals(var_1)
    dataset_1 = dataset_0.expand_dims(var_0, **var_0)
    var_2 = var_1.copy()
    var_1.to_netcdf(mode=var_2, format=var_2, invalid_netcdf=var_1)


@pytest.mark.xfail(strict=True)
def test_case_84():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_18.getregentry()
    none_type_0 = None
    dataset_1 = dataset_0.expand_dims(var_0, **dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0.__rdivmod__(none_type_0)


def test_case_85():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.__dask_postpersist__()
    dataset_1 = dataset_0.expand_dims()
    with pytest.raises(TypeError):
        dataset_1.expand_dims(var_0, **dataset_0)


def test_case_86():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    str_0 = ""
    dict_0 = {str_0: none_type_0, str_0: str_0}
    with pytest.raises(ValueError):
        dataset_0.expand_dims(**dict_0)


def test_case_87():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.unstack()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_88():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_0.diff(dataset_0)


def test_case_89():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    with pytest.raises(ValueError):
        dataset_0.differentiate(none_type_0, none_type_0)


def test_case_90():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.__dask_postpersist__()
    dataset_1 = dataset_0.expand_dims()
    with pytest.raises(ValueError):
        dataset_1.expand_dims(axis=var_0)


def test_case_91():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.rename_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_92():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims(dataset_0, **dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = dataset_1.to_dict(dataset_0)


def test_case_93():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.head(dataset_1)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0


def test_case_94():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = dataset_0.info()


def test_case_95():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.rename()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    none_type_0 = None
    none_type_1 = None
    var_0 = module_13.rxor(dataset_1, none_type_1)
    dataset_2 = dataset_0.__deepcopy__(dataset_1)
    var_1 = module_18.getregentry()
    dataset_3 = var_0.unstack(var_0)
    var_2 = module_4.get_cos_sin(var_0, none_type_0, none_type_0, dataset_3)
    dataset_4 = dataset_1.expand_dims()


@pytest.mark.xfail(strict=True)
def test_case_96():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.swap_dims(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.rename()
    none_type_0 = None
    none_type_0.expand_dims()


def test_case_97():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.interp_like(dataset_0, dataset_0, kwargs=dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


def test_case_98():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_18.getregentry()
    with pytest.raises(ValueError):
        dataset_0.drop_sel(var_0, errors=var_0)


def test_case_99():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_19.difference(dataset_0, initial=dataset_0)
    var_1 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_1) == 0
    bool_0 = dataset_0.broadcast_equals(var_0)
    dataset_1 = var_1.isel()
    var_2 = dataset_0.merge(var_1)
    dataset_2 = dataset_0.unstack()


def test_case_100():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = module_19.difference(dataset_0, initial=dataset_0)
    var_0 = dataset_0.get(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    bool_0 = dataset_0.broadcast_equals(dataset_1)
    var_1 = dataset_0.merge(var_0)
    with pytest.raises(TypeError):
        dataset_0.expand_dims(bool_0, **var_0)


def test_case_101():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    none_type_1 = None
    str_0 = "nv>2I3i[,Au"
    str_1 = "#b"
    dict_0 = {str_0: none_type_0, str_1: none_type_1}
    with pytest.raises(ValueError):
        dataset_0.drop(dim=none_type_1, errors=none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_0.drop(dim=dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    list_0 = [dataset_1, dataset_0, dataset_1, dataset_1]
    dataset_1.unstack(list_0)


def test_case_104():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.interp(assume_sorted=dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_105():
    var_0 = module_1.get_printoptions()
    dataset_0 = module_0.as_dataset(var_0)
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 11
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_1 = dataset_0.to_array()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "xarray.core.dataarray.DataArray"
    )
    assert len(var_1) == 11
    var_0.count()


def test_case_106():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(var_0)
    assert len(dataset_1) == 0


def test_case_107():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    str_0 = "\todm}BpA7"
    str_1 = "8VwtyL7{p\tX"
    str_2 = "Q\\*p\r\\,~C[r=\r"
    str_3 = "ckzY"
    dict_0 = {str_0: dataset_0, str_1: str_1, str_2: str_1, str_3: str_2}
    with pytest.raises(ValueError):
        dataset_0.rename(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = module_1.isreal(dataset_0)
    dataset_2 = dataset_1.expand_dims()
    dataset_0.to_netcdf(
        dataset_0, dataset_2, var_0, engine=dataset_2, encoding=dataset_1
    )


def test_case_109():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = module_20.get_tuple_table(dataset_0)
    var_1 = dataset_0.quantile(none_type_0, var_0, none_type_0, keep_attrs=var_0)
    assert len(var_1) == 0
    with pytest.raises(ValueError):
        dataset_0.expand_dims(dataset_0, var_0)


def test_case_110():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    str_0 = '#kQm"U\nT.3;@PLsBuhDP'
    none_type_0 = None
    str_1 = "`Uq"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    with pytest.raises(TypeError):
        dataset_0.expand_dims(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    data_variables_0 = module_0.DataVariables(dataset_0)
    assert len(data_variables_0) == 0
    var_0 = dataset_0.get(dataset_0, data_variables_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = data_variables_0.values()
    var_2 = var_0.__eq__(dataset_0)
    bool_0 = var_2.identical(dataset_0)
    dataset_1 = var_2.drop_vars(var_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_2.to_zarr(synchronizer=dataset_1)


def test_case_112():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    str_0 = "\x0c}\tAE!{\n'(z8|D)Nq9-="
    dict_0 = {str_0: dataset_0, str_0: dataset_0}
    with pytest.raises(ValueError):
        dataset_0.isel(**dict_0)


def test_case_113():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.chunk(dataset_0, dataset_0, dataset_0, dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.expand_dims()


def test_case_114():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.expand_dims()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dict_0 = {}
    dataset_2 = dataset_0.chunk()
    with pytest.raises(ValueError):
        dataset_0.expand_dims(axis=dataset_1, **dict_0)


def test_case_115():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.all(dataset_0, keepdims=dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = dataset_0.head(**var_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    with pytest.raises(TypeError):
        dataset_1.thin(**var_0)


def test_case_116():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.bfill(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = module_21.zsqrt(dataset_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0
    var_0 = dataset_2.drop(dataset_2)
    dataset_3 = var_0.expand_dims(**var_0)


def test_case_117():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    with pytest.raises(ValueError):
        module_22.benchsuite(var_0, dataset_0)


def test_case_118():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, keep_attrs=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.transpose()
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.head()
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0


@pytest.mark.xfail(strict=True)
def test_case_119():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, keep_attrs=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.__dask_layers__()
    var_1.chunk(dataset_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    str_0 = "Zd-IrE 3ig!z\rBmzIuW"
    dict_0 = {str_0: dataset_0, str_0: bool_0}
    dataset_0.reindex(copy=bool_0, **dict_0)


def test_case_121():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    str_0 = "8!p7Qs!CF*Bar"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    with pytest.raises(ValueError):
        dataset_0.rename_dims(**dict_0)


def test_case_122():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.head()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = var_0.combine_first(dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, keep_attrs=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    bool_0 = dataset_0.broadcast_equals(var_0)
    dataset_0.rolling_exp(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = dataset_0.__dask_postcompute__()
    dataset_1 = dataset_0.stack(dataset_0)
    var_1 = dataset_0.__dask_layers__()
    var_1.interp_like(var_1)


def test_case_125():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(var_0)
    assert len(dataset_1) == 0
    bool_0 = dataset_1.equals(dataset_1)
    dataset_2 = dataset_1.transpose()
    assert len(dataset_2) == 0
    dataset_3 = dataset_0.head(**var_0)
    assert (
        f"{type(dataset_3).__module__}.{type(dataset_3).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_3) == 0


def test_case_126():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(none_type_0)
    assert len(dataset_1) == 0
    none_type_1 = dataset_1.info()


def test_case_127():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, keep_attrs=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(var_0, **var_0)
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.chunk(dataset_0, var_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0
    dataset_3 = dataset_0.unstack(var_0, dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    module_23.getargspec(var_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.__dask_keys__()
    dataset_0.set_coords(none_type_0, none_type_0)


def test_case_130():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.set_coords(dataset_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = dataset_0.drop(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


def test_case_131():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.quantile(none_type_0, var_0, none_type_0, keep_attrs=var_0)
    assert len(var_1) == 0
    var_2 = var_0.__repr__()
    assert (
        var_2
        == "<xarray.Dataset>\nDimensions:   ()\nCoordinates:\n    quantile  float64 nan\nData variables:\n    *empty*"
    )
    var_3 = module_4.get_cos_sin(var_0, none_type_0, var_2, var_1)


def test_case_132():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    dataset_1 = dataset_0.__copy__()
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    var_0 = dataset_0.interp_like(dataset_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_133():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    pointer_type_0 = module_24.PointerType(none_type_0)
    dataset_1 = var_0.chunk(name_prefix=var_0, lock=pointer_type_0)
    assert len(dataset_1) == 0
    var_0.center(var_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, keep_attrs=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(var_0, **var_0)
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.chunk(dataset_0, var_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0
    dataset_3 = dataset_1.head(**dataset_1)
    assert (
        f"{type(dataset_3).__module__}.{type(dataset_3).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_3) == 0
    dataset_4 = dataset_3.interpolate_na(var_0)
    assert len(dataset_4) == 0
    dataset_3.is_numeric()


def test_case_135():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(var_0)
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.transpose()
    assert len(dataset_2) == 0
    dataset_3 = dataset_2.persist()
    assert len(dataset_3) == 0


def test_case_136():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = module_25.tarball_context(none_type_0)
    with pytest.raises(ValueError):
        dataset_0.reset_coords(var_0)


def test_case_137():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    none_type_1 = None
    var_0 = dataset_0.quantile(none_type_0, numeric_only=none_type_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    bool_0 = True
    dataset_1 = var_0.interp(method=none_type_0, assume_sorted=bool_0, **var_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0


def test_case_138():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0, none_type_0, keep_attrs=none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    var_1 = var_0.__dask_postpersist__()
    dataset_1 = dataset_0.chunk(dataset_0, var_0)
    assert (
        f"{type(dataset_1).__module__}.{type(dataset_1).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_1) == 0
    dataset_2 = dataset_0.unstack(var_0, dataset_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = dataset_0.quantile(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(var_0) == 0
    dataset_1 = var_0.expand_dims(var_0)
    assert len(dataset_1) == 0
    dataset_2 = dataset_1.head(none_type_0)
    assert (
        f"{type(dataset_2).__module__}.{type(dataset_2).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_2) == 0
    var_1 = dataset_2.filter_by_attrs()
    assert len(var_1) == 0
    var_0.set_locs()


def test_case_140():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    str_0 = "f"
    str_1 = "N"
    dict_0 = {str_0: none_type_0, str_1: str_0, str_0: none_type_0}
    with pytest.raises(ValueError):
        dataset_0.roll(none_type_0, none_type_0, **dict_0)


def test_case_141():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    with pytest.raises(ValueError):
        dataset_0.transpose(*list_0)


def test_case_142():
    dataset_0 = module_0.Dataset()
    assert (
        f"{type(dataset_0).__module__}.{type(dataset_0).__qualname__}"
        == "xarray.core.dataset.Dataset"
    )
    assert len(dataset_0) == 0
    assert (
        f"{type(module_0.Dataset.load_store).__module__}.{type(module_0.Dataset.load_store).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.variables).__module__}.{type(module_0.Dataset.variables).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.attrs).__module__}.{type(module_0.Dataset.attrs).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.encoding).__module__}.{type(module_0.Dataset.encoding).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.dims).__module__}.{type(module_0.Dataset.dims).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.sizes).__module__}.{type(module_0.Dataset.sizes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.nbytes).__module__}.{type(module_0.Dataset.nbytes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.loc).__module__}.{type(module_0.Dataset.loc).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.indexes).__module__}.{type(module_0.Dataset.indexes).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.coords).__module__}.{type(module_0.Dataset.coords).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.data_vars).__module__}.{type(module_0.Dataset.data_vars).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.chunks).__module__}.{type(module_0.Dataset.chunks).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.from_dataframe).__module__}.{type(module_0.Dataset.from_dataframe).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.from_dict).__module__}.{type(module_0.Dataset.from_dict).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Dataset.real).__module__}.{type(module_0.Dataset.real).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.imag).__module__}.{type(module_0.Dataset.imag).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Dataset.plot).__module__}.{type(module_0.Dataset.plot).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_18.getregentry()
    with pytest.raises(TypeError):
        dataset_0.tail(var_0)

Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
import xarray as xr
from xarray.core.dataset import Dataset
from xarray.core.variable import Variable
from xarray.testing import assert_identical, assert_equal

@pytest.fixture
def example_dataset():
    data = xr.Dataset(
        {
            "temperature": (("x", "y"), np.random.rand(4, 5)),
            "precipitation": (("x", "y"), np.random.rand(4, 5)),
        },
        coords={
            "lon": (("x", "y"), np.random.rand(4, 5)),
            "lat": (("x", "y"), np.random.rand(4, 5)),
        },
    )
    return data

def test_dataset_creation():
    data = xr.Dataset(
        {
            "temperature": (("x", "y"), np.random.rand(4, 5)),
            "precipitation": (("x", "y"), np.random.rand(4, 5)),
        },
        coords={
            "lon": (("x", "y"), np.random.rand(4, 5)),
            "lat": (("x", "y"), np.random.rand(4, 5)),
        },
    )
    assert isinstance(data, Dataset)
    assert "temperature" in data.data_vars
    assert "precipitation" in data.data_vars
    assert "lon" in data.coords
    assert "lat" in data.coords

def test_dataset_repr(example_dataset):
    repr_str = repr(example_dataset)
    assert "Dimensions" in repr_str
    assert "Data variables" in repr_str
    assert "Coordinates" in repr_str

def test_dataset_isel(example_dataset):
    selected = example_dataset.isel(x=slice(2), y=slice(3))
    assert selected.dims == {"x": 2, "y": 3}
    assert "temperature" in selected.data_vars
    assert "precipitation" in selected.data_vars

def test_dataset_sel(example_dataset):
    example_dataset.coords["x"] = ["a", "b", "c", "d"]
    selected = example_dataset.sel(x="a")
    assert selected.dims == {"y": 5}
    assert "temperature" in selected.data_vars
    assert "precipitation" in selected.data_vars

def test_dataset_rename(example_dataset):
    renamed = example_dataset.rename({"temperature": "temp"})
    assert "temp" in renamed.data_vars
    assert "temperature" not in renamed.data_vars

def test_dataset_drop_vars(example_dataset):
    dropped = example_dataset.drop_vars("temperature")
    assert "temperature" not in dropped.data_vars
    assert "precipitation" in dropped.data_vars

def test_dataset_merge(example_dataset):
    ds2 = xr.Dataset({"humidity": (("x", "y"), np.random.rand(4, 5))})
    merged = example_dataset.merge(ds2)
    assert "humidity" in merged.data_vars
    assert "temperature" in merged.data_vars

def test_dataset_to_array(example_dataset):
    array = example_dataset.to_array()
    assert array.dims[0] == "variable"
    assert set(array.coords["variable"].values) == {"temperature", "precipitation"}

def test_dataset_diff(example_dataset):
    diffed = example_dataset.diff("x")
    assert diffed.dims == {"x": 3, "y": 5}

def test_dataset_shift(example_dataset):
    shifted = example_dataset.shift(x=1)
    assert shifted.dims == example_dataset.dims
    assert np.isnan(shifted["temperature"].isel(x=0)).all()

def test_dataset_rolling(example_dataset):
    rolled = example_dataset.rolling(x=2).mean()
    assert rolled.dims == example_dataset.dims
    assert np.isnan(rolled["temperature"].isel(x=0)).all()

def test_dataset_integrate(example_dataset):
    integrated = example_dataset.integrate("x")
    assert "x" not in integrated.dims
    assert integrated.dims == {"y": 5}

def test_dataset_quantile(example_dataset):
    quantiles = example_dataset.quantile(0.5, dim="x")
    assert "x" not in quantiles.dims
    assert quantiles.dims == {"y": 5}

def test_dataset_fillna(example_dataset):
    filled = example_dataset.fillna(0)
    assert not np.isnan(filled["temperature"]).any()

def test_dataset_interpolate_na(example_dataset):
    interpolated = example_dataset.interpolate_na(dim="x")
    assert interpolated.dims == example_dataset.dims

def test_dataset_map_blocks(example_dataset):
    def func(ds):
        return ds + 1

    mapped = example_dataset.map_blocks(func)
    assert_equal(mapped, example_dataset + 1)

Coverage: 33.62218370883882
Mutation Score: 13.579999999999998

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
import xarray as xr
from xarray.core.dataset import Dataset
from xarray.core.variable import Variable
from xarray.testing import assert_identical, assert_equal

@pytest.fixture
def example_dataset():
    data = xr.Dataset(
        {
            "temperature": (("x", "y"), np.random.rand(4, 5)),
            "precipitation": (("x", "y"), np.random.rand(4, 5)),
        },
        coords={
            "lon": (("x", "y"), np.random.rand(4, 5)),
            "lat": (("x", "y"), np.random.rand(4, 5)),
        },
    )
    return data

def test_dataset_creation():
    data = xr.Dataset(
        {
            "temperature": (("x", "y"), np.random.rand(4, 5)),
            "precipitation": (("x", "y"), np.random.rand(4, 5)),
        },
        coords={
            "lon": (("x", "y"), np.random.rand(4, 5)),
            "lat": (("x", "y"), np.random.rand(4, 5)),
        },
    )
    assert isinstance(data, Dataset)
    assert "temperature" in data.data_vars
    assert "precipitation" in data.data_vars
    assert "lon" in data.coords
    assert "lat" in data.coords

def test_dataset_repr(example_dataset):
    repr_str = repr(example_dataset)
    assert "Dimensions" in repr_str
    assert "Data variables" in repr_str
    assert "Coordinates" in repr_str

def test_dataset_isel(example_dataset):
    selected = example_dataset.isel(x=slice(2), y=slice(3))
    assert selected.dims == {"x": 2, "y": 3}
    assert "temperature" in selected.data_vars
    assert "precipitation" in selected.data_vars

def test_dataset_sel(example_dataset):
    example_dataset.coords["x"] = ["a", "b", "c", "d"]
    selected = example_dataset.sel(x="a")
    assert selected.dims == {"y": 5}
    assert "temperature" in selected.data_vars
    assert "precipitation" in selected.data_vars

def test_dataset_rename(example_dataset):
    renamed = example_dataset.rename({"temperature": "temp"})
    assert "temp" in renamed.data_vars
    assert "temperature" not in renamed.data_vars

def test_dataset_drop_vars(example_dataset):
    dropped = example_dataset.drop_vars("temperature")
    assert "temperature" not in dropped.data_vars
    assert "precipitation" in dropped.data_vars

def test_dataset_merge(example_dataset):
    ds2 = xr.Dataset({"humidity": (("x", "y"), np.random.rand(4, 5))})
    merged = example_dataset.merge(ds2)
    assert "humidity" in merged.data_vars
    assert "temperature" in merged.data_vars

def test_dataset_to_array(example_dataset):
    array = example_dataset.to_array()
    assert array.dims[0] == "variable"
    assert set(array.coords["variable"].values) == {"temperature", "precipitation"}

def test_dataset_diff(example_dataset):
    diffed = example_dataset.diff("x")
    assert diffed.dims == {"x": 3, "y": 5}

def test_dataset_shift(example_dataset):
    shifted = example_dataset.shift(x=1)
    assert shifted.dims == example_dataset.dims
    assert np.isnan(shifted["temperature"].isel(x=0)).all()

def test_dataset_rolling(example_dataset):
    rolled = example_dataset.rolling(x=2).mean()
    assert rolled.dims == example_dataset.dims
    assert np.isnan(rolled["temperature"].isel(x=0)).all()

def test_dataset_integrate(example_dataset):
    integrated = example_dataset.integrate("x")
    assert "x" not in integrated.dims
    assert integrated.dims == {"y": 5}

def test_dataset_quantile(example_dataset):
    quantiles = example_dataset.quantile(0.5, dim="x")
    assert "x" not in quantiles.dims
    assert quantiles.dims == {"y": 5}

def test_dataset_fillna(example_dataset):
    filled = example_dataset.fillna(0)
    assert not np.isnan(filled["temperature"]).any()

def test_dataset_interpolate_na(example_dataset):
    interpolated = example_dataset.interpolate_na(dim="x")
    assert interpolated.dims == example_dataset.dims

def test_dataset_map_blocks(example_dataset):
    def func(ds):
        return ds + 1

    mapped = example_dataset.map_blocks(func)
    assert_equal(mapped, example_dataset + 1)
Coverage: 33.67995378393992
Mutation Score: 12.819999999999993
Output: On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_merge.py

nothing added to commit but untracked files present (use "git add" to track)
commit de044c3c5e9c4ba0dc5d37d098a5381df2f41c29
Author: TestGenEval <>
Date:   Wed Dec 11 12:11:27 2024 +0000

    Testing fixes

diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index ac0a923d..d597ec8c 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3604,6 +3604,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
             If any variables conflict (see ``compat``).
         """
         _check_inplace(inplace)
+        other = other.to_dataset() if isinstance(other, xr.DataArray) else other
         merge_result = dataset_merge_method(
             self,
             other,
diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py
deleted file mode 100644
index c1e6c7a5..00000000
--- a/xarray/tests/test_merge.py
+++ /dev/null
@@ -1,255 +0,0 @@
-import numpy as np
-import pytest
-
-import xarray as xr
-from xarray.core import dtypes, merge
-
-from . import raises_regex
-from .test_dataset import create_test_data
-
-
-class TestMergeInternals:
-    def test_broadcast_dimension_size(self):
-        actual = merge.broadcast_dimension_size(
-            [xr.Variable("x", [1]), xr.Variable("y", [2, 1])]
-        )
-        assert actual == {"x": 1, "y": 2}
-
-        actual = merge.broadcast_dimension_size(
-            [xr.Variable(("x", "y"), [[1, 2]]), xr.Variable("y", [2, 1])]
-        )
-        assert actual == {"x": 1, "y": 2}
-
-        with pytest.raises(ValueError):
-            merge.broadcast_dimension_size(
-                [xr.Variable(("x", "y"), [[1, 2]]), xr.Variable("y", [2])]
-            )
-
-
-class TestMergeFunction:
-    def test_merge_arrays(self):
-        data = create_test_data()
-        actual = xr.merge([data.var1, data.var2])
-        expected = data[["var1", "var2"]]
-        assert actual.identical(expected)
-
-    def test_merge_datasets(self):
-        data = create_test_data()
-
-        actual = xr.merge([data[["var1"]], data[["var2"]]])
-        expected = data[["var1", "var2"]]
-        assert actual.identical(expected)
-
-        actual = xr.merge([data, data])
-        assert actual.identical(data)
-
-    def test_merge_dataarray_unnamed(self):
-        data = xr.DataArray([1, 2], dims="x")
-        with raises_regex(ValueError, "without providing an explicit name"):
-            xr.merge([data])
-
-    def test_merge_dicts_simple(self):
-        actual = xr.merge([{"foo": 0}, {"bar": "one"}, {"baz": 3.5}])
-        expected = xr.Dataset({"foo": 0, "bar": "one", "baz": 3.5})
-        assert actual.identical(expected)
-
-    def test_merge_dicts_dims(self):
-        actual = xr.merge([{"y": ("x", [13])}, {"x": [12]}])
-        expected = xr.Dataset({"x": [12], "y": ("x", [13])})
-        assert actual.identical(expected)
-
-    def test_merge_error(self):
-        ds = xr.Dataset({"x": 0})
-        with pytest.raises(xr.MergeError):
-            xr.merge([ds, ds + 1])
-
-    def test_merge_alignment_error(self):
-        ds = xr.Dataset(coords={"x": [1, 2]})
-        other = xr.Dataset(coords={"x": [2, 3]})
-        with raises_regex(ValueError, "indexes .* not equal"):
-            xr.merge([ds, other], join="exact")
-
-    def test_merge_wrong_input_error(self):
-        with raises_regex(TypeError, "objects must be an iterable"):
-            xr.merge([1])
-        ds = xr.Dataset(coords={"x": [1, 2]})
-        with raises_regex(TypeError, "objects must be an iterable"):
-            xr.merge({"a": ds})
-        with raises_regex(TypeError, "objects must be an iterable"):
-            xr.merge([ds, 1])
-
-    def test_merge_no_conflicts_single_var(self):
-        ds1 = xr.Dataset({"a": ("x", [1, 2]), "x": [0, 1]})
-        ds2 = xr.Dataset({"a": ("x", [2, 3]), "x": [1, 2]})
-        expected = xr.Dataset({"a": ("x", [1, 2, 3]), "x": [0, 1, 2]})
-        assert expected.identical(xr.merge([ds1, ds2], compat="no_conflicts"))
-        assert expected.identical(xr.merge([ds2, ds1], compat="no_conflicts"))
-        assert ds1.identical(xr.merge([ds1, ds2], compat="no_conflicts", join="left"))
-        assert ds2.identical(xr.merge([ds1, ds2], compat="no_conflicts", join="right"))
-        expected = xr.Dataset({"a": ("x", [2]), "x": [1]})
-        assert expected.identical(
-            xr.merge([ds1, ds2], compat="no_conflicts", join="inner")
-        )
-
-        with pytest.raises(xr.MergeError):
-            ds3 = xr.Dataset({"a": ("x", [99, 3]), "x": [1, 2]})
-            xr.merge([ds1, ds3], compat="no_conflicts")
-
-        with pytest.raises(xr.MergeError):
-            ds3 = xr.Dataset({"a": ("y", [2, 3]), "y": [1, 2]})
-            xr.merge([ds1, ds3], compat="no_conflicts")
-
-    def test_merge_no_conflicts_multi_var(self):
-        data = create_test_data()
-        data1 = data.copy(deep=True)
-        data2 = data.copy(deep=True)
-
-        expected = data[["var1", "var2"]]
-        actual = xr.merge([data1.var1, data2.var2], compat="no_conflicts")
-        assert expected.identical(actual)
-
-        data1["var1"][:, :5] = np.nan
-        data2["var1"][:, 5:] = np.nan
-        data1["var2"][:4, :] = np.nan
-        data2["var2"][4:, :] = np.nan
-        del data2["var3"]
-
-        actual = xr.merge([data1, data2], compat="no_conflicts")
-        assert data.equals(actual)
-
-    def test_merge_no_conflicts_preserve_attrs(self):
-        data = xr.Dataset({"x": ([], 0, {"foo": "bar"})})
-        actual = xr.merge([data, data])
-        assert data.identical(actual)
-
-    def test_merge_no_conflicts_broadcast(self):
-        datasets = [xr.Dataset({"x": ("y", [0])}), xr.Dataset({"x": np.nan})]
-        actual = xr.merge(datasets)
-        expected = xr.Dataset({"x": ("y", [0])})
-        assert expected.identical(actual)
-
-        datasets = [xr.Dataset({"x": ("y", [np.nan])}), xr.Dataset({"x": 0})]
-        actual = xr.merge(datasets)
-        assert expected.identical(actual)
-
-
-class TestMergeMethod:
-    def test_merge(self):
-        data = create_test_data()
-        ds1 = data[["var1"]]
-        ds2 = data[["var3"]]
-        expected = data[["var1", "var3"]]
-        actual = ds1.merge(ds2)
-        assert expected.identical(actual)
-
-        actual = ds2.merge(ds1)
-        assert expected.identical(actual)
-
-        actual = data.merge(data)
-        assert data.identical(actual)
-        actual = data.reset_coords(drop=True).merge(data)
-        assert data.identical(actual)
-        actual = data.merge(data.reset_coords(drop=True))
-        assert data.identical(actual)
-
-        with pytest.raises(ValueError):
-            ds1.merge(ds2.rename({"var3": "var1"}))
-        with raises_regex(ValueError, "should be coordinates or not"):
-            data.reset_coords().merge(data)
-        with raises_regex(ValueError, "should be coordinates or not"):
-            data.merge(data.reset_coords())
-
-    def test_merge_broadcast_equals(self):
-        ds1 = xr.Dataset({"x": 0})
-        ds2 = xr.Dataset({"x": ("y", [0, 0])})
-        actual = ds1.merge(ds2)
-        assert ds2.identical(actual)
-
-        actual = ds2.merge(ds1)
-        assert ds2.identical(actual)
-
-        actual = ds1.copy()
-        actual.update(ds2)
-        assert ds2.identical(actual)
-
-        ds1 = xr.Dataset({"x": np.nan})
-        ds2 = xr.Dataset({"x": ("y", [np.nan, np.nan])})
-        actual = ds1.merge(ds2)
-        assert ds2.identical(actual)
-
-    def test_merge_compat(self):
-        ds1 = xr.Dataset({"x": 0})
-        ds2 = xr.Dataset({"x": 1})
-        for compat in ["broadcast_equals", "equals", "identical", "no_conflicts"]:
-            with pytest.raises(xr.MergeError):
-                ds1.merge(ds2, compat=compat)
-
-        ds2 = xr.Dataset({"x": [0, 0]})
-        for compat in ["equals", "identical"]:
-            with raises_regex(ValueError, "should be coordinates or not"):
-                ds1.merge(ds2, compat=compat)
-
-        ds2 = xr.Dataset({"x": ((), 0, {"foo": "bar"})})
-        with pytest.raises(xr.MergeError):
-            ds1.merge(ds2, compat="identical")
-
-        with raises_regex(ValueError, "compat=.* invalid"):
-            ds1.merge(ds2, compat="foobar")
-
-        assert ds1.identical(ds1.merge(ds2, compat="override"))
-
-    def test_merge_auto_align(self):
-        ds1 = xr.Dataset({"a": ("x", [1, 2]), "x": [0, 1]})
-        ds2 = xr.Dataset({"b": ("x", [3, 4]), "x": [1, 2]})
-        expected = xr.Dataset(
-            {"a": ("x", [1, 2, np.nan]), "b": ("x", [np.nan, 3, 4])}, {"x": [0, 1, 2]}
-        )
-        assert expected.identical(ds1.merge(ds2))
-        assert expected.identical(ds2.merge(ds1))
-
-        expected = expected.isel(x=slice(2))
-        assert expected.identical(ds1.merge(ds2, join="left"))
-        assert expected.identical(ds2.merge(ds1, join="right"))
-
-        expected = expected.isel(x=slice(1, 2))
-        assert expected.identical(ds1.merge(ds2, join="inner"))
-        assert expected.identical(ds2.merge(ds1, join="inner"))
-
-    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
-    def test_merge_fill_value(self, fill_value):
-        ds1 = xr.Dataset({"a": ("x", [1, 2]), "x": [0, 1]})
-        ds2 = xr.Dataset({"b": ("x", [3, 4]), "x": [1, 2]})
-        if fill_value == dtypes.NA:
-            # if we supply the default, we expect the missing value for a
-            # float array
-            fill_value = np.nan
-        expected = xr.Dataset(
-            {"a": ("x", [1, 2, fill_value]), "b": ("x", [fill_value, 3, 4])},
-            {"x": [0, 1, 2]},
-        )
-        assert expected.identical(ds1.merge(ds2, fill_value=fill_value))
-        assert expected.identical(ds2.merge(ds1, fill_value=fill_value))
-        assert expected.identical(xr.merge([ds1, ds2], fill_value=fill_value))
-
-    def test_merge_no_conflicts(self):
-        ds1 = xr.Dataset({"a": ("x", [1, 2]), "x": [0, 1]})
-        ds2 = xr.Dataset({"a": ("x", [2, 3]), "x": [1, 2]})
-        expected = xr.Dataset({"a": ("x", [1, 2, 3]), "x": [0, 1, 2]})
-
-        assert expected.identical(ds1.merge(ds2, compat="no_conflicts"))
-        assert expected.identical(ds2.merge(ds1, compat="no_conflicts"))
-
-        assert ds1.identical(ds1.merge(ds2, compat="no_conflicts", join="left"))
-
-        assert ds2.identical(ds1.merge(ds2, compat="no_conflicts", join="right"))
-
-        expected2 = xr.Dataset({"a": ("x", [2]), "x": [1]})
-        assert expected2.identical(ds1.merge(ds2, compat="no_conflicts", join="inner"))
-
-        with pytest.raises(xr.MergeError):
-            ds3 = xr.Dataset({"a": ("x", [99, 3]), "x": [1, 2]})
-            ds1.merge(ds3, compat="no_conflicts")
-
-        with pytest.raises(xr.MergeError):
-            ds3 = xr.Dataset({"a": ("y", [2, 3]), "y": [1, 2]})
-            ds1.merge(ds3, compat="no_conflicts")
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: numpy>=1.14 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.14.1+41.gde044c3c) (1.23.0)
Requirement already satisfied: pandas>=0.24 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.14.1+41.gde044c3c) (1.5.3)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.24->xarray==0.14.1+41.gde044c3c) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.24->xarray==0.14.1+41.gde044c3c) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.24->xarray==0.14.1+41.gde044c3c) (1.16.0)
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.14.1+40.gef6e6a7b
    Uninstalling xarray-0.14.1+40.gef6e6a7b:
      Successfully uninstalled xarray-0.14.1+40.gef6e6a7b
  DEPRECATION: Legacy editable install of xarray==0.14.1+41.gde044c3c from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for xarray
Successfully installed xarray
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 16 items

xarray/tests/test_merge.py ................                              [100%]

=============================== warnings summary ===============================
xarray/core/dask_array_compat.py:13
xarray/core/dask_array_compat.py:13
  /testbed/xarray/core/dask_array_compat.py:13: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) >= LooseVersion("2.0.0"):

xarray/core/dask_array_compat.py:100
xarray/core/dask_array_compat.py:100
  /testbed/xarray/core/dask_array_compat.py:100: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) >= LooseVersion("2.8.1"):

xarray/core/dask_array_compat.py:137
xarray/core/dask_array_compat.py:137
  /testbed/xarray/core/dask_array_compat.py:137: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2.9.0"):

xarray/core/formatting_html.py:6
  /testbed/xarray/core/formatting_html.py:6: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

xarray/core/pdcompat.py:45
  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < "0.25.0":

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/tests/test_merge.py: 80 warnings
  /testbed/xarray/core/formatting.py:142: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    elif isinstance(x, (float, np.float)):

xarray/tests/test_merge.py::test_dataset_quantile
xarray/tests/test_merge.py::test_dataset_quantile
  /testbed/xarray/core/variable.py:1751: DeprecationWarning: the `interpolation=` argument to nanpercentile was renamed to `method=`, which has additional options.
  Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they used. (Deprecated NumPy 1.22)
    return np.moveaxis(np.nanpercentile(npa, **kwargs), 0, -1)

xarray/tests/test_merge.py::test_dataset_interpolate_na
xarray/tests/test_merge.py::test_dataset_interpolate_na
  /testbed/xarray/core/missing.py:236: FutureWarning: is_monotonic is deprecated and will be removed in a future version. Use is_monotonic_increasing instead.
    if not index.is_monotonic:

xarray/tests/test_merge.py::test_dataset_interpolate_na
xarray/tests/test_merge.py::test_dataset_interpolate_na
  /testbed/xarray/core/missing.py:319: FutureWarning: This DataArray contains multi-dimensional coordinates. In the future, these coordinates will be transposed as well unless you specify transpose_coords=False.
    arr = apply_ufunc(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_merge.py::test_dataset_creation
PASSED xarray/tests/test_merge.py::test_dataset_repr
PASSED xarray/tests/test_merge.py::test_dataset_isel
PASSED xarray/tests/test_merge.py::test_dataset_sel
PASSED xarray/tests/test_merge.py::test_dataset_rename
PASSED xarray/tests/test_merge.py::test_dataset_drop_vars
PASSED xarray/tests/test_merge.py::test_dataset_merge
PASSED xarray/tests/test_merge.py::test_dataset_to_array
PASSED xarray/tests/test_merge.py::test_dataset_diff
PASSED xarray/tests/test_merge.py::test_dataset_shift
PASSED xarray/tests/test_merge.py::test_dataset_rolling
PASSED xarray/tests/test_merge.py::test_dataset_integrate
PASSED xarray/tests/test_merge.py::test_dataset_quantile
PASSED xarray/tests/test_merge.py::test_dataset_fillna
PASSED xarray/tests/test_merge.py::test_dataset_interpolate_na
PASSED xarray/tests/test_merge.py::test_dataset_map_blocks
======================= 16 passed, 102 warnings in 5.01s =======================

