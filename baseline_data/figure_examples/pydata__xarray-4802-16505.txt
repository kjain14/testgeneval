Instance ID: pydata__xarray-4802-16505

Baseline 1 (Pynguin):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: import xarray.coding.variables as module_0
import xarray.core.variable as module_1

def test_case_1():
    try:
        variable_0 = None
        c_f_scale_offset_coder_0 = None
        list_0 = []
        dict_0 = {}
        variable_coder_0 = module_0.VariableCoder(*list_0, **dict_0)
        variable_1 = variable_coder_0.decode(variable_0, c_f_scale_offset_coder_0)
    except BaseException:
        pass


def test_case_2():
    try:
        serialization_warning_0 = module_0.SerializationWarning()
        var_0 = module_0.lazy_elemwise_func(serialization_warning_0, serialization_warning_0, serialization_warning_0)
    except BaseException:
        pass


def test_case_3():
    try:
        c_f_mask_coder_0 = module_0.CFMaskCoder()
        var_0 = module_0.unpack_for_encoding(c_f_mask_coder_0)
    except BaseException:
        pass


def test_case_4():
    try:
        bool_0 = False
        var_0 = module_0.unpack_for_decoding(bool_0)
    except BaseException:
        pass


def test_case_5():
    try:
        set_0 = set()
        float_0 = 2200.0
        variable_0 = None
        variable_1 = module_1.Variable(set_0, float_0, variable_0)
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        var_0 = unsigned_integer_coder_0.decode(variable_1)
        bool_0 = None
        c_f_scale_offset_coder_0 = module_0.CFScaleOffsetCoder()
        var_1 = c_f_scale_offset_coder_0.encode(bool_0)
    except BaseException:
        pass


def test_case_6():
    try:
        c_f_mask_coder_0 = module_0.CFMaskCoder()
        str_0 = '8D\\:<a>PO4%CAL0'
        bool_0 = True
        c_f_scale_offset_coder_0 = module_0.CFScaleOffsetCoder()
        var_0 = c_f_scale_offset_coder_0.decode(str_0, bool_0)
    except BaseException:
        pass


def test_case_7():
    try:
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        variable_0 = None
        variable_coder_0 = module_0.VariableCoder()
        variable_1 = variable_coder_0.encode(variable_0)
    except BaseException:
        pass


def test_case_8():
    try:
        str_0 = 'value'
        var_0 = module_0.safe_setitem(str_0, str_0, str_0)
    except BaseException:
        pass


def test_case_9():
    try:
        str_0 = '+oR:G(k@:A[Q:xv{Lz'
        variable_0 = None
        hashable_0 = None
        dict_0 = {str_0: variable_0, hashable_0: variable_0, hashable_0: variable_0, hashable_0: variable_0}
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        var_0 = module_0.safe_setitem(dict_0, variable_0, unsigned_integer_coder_0, unsigned_integer_coder_0)
    except BaseException:
        pass


def test_case_10():
    try:
        set_0 = set()
        float_0 = 2200.0
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        variable_0 = None
        variable_1 = module_1.Variable(set_0, float_0, variable_0)
        unsigned_integer_coder_1 = module_0.UnsignedIntegerCoder()
        str_0 = 'R1u_<tVkui;e^qwCgT'
        str_1 = 'XIO09cy|'
        str_2 = 'klfr!_wwo\x0cika\\'
        dict_0 = {str_0: variable_1, str_1: variable_0, str_1: str_1, str_2: unsigned_integer_coder_1}
        serialization_warning_0 = module_0.SerializationWarning()
        var_0 = module_0.pop_to(dict_0, unsigned_integer_coder_0, str_2)
    except BaseException:
        pass# Automatically generated by Pynguin.


def test_case_11():
    pass


def test_case_12():
    set_0 = set()
    float_0 = 2175.83546936716
    unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
    variable_0 = None
    variable_1 = module_1.Variable(set_0, float_0, variable_0)
    c_f_mask_coder_0 = module_0.CFMaskCoder()
    var_0 = unsigned_integer_coder_0.encode(variable_1)


def test_case_13():
    set_0 = set()
    float_0 = 2200.0
    variable_0 = None
    variable_1 = module_1.Variable(set_0, float_0, variable_0)
    unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
    var_0 = unsigned_integer_coder_0.decode(variable_1)


def test_case_14():
    set_0 = set()
    float_0 = 2175.83546936716
    variable_0 = None
    variable_1 = module_1.Variable(set_0, float_0, variable_0)
    c_f_mask_coder_0 = module_0.CFMaskCoder()
    var_0 = c_f_mask_coder_0.encode(variable_1)


def test_case_15():
    set_0 = set()
    float_0 = 2175.83546936716
    variable_0 = None
    variable_1 = module_1.Variable(set_0, float_0, variable_0)
    c_f_scale_offset_coder_0 = module_0.CFScaleOffsetCoder()
    var_0 = c_f_scale_offset_coder_0.encode(variable_1)
    c_f_mask_coder_0 = module_0.CFMaskCoder()
    var_1 = c_f_mask_coder_0.decode(variable_1, c_f_scale_offset_coder_0)


def test_case_16():
    str_0 = '5RSHuiL'
    dict_0 = {}
    variable_0 = None
    var_0 = module_0.pop_to(dict_0, variable_0, str_0)
    assert var_0 is None


def test_case_17():
    var_0 = {}
    str_0 = 'new_key'
    str_1 = 'value'
    var_1 = module_0.safe_setitem(var_0, str_0, str_1)
    assert var_1 is None
    str_2 = 'new_ke'
    var_2 = module_0.safe_setitem(var_0, str_2, str_2)
    assert var_2 is None


def test_case_18():
    set_0 = set()
    float_0 = 2165.475378578334
    variable_0 = None
    variable_1 = module_1.Variable(set_0, float_0, variable_0)
    c_f_scale_offset_coder_0 = module_0.CFScaleOffsetCoder()
    var_0 = c_f_scale_offset_coder_0.encode(variable_1)
    serialization_warning_0 = module_0.SerializationWarning()
    variable_coder_0 = module_0.VariableCoder()
    var_1 = c_f_scale_offset_coder_0.decode(variable_1)

Coverage: 52.77777777777778
Mutation Score: 3.2099999999999937

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from xarray import Variable
from xarray.coding import variables
from xarray.core import dtypes

def test_serialization_warning():
    with pytest.warns(variables.SerializationWarning):
        warnings.warn("test warning", variables.SerializationWarning)

def test_variable_coder_encode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.encode(Variable(["x"], [1, 2, 3]))

def test_variable_coder_decode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.decode(Variable(["x"], [1, 2, 3]))

def test_elementwise_function_array():
    array = np.array([1, 2, 3])
    func = lambda x: x + 1
    dtype = np.int32
    elemwise_array = variables._ElementwiseFunctionArray(array, func, dtype)

    assert elemwise_array.dtype == np.dtype(dtype)
    assert np.array_equal(np.array(elemwise_array), np.array([2, 3, 4]))

def test_lazy_elemwise_func_with_numpy_array():
    array = np.array([1, 2, 3])
    func = lambda x: x + 1
    dtype = np.int32
    result = variables.lazy_elemwise_func(array, func, dtype)

    assert isinstance(result, variables._ElementwiseFunctionArray)
    assert np.array_equal(np.array(result), np.array([2, 3, 4]))

def test_lazy_elemwise_func_with_dask_array():
    da = pytest.importorskip("dask.array")
    array = da.from_array(np.array([1, 2, 3]), chunks=2)
    func = lambda x: x + 1
    dtype = np.int32
    result = variables.lazy_elemwise_func(array, func, dtype)

    assert isinstance(result, da.Array)
    assert np.array_equal(result.compute(), np.array([2, 3, 4]))

def test_unpack_for_encoding():
    var = Variable(["x"], [1, 2, 3], {"attr": "value"}, {"encoding": "value"})
    dims, data, attrs, encoding = variables.unpack_for_encoding(var)

    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"encoding": "value"}

def test_unpack_for_decoding():
    var = Variable(["x"], [1, 2, 3], {"attr": "value"}, {"encoding": "value"})
    dims, data, attrs, encoding = variables.unpack_for_decoding(var)

    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"encoding": "value"}

def test_safe_setitem():
    dest = {}
    variables.safe_setitem(dest, "key", "value")
    assert dest["key"] == "value"

    with pytest.raises(ValueError):
        variables.safe_setitem(dest, "key", "new_value")

def test_pop_to():
    source = {"key": "value"}
    dest = {}
    value = variables.pop_to(source, dest, "key")
    assert value == "value"
    assert "key" in dest
    assert "key" not in source

def test_apply_mask():
    data = np.array([1, 2, 3, 4])
    encoded_fill_values = [2, 3]
    decoded_fill_value = -1
    dtype = np.int32
    result = variables._apply_mask(data, encoded_fill_values, decoded_fill_value, dtype)

    assert np.array_equal(result, np.array([1, -1, -1, 4]))

def test_cf_mask_coder_encode():
    coder = variables.CFMaskCoder()
    variable = Variable(["x"], [1, 2, 3], encoding={"_FillValue": 2})
    encoded_var = coder.encode(variable)

    assert np.array_equal(encoded_var.data, [1, 2, 3])
    assert "_FillValue" in encoded_var.attrs

def test_cf_mask_coder_decode():
    coder = variables.CFMaskCoder()
    variable = Variable(["x"], [1, 2, 3], attrs={"_FillValue": 2})
    decoded_var = coder.decode(variable)

    assert np.array_equal(decoded_var.data, [1, np.nan, 3])

def test_cf_scale_offset_coder_encode():
    coder = variables.CFScaleOffsetCoder()
    variable = Variable(["x"], [10, 20, 30], encoding={"scale_factor": 2, "add_offset": 5})
    encoded_var = coder.encode(variable)

    assert np.array_equal(encoded_var.data, [2.5, 7.5, 12.5])

def test_cf_scale_offset_coder_decode():
    coder = variables.CFScaleOffsetCoder()
    variable = Variable(["x"], [2.5, 7.5, 12.5], attrs={"scale_factor": 2, "add_offset": 5})
    decoded_var = coder.decode(variable)

    assert np.array_equal(decoded_var.data, [10, 20, 30])

def test_unsigned_integer_coder_encode():
    coder = variables.UnsignedIntegerCoder()
    variable = Variable(["x"], [1, 2, 3], encoding={"_Unsigned": "true"})
    encoded_var = coder.encode(variable)

    assert encoded_var.data.dtype.kind == "i"

def test_unsigned_integer_coder_decode():
    coder = variables.UnsignedIntegerCoder()
    variable = Variable(["x"], np.array([1, 2, 3], dtype="i4"), attrs={"_Unsigned": "true"})
    decoded_var = coder.decode(variable)

    assert decoded_var.data.dtype.kind == "u"

Coverage: 80.55555555555556
Mutation Score: 41.03

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
import warnings
from xarray import Variable
from xarray.coding import variables
from xarray.core import dtypes

def test_serialization_warning():
    with pytest.warns(variables.SerializationWarning):
        warnings.warn("test warning", variables.SerializationWarning)

def test_variable_coder_encode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.encode(Variable(["x"], [1, 2, 3]))

def test_variable_coder_decode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.decode(Variable(["x"], [1, 2, 3]))

def test_elementwise_function_array():
    array = np.array([1, 2, 3])
    func = lambda x: x + 1
    dtype = np.int32
    elemwise_array = variables._ElementwiseFunctionArray(array, func, dtype)

    assert elemwise_array.dtype == np.dtype(dtype)
    assert np.array_equal(np.array(elemwise_array), np.array([2, 3, 4]))

def test_lazy_elemwise_func_with_numpy_array():
    array = np.array([1, 2, 3])
    func = lambda x: x + 1
    dtype = np.int32
    result = variables.lazy_elemwise_func(array, func, dtype)

    assert isinstance(result, variables._ElementwiseFunctionArray)
    assert np.array_equal(np.array(result), np.array([2, 3, 4]))

def test_lazy_elemwise_func_with_dask_array():
    da = pytest.importorskip("dask.array")
    array = da.from_array(np.array([1, 2, 3]), chunks=2)
    func = lambda x: x + 1
    dtype = np.int32
    result = variables.lazy_elemwise_func(array, func, dtype)

    assert isinstance(result, da.Array)
    assert np.array_equal(result.compute(), np.array([2, 3, 4]))

def test_unpack_for_encoding():
    var = Variable(["x"], [1, 2, 3], {"attr": "value"}, {"encoding": "value"})
    dims, data, attrs, encoding = variables.unpack_for_encoding(var)

    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"encoding": "value"}

def test_unpack_for_decoding():
    var = Variable(["x"], [1, 2, 3], {"attr": "value"}, {"encoding": "value"})
    dims, data, attrs, encoding = variables.unpack_for_decoding(var)

    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"encoding": "value"}

def test_safe_setitem():
    dest = {}
    variables.safe_setitem(dest, "key", "value")
    assert dest["key"] == "value"

    with pytest.raises(ValueError):
        variables.safe_setitem(dest, "key", "new_value")

def test_pop_to():
    source = {"key": "value"}
    dest = {}
    value = variables.pop_to(source, dest, "key")
    assert value == "value"
    assert "key" in dest
    assert "key" not in source

def test_apply_mask():
    data = np.array([1, 2, 3, 4])
    encoded_fill_values = [2, 3]
    decoded_fill_value = -1
    dtype = np.int32
    result = variables._apply_mask(data, encoded_fill_values, decoded_fill_value, dtype)

    assert np.array_equal(result, np.array([1, -1, -1, 4]))

def test_cf_mask_coder_encode():
    coder = variables.CFMaskCoder()
    variable = Variable(["x"], [1, 2, 3], encoding={"_FillValue": 2})
    encoded_var = coder.encode(variable)

    assert np.array_equal(encoded_var.data, [1, 2, 3])
    assert "_FillValue" in encoded_var.attrs

def test_cf_mask_coder_decode():
    coder = variables.CFMaskCoder()
    variable = Variable(["x"], [1, 2, 3], attrs={"_FillValue": 2})
    decoded_var = coder.decode(variable)

    assert np.array_equal(decoded_var.data, [1, np.nan, 3])

def test_cf_scale_offset_coder_encode():
    coder = variables.CFScaleOffsetCoder()
    variable = Variable(["x"], [10, 20, 30], encoding={"scale_factor": 2, "add_offset": 5})
    encoded_var = coder.encode(variable)

    assert np.array_equal(encoded_var.data, [2.5, 7.5, 12.5])

def test_cf_scale_offset_coder_decode():
    coder = variables.CFScaleOffsetCoder()
    variable = Variable(["x"], [2.5, 7.5, 12.5], attrs={"scale_factor": 2, "add_offset": 5})
    decoded_var = coder.decode(variable)

    assert np.array_equal(decoded_var.data, [10, 20, 30])

def test_unsigned_integer_coder_encode():
    coder = variables.UnsignedIntegerCoder()
    variable = Variable(["x"], [1, 2, 3], encoding={"_Unsigned": "true"})
    encoded_var = coder.encode(variable)

    assert encoded_var.data.dtype.kind == "i"

def test_unsigned_integer_coder_decode():
    coder = variables.UnsignedIntegerCoder()
    variable = Variable(["x"], np.array([1, 2, 3], dtype="i4"), attrs={"_Unsigned": "true"})
    decoded_var = coder.decode(variable)

    assert decoded_var.data.dtype.kind == "u"
Coverage: 80.55555555555556
Mutation Score: 41.03
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_coding.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 032a7cad9fd38fe3c21cbe220daa26edb52e2aaf
Author: TestGenEval <>
Date:   Wed Dec 11 12:28:01 2024 +0000

    Testing fixes

diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index 80277e9c..b035ff82 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -270,9 +270,9 @@ class CFScaleOffsetCoder(VariableCoder):
             add_offset = pop_to(attrs, encoding, "add_offset", name=name)
             dtype = _choose_float_dtype(data.dtype, "add_offset" in attrs)
             if np.ndim(scale_factor) > 0:
-                scale_factor = scale_factor.item()
+                scale_factor = np.asarray(scale_factor).item()
             if np.ndim(add_offset) > 0:
-                add_offset = add_offset.item()
+                add_offset = np.asarray(add_offset).item()
             transform = partial(
                 _scale_offset_decoding,
                 scale_factor=scale_factor,
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
deleted file mode 100644
index 0f191049..00000000
--- a/xarray/tests/test_coding.py
+++ /dev/null
@@ -1,107 +0,0 @@
-from contextlib import suppress
-
-import numpy as np
-import pandas as pd
-import pytest
-
-import xarray as xr
-from xarray.coding import variables
-from xarray.conventions import decode_cf_variable, encode_cf_variable
-
-from . import assert_equal, assert_identical, requires_dask
-
-with suppress(ImportError):
-    import dask.array as da
-
-
-def test_CFMaskCoder_decode():
-    original = xr.Variable(("x",), [0, -1, 1], {"_FillValue": -1})
-    expected = xr.Variable(("x",), [0, np.nan, 1])
-    coder = variables.CFMaskCoder()
-    encoded = coder.decode(original)
-    assert_identical(expected, encoded)
-
-
-encoding_with_dtype = {
-    "dtype": np.dtype("float64"),
-    "_FillValue": np.float32(1e20),
-    "missing_value": np.float64(1e20),
-}
-encoding_without_dtype = {
-    "_FillValue": np.float32(1e20),
-    "missing_value": np.float64(1e20),
-}
-CFMASKCODER_ENCODE_DTYPE_CONFLICT_TESTS = {
-    "numeric-with-dtype": ([0.0, -1.0, 1.0], encoding_with_dtype),
-    "numeric-without-dtype": ([0.0, -1.0, 1.0], encoding_without_dtype),
-    "times-with-dtype": (pd.date_range("2000", periods=3), encoding_with_dtype),
-}
-
-
-@pytest.mark.parametrize(
-    ("data", "encoding"),
-    CFMASKCODER_ENCODE_DTYPE_CONFLICT_TESTS.values(),
-    ids=list(CFMASKCODER_ENCODE_DTYPE_CONFLICT_TESTS.keys()),
-)
-def test_CFMaskCoder_encode_missing_fill_values_conflict(data, encoding):
-    original = xr.Variable(("x",), data, encoding=encoding)
-    encoded = encode_cf_variable(original)
-
-    assert encoded.dtype == encoded.attrs["missing_value"].dtype
-    assert encoded.dtype == encoded.attrs["_FillValue"].dtype
-
-    with pytest.warns(variables.SerializationWarning):
-        roundtripped = decode_cf_variable("foo", encoded)
-        assert_identical(roundtripped, original)
-
-
-def test_CFMaskCoder_missing_value():
-    expected = xr.DataArray(
-        np.array([[26915, 27755, -9999, 27705], [25595, -9999, 28315, -9999]]),
-        dims=["npts", "ntimes"],
-        name="tmpk",
-    )
-    expected.attrs["missing_value"] = -9999
-
-    decoded = xr.decode_cf(expected.to_dataset())
-    encoded, _ = xr.conventions.cf_encoder(decoded, decoded.attrs)
-
-    assert_equal(encoded["tmpk"], expected.variable)
-
-    decoded.tmpk.encoding["_FillValue"] = -9940
-    with pytest.raises(ValueError):
-        encoded, _ = xr.conventions.cf_encoder(decoded, decoded.attrs)
-
-
-@requires_dask
-def test_CFMaskCoder_decode_dask():
-    original = xr.Variable(("x",), [0, -1, 1], {"_FillValue": -1}).chunk()
-    expected = xr.Variable(("x",), [0, np.nan, 1])
-    coder = variables.CFMaskCoder()
-    encoded = coder.decode(original)
-    assert isinstance(encoded.data, da.Array)
-    assert_identical(expected, encoded)
-
-
-# TODO(shoyer): port other fill-value tests
-
-
-# TODO(shoyer): parameterize when we have more coders
-def test_coder_roundtrip():
-    original = xr.Variable(("x",), [0.0, np.nan, 1.0])
-    coder = variables.CFMaskCoder()
-    roundtripped = coder.decode(coder.encode(original))
-    assert_identical(original, roundtripped)
-
-
-@pytest.mark.parametrize("dtype", "u1 u2 i1 i2 f2 f4".split())
-def test_scaling_converts_to_float32(dtype):
-    original = xr.Variable(
-        ("x",), np.arange(10, dtype=dtype), encoding=dict(scale_factor=10)
-    )
-    coder = variables.CFScaleOffsetCoder()
-    encoded = coder.encode(original)
-    assert encoded.dtype == np.float32
-    roundtripped = coder.decode(encoded)
-    assert_identical(original, roundtripped)
-    assert roundtripped.dtype == np.float32
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: numpy>=1.15 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.3.dev82+g032a7cad.d20250207) (1.23.0)
Requirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.3.dev82+g032a7cad.d20250207) (1.5.3)
Requirement already satisfied: setuptools>=40.4 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.3.dev82+g032a7cad.d20250207) (68.0.0)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.16.3.dev82+g032a7cad.d20250207) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.16.3.dev82+g032a7cad.d20250207) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.25->xarray==0.16.3.dev82+g032a7cad.d20250207) (1.16.0)
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.16.3.dev82+g032a7cad
    Uninstalling xarray-0.16.3.dev82+g032a7cad:
      Successfully uninstalled xarray-0.16.3.dev82+g032a7cad
  DEPRECATION: Legacy editable install of xarray==0.16.3.dev82+g032a7cad.d20250207 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for xarray
Successfully installed xarray
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 14 items

xarray/tests/test_coding.py ..............                               [100%]

=============================== warnings summary ===============================
xarray/__init__.py:1
  /testbed/xarray/__init__.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

xarray/core/dask_array_compat.py:61
xarray/core/dask_array_compat.py:61
  /testbed/xarray/core/dask_array_compat.py:61: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2.9.0"):

xarray/core/pdcompat.py:45
  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < "0.25.0":

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
  /testbed/xarray/tests/__init__.py:59: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    return version.LooseVersion(vstring)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_coding.py::test_serialization_warning
PASSED xarray/tests/test_coding.py::test_variable_coder_encode_not_implemented
PASSED xarray/tests/test_coding.py::test_variable_coder_decode_not_implemented
PASSED xarray/tests/test_coding.py::test_lazy_elemwise_func_with_dask_array
PASSED xarray/tests/test_coding.py::test_unpack_for_encoding
PASSED xarray/tests/test_coding.py::test_unpack_for_decoding
PASSED xarray/tests/test_coding.py::test_safe_setitem
PASSED xarray/tests/test_coding.py::test_pop_to
PASSED xarray/tests/test_coding.py::test_apply_mask
PASSED xarray/tests/test_coding.py::test_cf_mask_coder_encode
PASSED xarray/tests/test_coding.py::test_cf_scale_offset_coder_encode
PASSED xarray/tests/test_coding.py::test_cf_scale_offset_coder_decode
PASSED xarray/tests/test_coding.py::test_unsigned_integer_coder_encode
PASSED xarray/tests/test_coding.py::test_unsigned_integer_coder_decode
======================= 14 passed, 16 warnings in 3.82s ========================

