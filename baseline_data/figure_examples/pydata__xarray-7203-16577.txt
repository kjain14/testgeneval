Instance ID: pydata__xarray-7203-16577

Baseline 1:
Predicted Test Suite: # Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import xarray.core.formatting as module_0
import scipy.sparse._sputils as module_1
import scipy.io.matlab.miobase as module_2
import llvmlite.binding.targets as module_3
import numba.core.typing.typeof as module_4
import numpy as module_5
import scipy.fftpack.helper as module_6
import scipy.io.matlab.mio5_params as module_7
import pandas.core.array_algos.masked_reductions as module_8
import pandas._testing as module_9


def test_case_0():
    none_type_0 = None
    var_0 = module_0.summarize_attr(none_type_0, none_type_0)
    assert var_0 == "    None: None"
    assert module_0.EMPTY_REPR == "    *empty*"
    with pytest.raises(AssertionError):
        module_0.inline_sparse_repr(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.get_index_dtype()
    module_0.wrap_indent(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\x0c?DR+2E&30\r!QS 5pb"
    none_type_0 = None
    module_0.last_n_items(str_0, none_type_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_4():
    var_0 = module_2.__dir__()
    var_1 = module_0.format_item(var_0, quote_strings=var_0)
    assert (
        var_1
        == "['MatFileReader', 'MatReadError', 'MatReadWarning', 'MatVarReader', 'MatWriteError', 'arr_dtype_number', 'arr_to_chars', 'convert_dtypes', 'doc_dict', 'docfiller', 'get_matfile_version', 'matdims', 'read_dtype', 'doccer', 'boc']"
    )
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_5():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.coords_repr(none_type_0)


def test_case_7():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0, none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_3.get_host_cpu_features()
    var_1 = var_0.__len__()
    var_2 = module_0.indexes_repr(var_0, var_1, var_1)
    assert (
        var_2
        == "Indexes:\n    avx512pf                                                                            False\n    tsxldtrk                                                                            False\n    cx16                                                                                True\n    sahf                                                                                True\n    tbm                                                                                 False\n    avx512ifma                                                                          False\n    sha                                                                                 False\n    crc32                                                                               True\n    fma4                                                                                False\n    vpclmulqdq                                                                          False\n    prfchw                                                                              True\n    bmi2                                                                                True\n    cldemote                                                                            False\n    fsgsbase                                                                            True\n    ptwrite                                                                             False\n    amx-tile                                                                            False\n    uintr                                                                               False\n    gfni                                                                                False\n    popcnt                                                                              True\n    widekl                                                                              False\n    aes                                                                                 True\n    avx512bitalg                                                                        False\n    movdiri                                                                             False\n    xsaves                                                                              True\n    avx512er                                                                            False\n    avxvnni                                                                             False\n    avx512fp16                                                                          False\n    avx512vnni                                                                          True\n    amx-bf16                                                                            False\n    avx512vpopcntdq                                                                     False\n    pconfig                                                                             False\n    clwb                                                                                True\n    avx512f                                                                             True\n    xsavec                                                                              True\n    clzero                                                                              False\n    pku                                                                                 True\n    mmx                                                                                 True\n    lwp                                                                                 False\n    rdpid                                                                               False\n    xop                                                                                 False\n    rdseed                                                                              True\n    waitpkg                                                                             False\n    kl                                                                                  False\n    movdir64b                                                                           False\n    sse4a                                                                               False\n    avx512bw                                                                            True\n    clflushopt                                                                          True\n    xsave                                                                               True\n    avx512vbmi2                                                                         False\n    64bit                                                                               True\n    avx512vl                                                                            True\n    serialize                                                                           False\n    hreset                                                                              False\n    invpcid                                                                             True\n    avx512cd                                                                            True\n    avx                                                                                 True\n    vaes                                                                                False\n    avx512bf16                                                                          False\n    cx8                                                                                 True\n    fma                                                                                 True\n    rtm                                                                                 False\n    bmi                                                                                 True\n    enqcmd                                                                              False\n    rdrnd                                                                               True\n    mwaitx                                                                              False\n    sse4.1                                                                              True\n    sse4.2                                                                              True\n    avx2                                                                                True\n    fxsr                                                                                True\n    wbnoinvd                                                                            False\n    sse                                                                                 True\n    lzcnt                                                                               True\n    pclmul                                                                              True\n    prefetchwt1                                                                         False\n    f16c                                                                                True\n    ssse3                                                                               True\n    sgx                                                                                 False\n    shstk                                                                               False\n    cmov                                                                                True\n    avx512vbmi                                                                          False\n    amx-int8                                                                            False\n    movbe                                                                               True\n    avx512vp2intersect                                                                  False\n    xsaveopt                                                                            True\n    avx512dq                                                                            True\n    sse2                                                                                True\n    adx                                                                                 True\n    sse3                                                                                True"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    var_3 = module_4.typeof_impl(var_2, var_1)
    var_2.op_CALL_FUNCTION(var_1, var_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    bool_0 = False
    var_0 = module_5.iscomplexobj(bool_0)
    var_1 = module_0.inline_index_repr(var_0, bool_0)
    assert var_1 == "False"
    assert module_0.EMPTY_REPR == "    *empty*"
    str_0 = "7eJalZ"
    var_2 = module_0.limit_lines(str_0, limit=var_0)
    assert var_2 == "...\n7eJalZ"
    module_0.format_array_flat(none_type_0, bool_0)


def test_case_10():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.diff_array_repr(var_0, var_0, var_0)


def test_case_12():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(none_type_0)
    assert var_1 == "None"
    with pytest.raises(TypeError):
        module_0.summarize_variable(var_0, var_1, var_1, is_index=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    var_2 = module_0.format_item(var_0)
    assert var_2 == "['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len']"
    var_3 = var_0.__len__()
    module_0.indexes_repr(var_2, var_2, var_3)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.dim_summary(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0, none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_1 = None
    var_1 = module_0.format_item(var_0, quote_strings=none_type_1)
    assert var_1 == "None"
    var_2 = var_1.__len__()
    list_0 = [none_type_0, var_0]
    bool_0 = True
    module_0.summarize_variable(var_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_0.format_items(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_7.__dir__()
    module_0.indexes_repr(var_0, max_rows=var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "y]YZD"
    str_1 = "P'"
    str_2 = "O9TS\r\nFqmw5c,!"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    var_0 = module_0.nondefault_indexes(dict_0)
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_0 = None
    module_8.prod(none_type_0, none_type_0, min_count=none_type_0)


def test_case_19():
    bool_0 = True
    int_0 = module_0.calc_max_rows_last(bool_0)
    assert int_0 == 0
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_20():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.inline_dask_repr(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    var_0 = module_1.get_index_dtype()
    module_0.format_timestamp(var_0)


def test_case_22():
    none_type_0 = None
    var_0 = module_0.format_timedelta(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_23():
    str_0 = "QM"
    var_0 = module_5.shape(str_0)
    with pytest.raises(TypeError):
        module_0.summarize_variable(var_0, str_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    module_0.dim_summary_limited(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_0.indexes_repr(none_type_1, max_rows=none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_2 = None
    bool_0 = False
    module_0.summarize_index(none_type_0, none_type_2, bool_0, var_0)


def test_case_26():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(var_0, none_type_0)
    assert var_1 == "'Indexes:\\n    *empty*'"


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "f=]1M6M(u"
    bool_0 = True
    var_0 = module_0.limit_lines(str_0, limit=bool_0)
    assert var_0 == "f=]1M6M(u"
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_0 = None
    var_1 = module_0.summarize_attr(none_type_0, none_type_0, none_type_0)
    assert var_1 == "    None: None"
    none_type_1 = None
    var_2 = module_0.format_item(none_type_1)
    assert var_2 == "None"
    var_2.__enter__()


def test_case_28():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0, none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(var_0)
    assert var_1 == "'None'"
    var_2 = module_0.format_timestamp(none_type_0)
    assert var_2 == "NaT"
    var_3 = module_0.wrap_indent(var_1)
    assert var_3 == "'None'"


@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    var_0 = module_0.format_timedelta(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.diff_coords_repr(none_type_0, none_type_0, none_type_0)


def test_case_30():
    index_0 = module_9.makeStringIndex()
    var_0 = module_0.format_item(index_0)
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.summarize_attr(var_0, none_type_0)
    assert var_1 == "    Indexes:\n    *empty*: None"
    none_type_1 = None
    var_2 = module_0.format_item(var_0, quote_strings=none_type_1)
    assert var_2 == "Indexes:\n    *empty*"
    var_2.__enter__()


def test_case_32():
    var_0 = module_3.get_host_cpu_name()
    var_1 = var_0.__len__()
    var_2 = module_0.format_timestamp(var_1)
    assert var_2 == "1970-01-01T00:00:00.000000011"
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    var_0 = module_0.short_numpy_repr(none_type_0)
    assert var_0 == "array(None, dtype=object)"
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.indexes_repr(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    var_0 = module_6.__dir__()
    module_0.indexes_repr(var_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(var_0, none_type_0)
    assert var_1 == "'Indexes:\\n    *empty*'"
    var_2 = module_0.format_timestamp(none_type_0)
    assert var_2 == "NaT"
    var_3 = module_0.format_item(var_1)
    assert var_3 == "\"'Indexes:\\\\n    *empty*'\""
    var_4 = module_1.get_index_dtype()
    module_0.wrap_indent(var_1, length=var_4)


@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.indexes_repr(none_type_0, var_0)
    assert var_1 == "Indexes:\n    *empty*"
    module_0.summarize_attr(var_1, none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    module_0.coords_repr(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = var_0.__len__()
    assert var_1 == 3
    module_0.indexes_repr(var_0, var_1, var_1)


def test_case_39():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    var_2 = module_0.format_items(var_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = var_0.__len__()
    assert var_1 == 3
    var_2 = module_0.format_timedelta(var_1, var_0)
    assert var_2 == "0 days 00:00:00.000000003"
    module_0.indexes_repr(var_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = var_0.__len__()
    assert var_1 == 3
    module_0.first_n_items(var_1, var_1)


def test_case_42():
    none_type_0 = None
    bool_0 = False
    int_0 = module_0.calc_max_rows_last(bool_0)
    assert module_0.EMPTY_REPR == "    *empty*"
    var_0 = module_0.inline_index_repr(none_type_0)
    assert var_0 == "None"
    var_1 = var_0.__len__()
    var_2 = module_0.format_timedelta(none_type_0, bool_0)
    assert var_2 == "NaT"
    var_3 = var_2.__eq__(var_0)
    assert var_3 is False
    var_4 = module_0.indexes_repr(var_3, max_rows=var_0)
    assert var_4 == "Indexes:\n    *empty*"
    var_5 = module_4.typeof_impl(var_1, var_1)
    var_6 = module_0.format_timestamp(int_0)
    assert var_6 == "1970-01-01"


@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    var_0 = module_0.short_numpy_repr(none_type_0)
    assert var_0 == "array(None, dtype=object)"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.unindexed_dims_repr(var_0, var_0)
    var_2 = module_0.format_timestamp(none_type_0)
    assert var_2 == "NaT"
    module_0.diff_dataset_repr(var_0, var_2, none_type_0)


def test_case_44():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    with pytest.raises(TypeError):
        module_0.summarize_variable(var_0, none_type_0, var_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    index_0 = module_9.makeStringIndex()
    var_2 = module_0.format_item(index_0, var_0)
    module_0.inline_variable_array_repr(index_0, var_1)

Coverage: 46.04651162790697
Mutation Score: 6.049999999999997

Baseline 2:
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from xarray.core import formatting
from pandas.errors import OutOfBoundsDatetime

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 2) == "te"

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 2) == "te..."
    assert formatting.maybe_truncate("test", 4) == "test"

def test_wrap_indent():
    text = "line1\nline2"
    result = formatting.wrap_indent(text, start=">", length=2)
    assert result == ">line1\n  line2"

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]
    empty_array = np.array([])
    assert formatting.last_item(empty_array) == []

def test_calc_max_rows_first():
    assert formatting.calc_max_rows_first(5) == 3
    assert formatting.calc_max_rows_first(4) == 2

def test_calc_max_rows_last():
    assert formatting.calc_max_rows_last(5) == 2
    assert formatting.calc_max_rows_last(4) == 2

def test_format_timestamp():
    dt = datetime(2020, 1, 1)
    assert formatting.format_timestamp(dt) == "2020-01-01"
    dt_with_time = datetime(2020, 1, 1, 12, 0)
    assert formatting.format_timestamp(dt_with_time) == "2020-01-01T12:00:00"
    with pytest.raises(OutOfBoundsDatetime):
        formatting.format_timestamp(datetime(3000, 1, 1))

def test_format_timedelta():
    td = timedelta(days=1, hours=5)
    assert formatting.format_timedelta(td) == "1 days 05:00:00"
    assert formatting.format_timedelta(td, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(td, timedelta_format="time") == "05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2020-01-01')) == "2020-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item("test") == "'test'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64('2020-01-01'), timedelta(days=1), "test", 3.14159]
    formatted = formatting.format_items(items)
    assert formatted == ["2020-01-01", "1 days 00:00:00", "'test'", "3.142"]

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result == "1 2 3 ... 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.array([])

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3,)>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 5
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=5, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.dtype('float64')
        _data = np.array([1, 2, 3])

    var = MockVariable()
    result = formatting.summarize_variable('var', var, 10)
    assert "var" in result
    assert "float64" in result

def test_summarize_attr():
    result = formatting.summarize_attr('key', 'value')
    assert "key:" in result
    assert "value" in result

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(string, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    result = formatting.short_numpy_repr(array)
    assert "1.123457" in result
    assert "2.987654" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ("x",)
        variable = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result
    assert "x" in result

def test_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "var1" in result
    assert "Dimensions" in result

def test_diff_array_repr():
    a = np.array([1, 2, 3])
    b = np.array([1, 2, 4])
    result = formatting.diff_array_repr(a, b, compat="equals")
    assert "Differing values" in result

def test_diff_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    a = MockDataset()
    b = MockDataset()
    b.data_vars['var1'] = np.array([1, 2, 4])
    result = formatting.diff_dataset_repr(a, b, compat="equals")
    assert "Differing data variables" in result

Coverage: 28.837209302325583
Mutation Score: 16.150000000000006

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from xarray.core import formatting
from pandas.errors import OutOfBoundsDatetime

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 2) == "te"

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 2) == "te..."
    assert formatting.maybe_truncate("test", 4) == "test"

def test_wrap_indent():
    text = "line1\nline2"
    result = formatting.wrap_indent(text, start=">", length=2)
    assert result == ">line1\n  line2"

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]
    empty_array = np.array([])
    assert formatting.last_item(empty_array) == []

def test_calc_max_rows_first():
    assert formatting.calc_max_rows_first(5) == 3
    assert formatting.calc_max_rows_first(4) == 2

def test_calc_max_rows_last():
    assert formatting.calc_max_rows_last(5) == 2
    assert formatting.calc_max_rows_last(4) == 2

def test_format_timestamp():
    dt = datetime(2020, 1, 1)
    assert formatting.format_timestamp(dt) == "2020-01-01"
    dt_with_time = datetime(2020, 1, 1, 12, 0)
    assert formatting.format_timestamp(dt_with_time) == "2020-01-01T12:00:00"
    with pytest.raises(OutOfBoundsDatetime):
        formatting.format_timestamp(datetime(3000, 1, 1))

def test_format_timedelta():
    td = timedelta(days=1, hours=5)
    assert formatting.format_timedelta(td) == "1 days 05:00:00"
    assert formatting.format_timedelta(td, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(td, timedelta_format="time") == "05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2020-01-01')) == "2020-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item("test") == "'test'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64('2020-01-01'), timedelta(days=1), "test", 3.14159]
    formatted = formatting.format_items(items)
    assert formatted == ["2020-01-01", "1 days 00:00:00", "'test'", "3.142"]

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result == "1 2 3 ... 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.array([])

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3,)>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 5
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=5, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.dtype('float64')
        _data = np.array([1, 2, 3])

    var = MockVariable()
    result = formatting.summarize_variable('var', var, 10)
    assert "var" in result
    assert "float64" in result

def test_summarize_attr():
    result = formatting.summarize_attr('key', 'value')
    assert "key:" in result
    assert "value" in result

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(string, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    result = formatting.short_numpy_repr(array)
    assert "1.123457" in result
    assert "2.987654" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ("x",)
        variable = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result
    assert "x" in result

def test_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "var1" in result
    assert "Dimensions" in result

def test_diff_array_repr():
    a = np.array([1, 2, 3])
    b = np.array([1, 2, 4])
    result = formatting.diff_array_repr(a, b, compat="equals")
    assert "Differing values" in result

def test_diff_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    a = MockDataset()
    b = MockDataset()
    b.data_vars['var1'] = np.array([1, 2, 4])
    result = formatting.diff_dataset_repr(a, b, compat="equals")
    assert "Differing data variables" in result
Coverage: 28.837209302325583
Mutation Score: 16.840000000000003
