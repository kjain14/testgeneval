Instance ID: pydata__xarray-7203-16577

Baseline 1 (Pynguin):
Predicted Test Suite: # Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import xarray.core.formatting as module_0
import scipy.sparse._sputils as module_1
import scipy.io.matlab.miobase as module_2
import llvmlite.binding.targets as module_3
import numba.core.typing.typeof as module_4
import numpy as module_5
import scipy.fftpack.helper as module_6
import scipy.io.matlab.mio5_params as module_7
import pandas.core.array_algos.masked_reductions as module_8
import pandas._testing as module_9


def test_case_0():
    none_type_0 = None
    var_0 = module_0.summarize_attr(none_type_0, none_type_0)
    assert var_0 == "    None: None"
    assert module_0.EMPTY_REPR == "    *empty*"
    with pytest.raises(AssertionError):
        module_0.inline_sparse_repr(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.get_index_dtype()
    module_0.wrap_indent(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\x0c?DR+2E&30\r!QS 5pb"
    none_type_0 = None
    module_0.last_n_items(str_0, none_type_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_4():
    var_0 = module_2.__dir__()
    var_1 = module_0.format_item(var_0, quote_strings=var_0)
    assert (
        var_1
        == "['MatFileReader', 'MatReadError', 'MatReadWarning', 'MatVarReader', 'MatWriteError', 'arr_dtype_number', 'arr_to_chars', 'convert_dtypes', 'doc_dict', 'docfiller', 'get_matfile_version', 'matdims', 'read_dtype', 'doccer', 'boc']"
    )
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_5():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.coords_repr(none_type_0)


def test_case_7():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0, none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_3.get_host_cpu_features()
    var_1 = var_0.__len__()
    var_2 = module_0.indexes_repr(var_0, var_1, var_1)
    assert (
        var_2
        == "Indexes:\n    avx512pf                                                                            False\n    tsxldtrk                                                                            False\n    cx16                                                                                True\n    sahf                                                                                True\n    tbm                                                                                 False\n    avx512ifma                                                                          False\n    sha                                                                                 False\n    crc32                                                                               True\n    fma4                                                                                False\n    vpclmulqdq                                                                          False\n    prfchw                                                                              True\n    bmi2                                                                                True\n    cldemote                                                                            False\n    fsgsbase                                                                            True\n    ptwrite                                                                             False\n    amx-tile                                                                            False\n    uintr                                                                               False\n    gfni                                                                                False\n    popcnt                                                                              True\n    widekl                                                                              False\n    aes                                                                                 True\n    avx512bitalg                                                                        False\n    movdiri                                                                             False\n    xsaves                                                                              True\n    avx512er                                                                            False\n    avxvnni                                                                             False\n    avx512fp16                                                                          False\n    avx512vnni                                                                          True\n    amx-bf16                                                                            False\n    avx512vpopcntdq                                                                     False\n    pconfig                                                                             False\n    clwb                                                                                True\n    avx512f                                                                             True\n    xsavec                                                                              True\n    clzero                                                                              False\n    pku                                                                                 True\n    mmx                                                                                 True\n    lwp                                                                                 False\n    rdpid                                                                               False\n    xop                                                                                 False\n    rdseed                                                                              True\n    waitpkg                                                                             False\n    kl                                                                                  False\n    movdir64b                                                                           False\n    sse4a                                                                               False\n    avx512bw                                                                            True\n    clflushopt                                                                          True\n    xsave                                                                               True\n    avx512vbmi2                                                                         False\n    64bit                                                                               True\n    avx512vl                                                                            True\n    serialize                                                                           False\n    hreset                                                                              False\n    invpcid                                                                             True\n    avx512cd                                                                            True\n    avx                                                                                 True\n    vaes                                                                                False\n    avx512bf16                                                                          False\n    cx8                                                                                 True\n    fma                                                                                 True\n    rtm                                                                                 False\n    bmi                                                                                 True\n    enqcmd                                                                              False\n    rdrnd                                                                               True\n    mwaitx                                                                              False\n    sse4.1                                                                              True\n    sse4.2                                                                              True\n    avx2                                                                                True\n    fxsr                                                                                True\n    wbnoinvd                                                                            False\n    sse                                                                                 True\n    lzcnt                                                                               True\n    pclmul                                                                              True\n    prefetchwt1                                                                         False\n    f16c                                                                                True\n    ssse3                                                                               True\n    sgx                                                                                 False\n    shstk                                                                               False\n    cmov                                                                                True\n    avx512vbmi                                                                          False\n    amx-int8                                                                            False\n    movbe                                                                               True\n    avx512vp2intersect                                                                  False\n    xsaveopt                                                                            True\n    avx512dq                                                                            True\n    sse2                                                                                True\n    adx                                                                                 True\n    sse3                                                                                True"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    var_3 = module_4.typeof_impl(var_2, var_1)
    var_2.op_CALL_FUNCTION(var_1, var_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    bool_0 = False
    var_0 = module_5.iscomplexobj(bool_0)
    var_1 = module_0.inline_index_repr(var_0, bool_0)
    assert var_1 == "False"
    assert module_0.EMPTY_REPR == "    *empty*"
    str_0 = "7eJalZ"
    var_2 = module_0.limit_lines(str_0, limit=var_0)
    assert var_2 == "...\n7eJalZ"
    module_0.format_array_flat(none_type_0, bool_0)


def test_case_10():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.diff_array_repr(var_0, var_0, var_0)


def test_case_12():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(none_type_0)
    assert var_1 == "None"
    with pytest.raises(TypeError):
        module_0.summarize_variable(var_0, var_1, var_1, is_index=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    var_2 = module_0.format_item(var_0)
    assert var_2 == "['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len']"
    var_3 = var_0.__len__()
    module_0.indexes_repr(var_2, var_2, var_3)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.dim_summary(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0, none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_1 = None
    var_1 = module_0.format_item(var_0, quote_strings=none_type_1)
    assert var_1 == "None"
    var_2 = var_1.__len__()
    list_0 = [none_type_0, var_0]
    bool_0 = True
    module_0.summarize_variable(var_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_0.format_items(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_7.__dir__()
    module_0.indexes_repr(var_0, max_rows=var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "y]YZD"
    str_1 = "P'"
    str_2 = "O9TS\r\nFqmw5c,!"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    var_0 = module_0.nondefault_indexes(dict_0)
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_0 = None
    module_8.prod(none_type_0, none_type_0, min_count=none_type_0)


def test_case_19():
    bool_0 = True
    int_0 = module_0.calc_max_rows_last(bool_0)
    assert int_0 == 0
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_20():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.inline_dask_repr(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    var_0 = module_1.get_index_dtype()
    module_0.format_timestamp(var_0)


def test_case_22():
    none_type_0 = None
    var_0 = module_0.format_timedelta(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"


def test_case_23():
    str_0 = "QM"
    var_0 = module_5.shape(str_0)
    with pytest.raises(TypeError):
        module_0.summarize_variable(var_0, str_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    module_0.dim_summary_limited(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_0.indexes_repr(none_type_1, max_rows=none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_2 = None
    bool_0 = False
    module_0.summarize_index(none_type_0, none_type_2, bool_0, var_0)


def test_case_26():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(var_0, none_type_0)
    assert var_1 == "'Indexes:\\n    *empty*'"


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "f=]1M6M(u"
    bool_0 = True
    var_0 = module_0.limit_lines(str_0, limit=bool_0)
    assert var_0 == "f=]1M6M(u"
    assert module_0.EMPTY_REPR == "    *empty*"
    none_type_0 = None
    var_1 = module_0.summarize_attr(none_type_0, none_type_0, none_type_0)
    assert var_1 == "    None: None"
    none_type_1 = None
    var_2 = module_0.format_item(none_type_1)
    assert var_2 == "None"
    var_2.__enter__()


def test_case_28():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0, none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(var_0)
    assert var_1 == "'None'"
    var_2 = module_0.format_timestamp(none_type_0)
    assert var_2 == "NaT"
    var_3 = module_0.wrap_indent(var_1)
    assert var_3 == "'None'"


@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    var_0 = module_0.format_timedelta(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.diff_coords_repr(none_type_0, none_type_0, none_type_0)


def test_case_30():
    index_0 = module_9.makeStringIndex()
    var_0 = module_0.format_item(index_0)
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.summarize_attr(var_0, none_type_0)
    assert var_1 == "    Indexes:\n    *empty*: None"
    none_type_1 = None
    var_2 = module_0.format_item(var_0, quote_strings=none_type_1)
    assert var_2 == "Indexes:\n    *empty*"
    var_2.__enter__()


def test_case_32():
    var_0 = module_3.get_host_cpu_name()
    var_1 = var_0.__len__()
    var_2 = module_0.format_timestamp(var_1)
    assert var_2 == "1970-01-01T00:00:00.000000011"
    assert module_0.EMPTY_REPR == "    *empty*"


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    var_0 = module_0.short_numpy_repr(none_type_0)
    assert var_0 == "array(None, dtype=object)"
    assert module_0.EMPTY_REPR == "    *empty*"
    module_0.indexes_repr(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    var_0 = module_6.__dir__()
    module_0.indexes_repr(var_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.format_item(var_0, none_type_0)
    assert var_1 == "'Indexes:\\n    *empty*'"
    var_2 = module_0.format_timestamp(none_type_0)
    assert var_2 == "NaT"
    var_3 = module_0.format_item(var_1)
    assert var_3 == "\"'Indexes:\\\\n    *empty*'\""
    var_4 = module_1.get_index_dtype()
    module_0.wrap_indent(var_1, length=var_4)


@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    var_0 = module_0.inline_index_repr(none_type_0)
    assert var_0 == "None"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.indexes_repr(none_type_0, var_0)
    assert var_1 == "Indexes:\n    *empty*"
    module_0.summarize_attr(var_1, none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    module_0.coords_repr(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = var_0.__len__()
    assert var_1 == 3
    module_0.indexes_repr(var_0, var_1, var_1)


def test_case_39():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    var_2 = module_0.format_items(var_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = var_0.__len__()
    assert var_1 == 3
    var_2 = module_0.format_timedelta(var_1, var_0)
    assert var_2 == "0 days 00:00:00.000000003"
    module_0.indexes_repr(var_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    var_0 = module_0.format_timestamp(none_type_0)
    assert var_0 == "NaT"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = var_0.__len__()
    assert var_1 == 3
    module_0.first_n_items(var_1, var_1)


def test_case_42():
    none_type_0 = None
    bool_0 = False
    int_0 = module_0.calc_max_rows_last(bool_0)
    assert module_0.EMPTY_REPR == "    *empty*"
    var_0 = module_0.inline_index_repr(none_type_0)
    assert var_0 == "None"
    var_1 = var_0.__len__()
    var_2 = module_0.format_timedelta(none_type_0, bool_0)
    assert var_2 == "NaT"
    var_3 = var_2.__eq__(var_0)
    assert var_3 is False
    var_4 = module_0.indexes_repr(var_3, max_rows=var_0)
    assert var_4 == "Indexes:\n    *empty*"
    var_5 = module_4.typeof_impl(var_1, var_1)
    var_6 = module_0.format_timestamp(int_0)
    assert var_6 == "1970-01-01"


@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    var_0 = module_0.short_numpy_repr(none_type_0)
    assert var_0 == "array(None, dtype=object)"
    assert module_0.EMPTY_REPR == "    *empty*"
    var_1 = module_0.unindexed_dims_repr(var_0, var_0)
    var_2 = module_0.format_timestamp(none_type_0)
    assert var_2 == "NaT"
    module_0.diff_dataset_repr(var_0, var_2, none_type_0)


def test_case_44():
    none_type_0 = None
    var_0 = module_0.indexes_repr(none_type_0)
    assert var_0 == "Indexes:\n    *empty*"
    assert module_0.EMPTY_REPR == "    *empty*"
    with pytest.raises(TypeError):
        module_0.summarize_variable(var_0, none_type_0, var_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    var_0 = module_6.__dir__()
    var_1 = module_0.short_numpy_repr(var_0)
    assert (
        var_1
        == "array(['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq', 'next_fast_len'],\n      dtype='<U13')"
    )
    assert module_0.EMPTY_REPR == "    *empty*"
    index_0 = module_9.makeStringIndex()
    var_2 = module_0.format_item(index_0, var_0)
    module_0.inline_variable_array_repr(index_0, var_1)

Coverage: 46.04651162790697
Mutation Score: 6.049999999999997

Baseline 2 (CodaMosa):
Predicted Test Suite: import datetime as module_2
import numpy as module_0
import numpy as module_1
import pytest
import xarray.core.formatting as module_0
import xarray.core.formatting as module_1

def test_case_1():
    try:
        tuple_0 = ()
        int_0 = 7
        var_0 = module_0.summarize_variable(int_0, tuple_0, int_0)
    except BaseException:
        pass


def test_case_2():
    try:
        tuple_0 = ()
        int_0 = -3
        var_0 = module_0.summarize_variable(int_0, tuple_0, int_0)
    except BaseException:
        pass


def test_case_3():
    try:
        list_0 = None
        timedelta64_0 = module_1.timedelta64()
        int_0 = 1229
        var_0 = module_0.format_array_flat(timedelta64_0, int_0)
        assert var_0 == '00:00:00'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.wrap_indent(list_0)
    except BaseException:
        pass


def test_case_4():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = 82
        int_1 = module_0.calc_max_rows_last(int_0)
        assert int_1 == 41
        assert module_0.EMPTY_REPR == '    *empty*'
        var_0 = module_0.last_item(timedelta64_0)
        assert var_0 == [0]
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        bytes_0 = b'B\xbbd\xb9\xee\xd7'
        var_1 = module_0.inline_sparse_repr(bytes_0)
    except BaseException:
        pass


def test_case_5():
    try:
        dict_0 = {}
        var_0 = module_0.format_timestamp(dict_0)
    except BaseException:
        pass


def test_case_6():
    try:
        str_0 = None
        int_0 = 2262
        var_0 = module_0.format_array_flat(str_0, int_0)
    except BaseException:
        pass


def test_case_7():
    try:
        int_0 = 2068
        var_0 = module_0.inline_dask_repr(int_0)
    except BaseException:
        pass


def test_case_8():
    try:
        bytes_0 = b'\x17\xa6\r\xd4m\x03h6\xe8g\xa4-\xebUf\xb2t\x92'
        var_0 = module_0.inline_sparse_repr(bytes_0)
    except BaseException:
        pass


def test_case_9():
    try:
        bytes_0 = b'\xed\xabs\xa8\xea\xfe\xff'
        set_0 = {bytes_0, bytes_0, bytes_0}
        var_0 = module_0.inline_variable_array_repr(set_0, set_0)
    except BaseException:
        pass


def test_case_10():
    try:
        bool_0 = True
        var_0 = module_0.inline_index_repr(bool_0)
        assert var_0 == 'True'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        dict_0 = {}
        var_1 = module_0.summarize_attr(dict_0, dict_0)
        assert var_1 == '    {}: {}'
        int_0 = -1516
        set_0 = {int_0, var_1}
        var_2 = module_0.inline_sparse_repr(set_0)
    except BaseException:
        pass


def test_case_11():
    try:
        str_0 = 'X{=%p.pc$CD'
        var_0 = module_0.indexes_repr(str_0)
    except BaseException:
        pass


def test_case_12():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        float_0 = 223.1375
        str_0 = '\\>Bx\r47U`CZyi~;\x0b[@p'
        dict_0 = {str_0: float_0, str_0: float_0, str_0: str_0}
        var_0 = module_0.nondefault_indexes(dict_0)
        assert var_0 == {'\\>Bx\r47U`CZyi~;\x0b[@p': '\\>Bx\r47U`CZyi~;\x0b[@p'}
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.coords_repr(list_0, float_0)
    except BaseException:
        pass


def test_case_13():
    try:
        str_0 = 'X.nqh :F Vs)#{8'
        var_0 = module_0.coords_repr(str_0)
    except BaseException:
        pass


def test_case_14():
    try:
        float_0 = 2713.279435
        var_0 = module_0.format_timestamp(float_0)
        assert var_0 == '1970-01-01T00:00:00.000002713'
        assert module_0.EMPTY_REPR == '    *empty*'
        tuple_0 = None
        int_0 = 2607
        str_0 = module_0.dim_summary_limited(tuple_0, int_0, int_0)
    except BaseException:
        pass


def test_case_15():
    try:
        bool_0 = True
        list_0 = [bool_0]
        tuple_0 = (list_0, list_0, bool_0)
        var_0 = module_0.unindexed_dims_repr(tuple_0, bool_0)
    except BaseException:
        pass


def test_case_16():
    try:
        str_0 = None
        var_0 = module_0.short_data_repr(str_0)
    except BaseException:
        pass


def test_case_17():
    try:
        list_0 = []
        str_0 = '32J'
        float_0 = 274.48833
        var_0 = module_0.format_timestamp(float_0)
        assert var_0 == '1970-01-01T00:00:00.000000274'
        assert module_0.EMPTY_REPR == '    *empty*'
        dict_0 = {str_0: str_0, str_0: list_0, str_0: list_0}
        str_1 = 'cS=fcNIZ"x%#)H'
        var_1 = module_0.diff_array_repr(list_0, dict_0, str_1)
    except BaseException:
        pass


def test_case_18():
    try:
        int_0 = -1336
        int_1 = module_0.calc_max_rows_first(int_0)
        assert int_1 == -668
        assert module_0.EMPTY_REPR == '    *empty*'
        int_2 = 380
        dict_0 = {int_0: int_0, int_0: int_2}
        int_3 = 824
        list_0 = [int_1, int_1, dict_0, int_0]
        var_0 = module_0.diff_coords_repr(dict_0, int_3, list_0)
    except BaseException:
        pass


def test_case_19():
    try:
        str_0 = 'Wrapper around :meth:`pandas.Index.get_indexer` supporting n-dimensional\n    la(els\n    '
        var_0 = module_0.diff_dataset_repr(str_0, str_0, str_0)
    except BaseException:
        pass


def test_case_20():
    try:
        bool_0 = True
        var_0 = module_0.short_numpy_repr(bool_0)
        assert var_0 == 'array(True)'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        float_0 = 2249.51
        complex_0 = None
        int_0 = 1975
        var_1 = module_0.summarize_variable(float_0, complex_0, int_0, int_0, bool_0)
    except BaseException:
        pass


def test_case_21():
    try:
        hashable_0 = None
        str_0 = 'g?K)'
        int_0 = None
        bool_0 = True
        var_0 = module_0.summarize_variable(hashable_0, str_0, int_0, bool_0)
    except BaseException:
        pass


def test_case_22():
    try:
        bool_0 = True
        var_0 = module_0.indexes_repr(bool_0)
    except BaseException:
        pass


def test_case_23():
    try:
        str_0 = "+NP{$58L'a"
        str_1 = '+\\0j:|'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        tuple_0 = (dict_0,)
        bool_0 = False
        int_0 = 1678
        var_0 = module_0.summarize_index(tuple_0, bool_0, int_0, int_0)
        assert var_0 == '    ({"+NP{$58L\'a": "+NP{$58L\'a", \'+\\\\0j:|\': "+NP{$58L\'a"}alse'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.dataset_repr()
    except BaseException:
        pass


def test_case_24():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = -1198
        int_1 = module_0.calc_max_rows_first(int_0)
        assert int_1 == -599
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = '(dNH'
        var_0 = module_0.inline_sparse_repr(str_0)
    except BaseException:
        pass


def test_case_25():
    try:
        float_0 = -151.337302
        bool_0 = False
        int_0 = -1318
        var_0 = module_0.pretty_print(bool_0, int_0)
        assert var_0 == '...'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        int_1 = None
        var_1 = module_0.format_timedelta(int_1)
        assert var_1 == 'NaT'
        bool_1 = False
        var_2 = module_0.summarize_attr(bool_1, bool_0, int_0)
        assert var_2 == '... False'
        str_0 = None
        dict_0 = {str_0: str_0, str_0: var_0}
        var_3 = module_0.nondefault_indexes(dict_0)
        assert var_3 == {None: '...'}
        hashable_0 = None
        int_2 = -2355
        var_4 = module_0.summarize_variable(hashable_0, float_0, int_2)
    except BaseException:
        pass


def test_case_26():
    try:
        int_0 = -7
        datetime64_0 = module_1.datetime64()
        var_0 = module_0.last_n_items(datetime64_0, int_0)
    except BaseException:
        pass


def test_case_27():
    try:
        str_0 = 'Wrapper around :meth:`pandas.Index.get_indexer` supporting n-dimensional\n    labels\n    '
        str_1 = ' 6g$fT;oQRaY8'
        str_2 = 'y;w'
        var_0 = module_0.format_item(str_2, str_2)
        assert var_0 == "'y;w'"
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        list_0 = [var_0, str_0, str_1]
        var_1 = module_0.dim_summary(list_0)
    except BaseException:
        pass


def test_case_28():
    try:
        bool_0 = False
        list_0 = [bool_0]
        float_0 = 538.0
        list_1 = [bool_0, list_0, bool_0]
        var_0 = module_0.indexes_repr(list_0, float_0, list_1)
    except BaseException:
        pass


def test_case_29():
    try:
        list_0 = []
        list_1 = [list_0]
        var_0 = module_0.format_items(list_1)
    except BaseException:
        pass


def test_case_30():
    try:
        str_0 = None
        int_0 = -1437
        list_0 = [int_0, int_0]
        var_0 = module_0.format_items(list_0)
        assert var_0 == ['-1437', '-1437']
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.summarize_variable(str_0, int_0, int_0)
    except BaseException:
        pass


def test_case_31():
    try:
        str_0 = '23:59:59.999999597'
        var_0 = module_0.format_item(str_0)
        assert var_0 == "'23:59:59.999999597'"
        assert module_0.EMPTY_REPR == '    *empty*'
        list_0 = []
        var_1 = module_0.format_item(list_0)
        assert var_1 == '[]'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        dict_0 = {}
        str_1 = 'date'
        var_2 = module_0.wrap_indent(str_1)
        assert var_2 == 'date'
        var_3 = module_0.indexes_repr(list_0, dict_0)
        assert var_3 == 'Indexes:\n    *empty*'
        tuple_0 = ()
        var_4 = module_0.inline_sparse_repr(tuple_0)
    except BaseException:
        pass


def test_case_32():
    try:
        float_0 = -151.337302
        bool_0 = False
        int_0 = -1318
        var_0 = module_0.pretty_print(bool_0, int_0)
        assert var_0 == '...'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = 'C\rB%U4}@R#R(EI:r'
        var_1 = module_0.first_n_items(str_0, float_0)
    except BaseException:
        pass


def test_case_33():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = 1240
        bytes_0 = b'\xdf?\x15\xb8\xe2\xb0u\x9bI\xc3&\xed\xcc\xf7\xe4y\x92\xfc'
        tuple_0 = ()
        var_0 = module_0.unindexed_dims_repr(bytes_0, tuple_0, int_0)
        assert var_0 == 'Dimensions without coordinates: 223, 63, 21, 184, 226, 176, 117, 155, 73, 195,\n                                38, 237, 204, 247, 228, 121, 146, 252'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = '{(V|)OZSEia \\;Sz-w`w'
        var_1 = module_0.format_array_flat(str_0, int_0)
    except BaseException:
        pass


def test_case_34():
    try:
        float_0 = -151.337302
        set_0 = {float_0, float_0, float_0}
        float_1 = 408.8314
        int_0 = -2193
        var_0 = module_0.summarize_index(set_0, float_1, int_0)
        assert var_0 == '...408.8314'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        bool_0 = False
        var_1 = module_0.pretty_print(bool_0, int_0)
        assert var_1 == '...'
        str_0 = 'G^'
        bool_1 = False
        list_0 = [float_0, float_0]
        var_2 = module_0.summarize_attr(bool_1, list_0)
        assert var_2 == '    False: [-151.337302, -151.337302]'
        var_3 = module_0.format_item(str_0, float_0)
        assert var_3 == "'G^'"
        var_4 = module_0.short_numpy_repr(bool_1)
        assert var_4 == 'array(False)'
        dict_0 = {str_0: str_0, str_0: var_1}
        var_5 = module_0.nondefault_indexes(dict_0)
        assert var_5 == {'G^': '...'}
        str_1 = 'Z.Ir-Tl{gt8*Hv{\x0b'
        var_6 = module_0.indexes_repr(str_1, bool_0, float_1)
    except BaseException:
        pass


def test_case_35():
    try:
        bytes_0 = None
        var_0 = module_0.format_timedelta(bytes_0)
        assert var_0 == 'NaT'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        float_0 = -149.8140878142223
        str_0 = '*z6bX>\x0b*'
        bool_0 = False
        var_1 = module_0.format_item(str_0, float_0)
        assert var_1 == "'*z6bX>\\x0b*'"
        var_2 = module_0.short_numpy_repr(bool_0)
        assert var_2 == 'array(False)'
        str_1 = 'y;;'
        var_3 = module_0.indexes_repr(str_1, bool_0, float_0)
    except BaseException:
        pass


def test_case_36():
    try:
        float_0 = -151.337302
        set_0 = {float_0, float_0, float_0}
        float_1 = 408.8314
        int_0 = -2205
        var_0 = module_0.summarize_index(set_0, float_1, int_0)
        assert var_0 == '...408.8314'
        assert module_0.annotations.optional == (3, 7, 0, 'beta', 1)
        assert module_0.annotations.mandatory == (3, 11, 0, 'alpha', 0)
        assert module_0.annotations.compiler_flag == 16777216
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        bool_0 = False
        var_1 = module_0.pretty_print(bool_0, int_0)
        assert var_1 == '...'
        int_1 = None
        str_0 = 'G^'
        bool_1 = True
        list_0 = [float_0, float_0]
        var_2 = module_0.summarize_attr(bool_1, list_0)
        assert var_2 == '    True: [-151.337302, -151.337302]'
        var_3 = module_0.format_item(str_0, float_0)
        assert var_3 == "'G^'"
        str_1 = None
        var_4 = module_0.wrap_indent(str_1, int_1, float_0)
    except BaseException:
        pass


def test_case_37():
    try:
        float_0 = 0.5
        var_0 = module_0.format_timestamp(float_0)
        assert var_0 == '1970-01-01'
        assert module_0.EMPTY_REPR == '    *empty*'
        bytes_0 = b'K\x98\x9a\x9fEb\xb6\xd3\xa3\xaa8\xae\xae\xf4\r\x1ag'
        var_1 = module_0.inline_dask_repr(bytes_0)
    except BaseException:
        pass# Automatically generated by Pynguin.


def test_case_38():
    pass


def test_case_39():
    timedelta64_0 = module_0.timedelta64()
    int_0 = 1229
    var_0 = module_1.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '00:00:00'
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_40():
    timedelta64_0 = module_0.timedelta64()
    var_0 = module_1.last_item(timedelta64_0)
    assert var_0 == [0]
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_41():
    tuple_0 = None
    var_0 = module_1.format_timestamp(tuple_0)
    assert var_0 == 'NaT'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_42():
    dict_0 = None
    var_0 = module_1.format_timedelta(dict_0)
    assert var_0 == 'NaT'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_43():
    timedelta64_0 = module_0.timedelta64()
    var_0 = module_1.format_timedelta(timedelta64_0)
    assert var_0 == '0 days 00:00:00'
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_44():
    complex_0 = None
    var_0 = module_1.format_item(complex_0)
    assert var_0 == 'None'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_45():
    bool_0 = False
    var_0 = module_1.indexes_repr(bool_0)
    assert var_0 == 'Indexes:\n    *empty*'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_46():
    str_0 = 'm@$P!y%('
    int_0 = 2293
    dict_0 = {str_0: str_0, int_0: int_0, int_0: str_0, str_0: int_0}
    var_0 = module_1.indexes_repr(dict_0, int_0)
    assert var_0 == "Indexes:\n    m@$P!y%(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         2293\nm@$P!y%('"
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_47():
    dict_0 = {}
    var_0 = module_1.inline_index_repr(dict_0)
    assert var_0 == '{}'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_48():
    dict_0 = {}
    var_0 = module_1.nondefault_indexes(dict_0)
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_49():
    list_0 = []
    var_0 = module_1.short_numpy_repr(list_0)
    assert var_0 == 'array([], dtype=float64)'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_50():
    list_0 = []
    var_0 = module_1.format_items(list_0)
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_51():
    str_0 = 'y7w'
    var_0 = module_1.format_item(str_0, str_0)
    assert var_0 == "'y7w'"
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_52():
    str_0 = ';zMP :~VeyOa]&Q0XO42'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_1.nondefault_indexes(dict_0)
    assert var_0 == {';zMP :~VeyOa]&Q0XO42': ';zMP :~VeyOa]&Q0XO42'}
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_53():
    str_0 = '4M"|4'
    int_0 = -1612
    var_0 = module_1.limit_lines(str_0, limit=int_0)
    assert var_0 == '...'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    float_0 = -571.0
    var_1 = module_1.format_timedelta(float_0)
    assert var_1 == '-1 days +23:59:59.999999429'


def test_case_54():
    int_0 = 3477
    var_0 = module_1.summarize_index(int_0, int_0, int_0, int_0)
    assert var
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    int_1 = module_1.calc_max_rows_last(int_0)
    assert int_1 == 1738
    str_0 = 'time'
    int_2 = 1975
    var_1 = module_1.limit_lines(str_0, limit=int_2)
    assert var_1 == 'time'


def test_case_55():
    str_0 = 'm\x0cR5'
    timedelta64_0 = module_0.timedelta64()
    var_0 = module_1.last_n_items(str_0, timedelta64_0)
    assert var_0 == []
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_56():
    int_0 = 2000
    var_0 = module_1.format_timestamp(int_0)
    assert var_0 == '1970-01-01T00:00:00.000002'
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_57():
    bool_0 = False
    var_0 = module_1.indexes_repr(bool_0)
    assert var_0 == 'Indexes:\n    *empty*'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    bool_1 = False
    var_1 = module_1.inline_index_repr(bool_1)
    assert var_1 == 'False'
    int_0 = 1931
    set_0 = set()
    float_0 = -2610.05
    var_2 = module_1.unindexed_dims_repr(set_0, float_0, int_0)
    assert var_2 is None


def test_case_58():
    list_0 = []
    var_0 = module_1.short_numpy_repr(list_0)
    assert var_0 == 'array([], dtype=float64)'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: var_0}
    var_1 = module_1.unindexed_dims_repr(dict_0, tuple_0)
    assert var_1 == 'Dimensions without coordinates: ()'


def test_case_59():
    float_0 = -151.337302
    int_0 = None
    var_0 = module_1.format_timedelta(int_0)
    assert var_0 == 'NaT'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    str_0 = 'G^'
    float_1 = 223.1375
    list_0 = [float_1, float_1]
    var_1 = module_1.format_item(str_0, float_1)
    assert var_1 == "'G^'"
    str_1 = None
    dict_0 = {str_0: str_0, str_1: float_0}
    var_2 = module_1.nondefault_indexes(dict_0)
    assert len(var_2) == 2
    set_0 = {float_1, var_0}
    var_3 = module_1.unindexed_dims_repr(set_0, list_0)
    assert var_3 == 'Dimensions without coordinates: NaT'


def test_case_60():
    bytes_0 = b'\xf0\xccp\x84\xc5v\xef\xd6R\x13\xb9U\xd2p\xe4'
    str_0 = '_<s$NJzo,Kb'
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = True
    var_0 = module_1.unindexed_dims_repr(bytes_0, list_0, bool_0)
    assert var_0 == 'Dimensions without coordinates: 240, 204, 112, 132, 197, 118, 239, 214, 82, 19,\n                                ...'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    var_1 = module_1.maybe_truncate(bytes_0)
    assert var_1 == "b'\\xf0\\xccp\\x84\\xc5v\\xef\\xd6R\\x13\\xb9U\\xd2p\\xe4'"


def test_case_61():
    timedelta64_0 = None
    int_0 = 594
    str_0 = '*z6bX>\x0b*'
    bytes_0 = None
    bytes_1 = b'p\x16\xa6\xe9O\xe7\xc4e\xe7M\xd3\xdf\x15\xfcU'
    bool_0 = True
    list_0 = [int_0, bool_0, timedelta64_0]
    tuple_0 = (bytes_1, list_0, str_0)
    tuple_1 = (bytes_0, tuple_0)
    var_0 = module_1.format_item(str_0, tuple_1, timedelta64_0)
    assert var_0 == '*z6bX>\x0b*'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    var_1 = module_1.short_numpy_repr(timedelta64_0)
    assert var_1 == 'array(None, dtype=object)'
    list_1 = []
    var_2 = module_1.indexes_repr(list_1)
    assert var_2 == 'Indexes:\n    *empty*'


def test_case_62():
    timedelta64_0 = module_0.timedelta64()
    int_0 = -1200
    var_0 = module_1.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '...'
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_63():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    var_0 = module_1.short_numpy_repr(tuple_2)
    assert var_0 == 'array([], shape=(1, 1, 0), dtype=float64)'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_64():
    int_0 = 2
    int_1 = 3
    int_2 = 4
    timedelta_0 = module_2.timedelta()
    int_3 = 5
    int_4 = 10
    timedelta_1 = module_2.timedelta()
    str_0 = 'date'
    var_0 = module_1.format_timedelta(timedelta_1, str_0)
    assert var_0 == '5 days'
    assert var_0 == '0 days'
    assert module_2.MINYEAR == 1
    assert module_2.MAXYEAR == 9999
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    int_5 = 1
    int_6 = 12
    int_7 = 30
    timedelta_2 = module_2.timedelta()
    str_1 = 'time'
    var_1 = module_1.format_timedelta(timedelta_2, str_1)
    assert var_1 == '12:30:00'
    assert var_1 == '00:00:00'
    int_8 = -1
    timedelta_3 = module_2.timedelta()
    var_2 = module_1.format_timedelta(timedelta_3)
    assert var_2 == '-2 days +19:00:00'
    assert var_2 == '0 days 00:00:00'


def test_case_65():
    datetime64_0 = module_0.datetime64()
    int_0 = -904
    var_0 = module_1.format_array_flat(datetime64_0, int_0)
    assert var_0 == '...'
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_66():
    list_0 = None
    dict_0 = None
    var_0 = module_1.indexes_repr(list_0, dict_0)
    assert var_0 == 'Indexes:\n    *empty*'
    assert module_1.annotations.optional == (3, 7, 0, 'beta', 1)
    assert module_1.annotations.mandatory == (3, 11, 0, 'alpha', 0)
    assert module_1.annotations.compiler_flag == 16777216
    assert module_1.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'display_expand_indexes': 'default', 'display_default_indexes': False, 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False, 'use_bottleneck': True, 'use_flox': True}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    int_0 = 1221
    datetime64_0 = module_0.datetime64()
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    var_1 = module_1.last_n_items(datetime64_0, int_0)
    assert len(var_1) == 1

Coverage: 39.30232558139535
Mutation Score: 0.9899999999999949

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from xarray.core import formatting
from pandas.errors import OutOfBoundsDatetime

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 2) == "te"

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 2) == "te..."
    assert formatting.maybe_truncate("test", 4) == "test"

def test_wrap_indent():
    text = "line1\nline2"
    result = formatting.wrap_indent(text, start=">", length=2)
    assert result == ">line1\n  line2"

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]
    empty_array = np.array([])
    assert formatting.last_item(empty_array) == []

def test_calc_max_rows_first():
    assert formatting.calc_max_rows_first(5) == 3
    assert formatting.calc_max_rows_first(4) == 2

def test_calc_max_rows_last():
    assert formatting.calc_max_rows_last(5) == 2
    assert formatting.calc_max_rows_last(4) == 2

def test_format_timestamp():
    dt = datetime(2020, 1, 1)
    assert formatting.format_timestamp(dt) == "2020-01-01"
    dt_with_time = datetime(2020, 1, 1, 12, 0)
    assert formatting.format_timestamp(dt_with_time) == "2020-01-01T12:00:00"
    with pytest.raises(OutOfBoundsDatetime):
        formatting.format_timestamp(datetime(3000, 1, 1))

def test_format_timedelta():
    td = timedelta(days=1, hours=5)
    assert formatting.format_timedelta(td) == "1 days 05:00:00"
    assert formatting.format_timedelta(td, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(td, timedelta_format="time") == "05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2020-01-01')) == "2020-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item("test") == "'test'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64('2020-01-01'), timedelta(days=1), "test", 3.14159]
    formatted = formatting.format_items(items)
    assert formatted == ["2020-01-01", "1 days 00:00:00", "'test'", "3.142"]

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result == "1 2 3 ... 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.array([])

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3,)>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 5
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=5, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.dtype('float64')
        _data = np.array([1, 2, 3])

    var = MockVariable()
    result = formatting.summarize_variable('var', var, 10)
    assert "var" in result
    assert "float64" in result

def test_summarize_attr():
    result = formatting.summarize_attr('key', 'value')
    assert "key:" in result
    assert "value" in result

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(string, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    result = formatting.short_numpy_repr(array)
    assert "1.123457" in result
    assert "2.987654" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ("x",)
        variable = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result
    assert "x" in result

def test_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "var1" in result
    assert "Dimensions" in result

def test_diff_array_repr():
    a = np.array([1, 2, 3])
    b = np.array([1, 2, 4])
    result = formatting.diff_array_repr(a, b, compat="equals")
    assert "Differing values" in result

def test_diff_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    a = MockDataset()
    b = MockDataset()
    b.data_vars['var1'] = np.array([1, 2, 4])
    result = formatting.diff_dataset_repr(a, b, compat="equals")
    assert "Differing data variables" in result

Coverage: 28.837209302325583
Mutation Score: 16.150000000000006

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from xarray.core import formatting
from pandas.errors import OutOfBoundsDatetime

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 2) == "te"

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 2) == "te..."
    assert formatting.maybe_truncate("test", 4) == "test"

def test_wrap_indent():
    text = "line1\nline2"
    result = formatting.wrap_indent(text, start=">", length=2)
    assert result == ">line1\n  line2"

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]
    empty_array = np.array([])
    assert formatting.last_item(empty_array) == []

def test_calc_max_rows_first():
    assert formatting.calc_max_rows_first(5) == 3
    assert formatting.calc_max_rows_first(4) == 2

def test_calc_max_rows_last():
    assert formatting.calc_max_rows_last(5) == 2
    assert formatting.calc_max_rows_last(4) == 2

def test_format_timestamp():
    dt = datetime(2020, 1, 1)
    assert formatting.format_timestamp(dt) == "2020-01-01"
    dt_with_time = datetime(2020, 1, 1, 12, 0)
    assert formatting.format_timestamp(dt_with_time) == "2020-01-01T12:00:00"
    with pytest.raises(OutOfBoundsDatetime):
        formatting.format_timestamp(datetime(3000, 1, 1))

def test_format_timedelta():
    td = timedelta(days=1, hours=5)
    assert formatting.format_timedelta(td) == "1 days 05:00:00"
    assert formatting.format_timedelta(td, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(td, timedelta_format="time") == "05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2020-01-01')) == "2020-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item("test") == "'test'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64('2020-01-01'), timedelta(days=1), "test", 3.14159]
    formatted = formatting.format_items(items)
    assert formatted == ["2020-01-01", "1 days 00:00:00", "'test'", "3.142"]

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result == "1 2 3 ... 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.array([])

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3,)>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 5
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=5, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.dtype('float64')
        _data = np.array([1, 2, 3])

    var = MockVariable()
    result = formatting.summarize_variable('var', var, 10)
    assert "var" in result
    assert "float64" in result

def test_summarize_attr():
    result = formatting.summarize_attr('key', 'value')
    assert "key:" in result
    assert "value" in result

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(string, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    result = formatting.short_numpy_repr(array)
    assert "1.123457" in result
    assert "2.987654" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ("x",)
        variable = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result
    assert "x" in result

def test_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "var1" in result
    assert "Dimensions" in result

def test_diff_array_repr():
    a = np.array([1, 2, 3])
    b = np.array([1, 2, 4])
    result = formatting.diff_array_repr(a, b, compat="equals")
    assert "Differing values" in result

def test_diff_dataset_repr():
    class MockDataset:
        variables = {'var1': np.array([1, 2, 3])}
        coords = {}
        dims = {'x': 3}
        data_vars = {'var1': np.array([1, 2, 3])}
        attrs = {}

    a = MockDataset()
    b = MockDataset()
    b.data_vars['var1'] = np.array([1, 2, 4])
    result = formatting.diff_dataset_repr(a, b, compat="equals")
    assert "Differing data variables" in result
Coverage: 28.837209302325583
Mutation Score: 16.840000000000003
Output: On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_formatting.py

nothing added to commit but untracked files present (use "git add" to track)
commit d4dbe9e32594cd7a319da13f13dbf24c8c1fe50d
Author: TestGenEval <>
Date:   Wed Dec 11 13:18:07 2024 +0000

    Testing fixes

diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py
index e9aebe2f..1fd8781d 100644
--- a/xarray/core/formatting.py
+++ b/xarray/core/formatting.py
@@ -579,7 +579,7 @@ def short_data_repr(array):
         return short_numpy_repr(array)
     elif is_duck_array(internal_data):
         return limit_lines(repr(array.data), limit=40)
-    elif array._in_memory or array.size < 1e5:
+    elif array._in_memory:
         return short_numpy_repr(array)
     else:
         # internal xarray array type
diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py
deleted file mode 100644
index 39212c79..00000000
--- a/xarray/tests/test_formatting.py
+++ /dev/null
@@ -1,701 +0,0 @@
-from __future__ import annotations
-
-import sys
-from textwrap import dedent
-
-import numpy as np
-import pandas as pd
-import pytest
-from numpy.core import defchararray
-
-import xarray as xr
-from xarray.core import formatting
-
-from . import requires_dask, requires_netCDF4
-
-
-class TestFormatting:
-    def test_get_indexer_at_least_n_items(self) -> None:
-        cases = [
-            ((20,), (slice(10),), (slice(-10, None),)),
-            ((3, 20), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 10), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 5), (slice(2), slice(None)), (slice(-2, None), slice(None))),
-            ((1, 2, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            ((2, 3, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            (
-                (1, 10, 1),
-                (0, slice(10), slice(None)),
-                (-1, slice(-10, None), slice(None)),
-            ),
-            (
-                (2, 5, 1),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-            ((2, 5, 3), (0, slice(4), slice(None)), (-1, slice(-4, None), slice(None))),
-            (
-                (2, 3, 3),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-        ]
-        for shape, start_expected, end_expected in cases:
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=False)
-            assert start_expected == actual
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=True)
-            assert end_expected == actual
-
-    def test_first_n_items(self) -> None:
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.first_n_items(array, n)
-            expected = array.flat[:n]
-            assert (expected == actual).all()
-
-        with pytest.raises(ValueError, match=r"at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_n_items(self) -> None:
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.last_n_items(array, n)
-            expected = array.flat[-n:]
-            assert (expected == actual).all()
-
-        with pytest.raises(ValueError, match=r"at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_item(self) -> None:
-        array = np.arange(100)
-
-        reshape = ((10, 10), (1, 100), (2, 2, 5, 5))
-        expected = np.array([99])
-
-        for r in reshape:
-            result = formatting.last_item(array.reshape(r))
-            assert result == expected
-
-    def test_format_item(self) -> None:
-        cases = [
-            (pd.Timestamp("2000-01-01T12"), "2000-01-01T12:00:00"),
-            (pd.Timestamp("2000-01-01"), "2000-01-01"),
-            (pd.Timestamp("NaT"), "NaT"),
-            (pd.Timedelta("10 days 1 hour"), "10 days 01:00:00"),
-            (pd.Timedelta("-3 days"), "-3 days +00:00:00"),
-            (pd.Timedelta("3 hours"), "0 days 03:00:00"),
-            (pd.Timedelta("NaT"), "NaT"),
-            ("foo", "'foo'"),
-            (b"foo", "b'foo'"),
-            (1, "1"),
-            (1.0, "1.0"),
-            (np.float16(1.1234), "1.123"),
-            (np.float32(1.0111111), "1.011"),
-            (np.float64(22.222222), "22.22"),
-        ]
-        for item, expected in cases:
-            actual = formatting.format_item(item)
-            assert expected == actual
-
-    def test_format_items(self) -> None:
-        cases = [
-            (np.arange(4) * np.timedelta64(1, "D"), "0 days 1 days 2 days 3 days"),
-            (
-                np.arange(4) * np.timedelta64(3, "h"),
-                "00:00:00 03:00:00 06:00:00 09:00:00",
-            ),
-            (
-                np.arange(4) * np.timedelta64(500, "ms"),
-                "00:00:00 00:00:00.500000 00:00:01 00:00:01.500000",
-            ),
-            (pd.to_timedelta(["NaT", "0s", "1s", "NaT"]), "NaT 00:00:00 00:00:01 NaT"),
-            (
-                pd.to_timedelta(["1 day 1 hour", "1 day", "0 hours"]),
-                "1 days 01:00:00 1 days 00:00:00 0 days 00:00:00",
-            ),
-            ([1, 2, 3], "1 2 3"),
-        ]
-        for item, expected in cases:
-            actual = " ".join(formatting.format_items(item))
-            assert expected == actual
-
-    def test_format_array_flat(self) -> None:
-        actual = formatting.format_array_flat(np.arange(100), 2)
-        expected = "..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 9)
-        expected = "0 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 10)
-        expected = "0 1 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 13)
-        expected = "0 1 ... 98 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 15)
-        expected = "0 1 2 ... 98 99"
-        assert expected == actual
-
-        # NB: Probably not ideal; an alternative would be cutting after the
-        # first ellipsis
-        actual = formatting.format_array_flat(np.arange(100.0), 11)
-        expected = "0.0 ... ..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100.0), 12)
-        expected = "0.0 ... 99.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(3), 5)
-        expected = "0 1 2"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4.0), 11)
-        expected = "0.0 ... 3.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(0), 0)
-        expected = ""
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(1), 1)
-        expected = "0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(2), 3)
-        expected = "0 1"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4), 7)
-        expected = "0 1 2 3"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(5), 7)
-        expected = "0 ... 4"
-        assert expected == actual
-
-        long_str = [" ".join(["hello world" for _ in range(100)])]
-        actual = formatting.format_array_flat(np.asarray([long_str]), 21)
-        expected = "'hello world hello..."
-        assert expected == actual
-
-    def test_pretty_print(self) -> None:
-        assert formatting.pretty_print("abcdefghij", 8) == "abcde..."
-        assert formatting.pretty_print("ß", 1) == "ß"
-
-    def test_maybe_truncate(self) -> None:
-        assert formatting.maybe_truncate("ß", 10) == "ß"
-
-    def test_format_timestamp_invalid_pandas_format(self) -> None:
-        expected = "2021-12-06 17:00:00 00"
-        with pytest.raises(ValueError):
-            formatting.format_timestamp(expected)
-
-    def test_format_timestamp_out_of_bounds(self) -> None:
-        from datetime import datetime
-
-        date = datetime(1300, 12, 1)
-        expected = "1300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-        date = datetime(2300, 12, 1)
-        expected = "2300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-    def test_attribute_repr(self) -> None:
-        short = formatting.summarize_attr("key", "Short string")
-        long = formatting.summarize_attr("key", 100 * "Very long string ")
-        newlines = formatting.summarize_attr("key", "\n\n\n")
-        tabs = formatting.summarize_attr("key", "\t\t\t")
-        assert short == "    key: Short string"
-        assert len(long) <= 80
-        assert long.endswith("...")
-        assert "\n" not in newlines
-        assert "\t" not in tabs
-
-    def test_index_repr(self):
-        from xarray.core.indexes import Index
-
-        class CustomIndex(Index):
-            def __init__(self, names):
-                self.names = names
-
-            def __repr__(self):
-                return f"CustomIndex(coords={self.names})"
-
-        coord_names = ["x", "y"]
-        index = CustomIndex(coord_names)
-        name = "x"
-
-        normal = formatting.summarize_index(name, index, col_width=20)
-        assert name in normal
-        assert "CustomIndex" in normal
-
-        CustomIndex._repr_inline_ = (
-            lambda self, max_width: f"CustomIndex[{', '.join(self.names)}]"
-        )
-        inline = formatting.summarize_index(name, index, col_width=20)
-        assert name in inline
-        assert index._repr_inline_(max_width=40) in inline
-
-    def test_diff_array_repr(self) -> None:
-        da_a = xr.DataArray(
-            np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"),
-            dims=("x", "y"),
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        da_b = xr.DataArray(
-            np.array([1, 2], dtype="int64"),
-            dims="x",
-            coords={
-                "x": np.array(["a", "c"], dtype="U1"),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right DataArray objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing values:
-        L
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)
-        R
-            array([1, 2], dtype=int64)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_array_repr(da_a, da_b, "identical")
-        try:
-            assert actual == expected
-        except AssertionError:
-            # depending on platform, dtype may not be shown in numpy array repr
-            assert actual == expected.replace(", dtype=int64", "")
-
-        va = xr.Variable(
-            "x", np.array([1, 2, 3], dtype="int64"), {"title": "test Variable"}
-        )
-        vb = xr.Variable(("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"))
-
-        expected = dedent(
-            """\
-        Left and right Variable objects are not equal
-        Differing dimensions:
-            (x: 3) != (x: 2, y: 3)
-        Differing values:
-        L
-            array([1, 2, 3], dtype=int64)
-        R
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)"""
-        )
-
-        actual = formatting.diff_array_repr(va, vb, "equals")
-        try:
-            assert actual == expected
-        except AssertionError:
-            assert actual == expected.replace(", dtype=int64", "")
-
-    @pytest.mark.filterwarnings("error")
-    def test_diff_attrs_repr_with_array(self) -> None:
-        attrs_a = {"attr": np.array([0, 1])}
-
-        attrs_b = {"attr": 1}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: 1
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-        attrs_c = {"attr": np.array([-3, 5])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [-3  5]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_c, "equals")
-        assert expected == actual
-
-        # should not raise a warning
-        attrs_c = {"attr": np.array([0, 1, 2])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [0 1 2]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_c, "equals")
-        assert expected == actual
-
-    def test_diff_dataset_repr(self) -> None:
-        ds_a = xr.Dataset(
-            data_vars={
-                "var1": (("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64")),
-                "var2": ("x", np.array([3, 4], dtype="int64")),
-            },
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        ds_b = xr.Dataset(
-            data_vars={"var1": ("x", np.array([1, 2], dtype="int64"))},
-            coords={
-                "x": ("x", np.array(["a", "c"], dtype="U1"), {"source": 0}),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right Dataset objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-            source: 0
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing data variables:
-        L   var1     (x, y) int64 1 2 3 4 5 6
-        R   var1     (x) int64 1 2
-        Data variables only on the left object:
-            var2     (x) int64 3 4
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_dataset_repr(ds_a, ds_b, "identical")
-        assert actual == expected
-
-    def test_array_repr(self) -> None:
-        ds = xr.Dataset(coords={"foo": [1, 2, 3], "bar": [1, 2, 3]})
-        ds[(1, 2)] = xr.DataArray([0], dims="test")
-        ds_12 = ds[(1, 2)]
-
-        # Test repr function behaves correctly:
-        actual = formatting.array_repr(ds_12)
-        expected = dedent(
-            """\
-        <xarray.DataArray (1, 2) (test: 1)>
-        array([0])
-        Dimensions without coordinates: test"""
-        )
-
-        assert actual == expected
-
-        # Test repr, str prints returns correctly as well:
-        assert repr(ds_12) == expected
-        assert str(ds_12) == expected
-
-        # f-strings (aka format(...)) by default should use the repr:
-        actual = f"{ds_12}"
-        assert actual == expected
-
-        with xr.set_options(display_expand_data=False):
-            actual = formatting.array_repr(ds[(1, 2)])
-            expected = dedent(
-                """\
-            <xarray.DataArray (1, 2) (test: 1)>
-            0
-            Dimensions without coordinates: test"""
-            )
-
-            assert actual == expected
-
-    def test_array_repr_variable(self) -> None:
-        var = xr.Variable("x", [0, 1])
-
-        formatting.array_repr(var)
-
-        with xr.set_options(display_expand_data=False):
-            formatting.array_repr(var)
-
-    def test_array_repr_recursive(self) -> None:
-        # GH:issue:7111
-
-        # direct recurion
-        var = xr.Variable("x", [0, 1])
-        var.attrs["x"] = var
-        formatting.array_repr(var)
-
-        da = xr.DataArray([0, 1], dims=["x"])
-        da.attrs["x"] = da
-        formatting.array_repr(da)
-
-        # indirect recursion
-        var.attrs["x"] = da
-        da.attrs["x"] = var
-        formatting.array_repr(var)
-        formatting.array_repr(da)
-
-    @requires_dask
-    def test_array_scalar_format(self) -> None:
-        # Test numpy scalars:
-        var = xr.DataArray(np.array(0))
-        assert format(var, "") == repr(var)
-        assert format(var, "d") == "0"
-        assert format(var, ".2f") == "0.00"
-
-        # Test dask scalars, not supported however:
-        import dask.array as da
-
-        var = xr.DataArray(da.array(0))
-        assert format(var, "") == repr(var)
-        with pytest.raises(TypeError) as excinfo:
-            format(var, ".2f")
-        assert "unsupported format string passed to" in str(excinfo.value)
-
-        # Test numpy arrays raises:
-        var = xr.DataArray([0.1, 0.2])
-        with pytest.raises(NotImplementedError) as excinfo:  # type: ignore
-            format(var, ".2f")
-        assert "Using format_spec is only supported" in str(excinfo.value)
-
-
-def test_inline_variable_array_repr_custom_repr() -> None:
-    class CustomArray:
-        def __init__(self, value, attr):
-            self.value = value
-            self.attr = attr
-
-        def _repr_inline_(self, width):
-            formatted = f"({self.attr}) {self.value}"
-            if len(formatted) > width:
-                formatted = f"({self.attr}) ..."
-
-            return formatted
-
-        def __array_function__(self, *args, **kwargs):
-            return NotImplemented
-
-        @property
-        def shape(self) -> tuple[int, ...]:
-            return self.value.shape
-
-        @property
-        def dtype(self):
-            return self.value.dtype
-
-        @property
-        def ndim(self):
-            return self.value.ndim
-
-    value = CustomArray(np.array([20, 40]), "m")
-    variable = xr.Variable("x", value)
-
-    max_width = 10
-    actual = formatting.inline_variable_array_repr(variable, max_width=10)
-
-    assert actual == value._repr_inline_(max_width)
-
-
-def test_set_numpy_options() -> None:
-    original_options = np.get_printoptions()
-    with formatting.set_numpy_options(threshold=10):
-        assert len(repr(np.arange(500))) < 200
-    # original options are restored
-    assert np.get_printoptions() == original_options
-
-
-def test_short_numpy_repr() -> None:
-    cases = [
-        np.random.randn(500),
-        np.random.randn(20, 20),
-        np.random.randn(5, 10, 15),
-        np.random.randn(5, 10, 15, 3),
-        np.random.randn(100, 5, 1),
-    ]
-    # number of lines:
-    # for default numpy repr: 167, 140, 254, 248, 599
-    # for short_numpy_repr: 1, 7, 24, 19, 25
-    for array in cases:
-        num_lines = formatting.short_numpy_repr(array).count("\n") + 1
-        assert num_lines < 30
-
-    # threshold option (default: 200)
-    array2 = np.arange(100)
-    assert "..." not in formatting.short_numpy_repr(array2)
-    with xr.set_options(display_values_threshold=10):
-        assert "..." in formatting.short_numpy_repr(array2)
-
-
-def test_large_array_repr_length() -> None:
-
-    da = xr.DataArray(np.random.randn(100, 5, 1))
-
-    result = repr(da).splitlines()
-    assert len(result) < 50
-
-
-@requires_netCDF4
-def test_repr_file_collapsed(tmp_path) -> None:
-    arr = xr.DataArray(np.arange(300), dims="test")
-    arr.to_netcdf(tmp_path / "test.nc", engine="netcdf4")
-
-    with xr.open_dataarray(tmp_path / "test.nc") as arr, xr.set_options(
-        display_expand_data=False
-    ):
-        actual = formatting.array_repr(arr)
-        expected = dedent(
-            """\
-        <xarray.DataArray (test: 300)>
-        array([  0,   1,   2, ..., 297, 298, 299])
-        Dimensions without coordinates: test"""
-        )
-
-        assert actual == expected
-
-
-@pytest.mark.parametrize(
-    "display_max_rows, n_vars, n_attr",
-    [(50, 40, 30), (35, 40, 30), (11, 40, 30), (1, 40, 30)],
-)
-def test__mapping_repr(display_max_rows, n_vars, n_attr) -> None:
-    long_name = "long_name"
-    a = defchararray.add(long_name, np.arange(0, n_vars).astype(str))
-    b = defchararray.add("attr_", np.arange(0, n_attr).astype(str))
-    c = defchararray.add("coord", np.arange(0, n_vars).astype(str))
-    attrs = {k: 2 for k in b}
-    coords = {_c: np.array([0, 1]) for _c in c}
-    data_vars = dict()
-    for (v, _c) in zip(a, coords.items()):
-        data_vars[v] = xr.DataArray(
-            name=v,
-            data=np.array([3, 4]),
-            dims=[_c[0]],
-            coords=dict([_c]),
-        )
-    ds = xr.Dataset(data_vars)
-    ds.attrs = attrs
-
-    with xr.set_options(display_max_rows=display_max_rows):
-
-        # Parse the data_vars print and show only data_vars rows:
-        summary = formatting.dataset_repr(ds).split("\n")
-        summary = [v for v in summary if long_name in v]
-        # The length should be less than or equal to display_max_rows:
-        len_summary = len(summary)
-        data_vars_print_size = min(display_max_rows, len_summary)
-        assert len_summary == data_vars_print_size
-
-        summary = formatting.data_vars_repr(ds.data_vars).split("\n")
-        summary = [v for v in summary if long_name in v]
-        # The length should be equal to the number of data variables
-        len_summary = len(summary)
-        assert len_summary == n_vars
-
-        summary = formatting.coords_repr(ds.coords).split("\n")
-        summary = [v for v in summary if "coord" in v]
-        # The length should be equal to the number of data variables
-        len_summary = len(summary)
-        assert len_summary == n_vars
-
-    with xr.set_options(
-        display_max_rows=display_max_rows,
-        display_expand_coords=False,
-        display_expand_data_vars=False,
-        display_expand_attrs=False,
-    ):
-        actual = formatting.dataset_repr(ds)
-        col_width = formatting._calculate_col_width(ds.variables)
-        dims_start = formatting.pretty_print("Dimensions:", col_width)
-        dims_values = formatting.dim_summary_limited(
-            ds, col_width=col_width + 1, max_rows=display_max_rows
-        )
-        expected = f"""\
-<xarray.Dataset>
-{dims_start}({dims_values})
-Coordinates: ({n_vars})
-Data variables: ({n_vars})
-Attributes: ({n_attr})"""
-        expected = dedent(expected)
-        assert actual == expected
-
-
-def test__mapping_repr_recursive() -> None:
-    # GH:issue:7111
-
-    # direct recursion
-    ds = xr.Dataset({"a": ("x", [1, 2, 3])})
-    ds.attrs["ds"] = ds
-    formatting.dataset_repr(ds)
-
-    # indirect recursion
-    ds2 = xr.Dataset({"b": ("y", [1, 2, 3])})
-    ds.attrs["ds"] = ds2
-    ds2.attrs["ds"] = ds
-    formatting.dataset_repr(ds2)
-
-
-def test__element_formatter(n_elements: int = 100) -> None:
-    expected = """\
-    Dimensions without coordinates: dim_0: 3, dim_1: 3, dim_2: 3, dim_3: 3,
-                                    dim_4: 3, dim_5: 3, dim_6: 3, dim_7: 3,
-                                    dim_8: 3, dim_9: 3, dim_10: 3, dim_11: 3,
-                                    dim_12: 3, dim_13: 3, dim_14: 3, dim_15: 3,
-                                    dim_16: 3, dim_17: 3, dim_18: 3, dim_19: 3,
-                                    dim_20: 3, dim_21: 3, dim_22: 3, dim_23: 3,
-                                    ...
-                                    dim_76: 3, dim_77: 3, dim_78: 3, dim_79: 3,
-                                    dim_80: 3, dim_81: 3, dim_82: 3, dim_83: 3,
-                                    dim_84: 3, dim_85: 3, dim_86: 3, dim_87: 3,
-                                    dim_88: 3, dim_89: 3, dim_90: 3, dim_91: 3,
-                                    dim_92: 3, dim_93: 3, dim_94: 3, dim_95: 3,
-                                    dim_96: 3, dim_97: 3, dim_98: 3, dim_99: 3"""
-    expected = dedent(expected)
-
-    intro = "Dimensions without coordinates: "
-    elements = [
-        f"{k}: {v}" for k, v in {f"dim_{k}": 3 for k in np.arange(n_elements)}.items()
-    ]
-    values = xr.core.formatting._element_formatter(
-        elements, col_width=len(intro), max_rows=12
-    )
-    actual = intro + values
-    assert expected == actual
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.20 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.10.1.dev20+gd4dbe9e3) (1.23.0)
Requirement already satisfied: pandas>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.10.1.dev20+gd4dbe9e3) (1.5.3)
Requirement already satisfied: packaging>=21.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.10.1.dev20+gd4dbe9e3) (23.1)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.3->xarray==2022.10.1.dev20+gd4dbe9e3) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.3->xarray==2022.10.1.dev20+gd4dbe9e3) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=1.3->xarray==2022.10.1.dev20+gd4dbe9e3) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-2022.10.1.dev20+gd4dbe9e3-0.editable-py3-none-any.whl size=8998 sha256=dc1499a8c1f5d3a420ea131c1db31780f91b70e9486c4fcea8d0a691be25be5d
  Stored in directory: /tmp/pip-ephem-wheel-cache-ah9lxxan/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 2022.10.1.dev20+gd4dbe9e3
    Uninstalling xarray-2022.10.1.dev20+gd4dbe9e3:
      Successfully uninstalled xarray-2022.10.1.dev20+gd4dbe9e3
Successfully installed xarray-2022.10.1.dev20+gd4dbe9e3
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, timeout-2.3.1, xdist-3.6.1
collected 9 items

xarray/tests/test_formatting.py .........                                [100%]

=============================== warnings summary ===============================
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pydap/lib.py:5
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pydap/lib.py:5: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    from pkg_resources import get_distribution

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_formatting.py::test_wrap_indent
PASSED xarray/tests/test_formatting.py::test_first_n_items
PASSED xarray/tests/test_formatting.py::test_last_n_items
PASSED xarray/tests/test_formatting.py::test_last_item
PASSED xarray/tests/test_formatting.py::test_calc_max_rows_first
PASSED xarray/tests/test_formatting.py::test_calc_max_rows_last
PASSED xarray/tests/test_formatting.py::test_format_timedelta
PASSED xarray/tests/test_formatting.py::test_summarize_attr
PASSED xarray/tests/test_formatting.py::test_short_numpy_repr
======================== 9 passed, 8 warnings in 0.21s =========================

