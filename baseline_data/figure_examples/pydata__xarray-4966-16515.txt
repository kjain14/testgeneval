Instance ID: pydata__xarray-4966-16515

Baseline 1 (Pynguin):
Predicted Test Suite: # Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import xarray.coding.variables as module_0
import dask.array.routines as module_1
import llvmlite.binding.targets as module_2
import pandas.core.indexing as module_3
import platform as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    list_0 = []
    none_type_0 = None
    module_0._ElementwiseFunctionArray(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.lazy_elemwise_func(none_type_0, none_type_0, none_type_0)


def test_case_2():
    serialization_warning_0 = module_0.SerializationWarning()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.unpack_for_encoding(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
    none_type_1 = None
    unsigned_integer_coder_0.decode(none_type_1, none_type_0)


def test_case_5():
    variable_coder_0 = module_0.VariableCoder()
    with pytest.raises(NotImplementedError):
        variable_coder_0.encode(variable_coder_0, variable_coder_0)


def test_case_6():
    variable_coder_0 = module_0.VariableCoder()
    with pytest.raises(NotImplementedError):
        variable_coder_0.decode(variable_coder_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    var_0 = module_1.cov(list_0, list_0)
    module_0.lazy_elemwise_func(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_2.get_host_cpu_features()
    var_1 = module_3.convert_from_missing_indexer_tuple(var_0, var_0)
    module_0.safe_setitem(var_1, var_0, var_1)


def test_case_9():
    var_0 = module_4.processor()
    var_1 = module_3.convert_from_missing_indexer_tuple(var_0, var_0)
    with pytest.raises(ValueError):
        module_0.safe_setitem(var_0, var_0, var_1)

Coverage: 30.92105263157895
Mutation Score: 1.0900000000000034

Baseline 2 (CodaMosa):
Predicted Test Suite: import xarray.coding.variables as module_0

def test_case_1():
    try:
        float_0 = None
        list_0 = []
        var_0 = module_0.lazy_elemwise_func(float_0, list_0, list_0)
    except BaseException:
        pass


def test_case_2():
    try:
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        tuple_0 = ()
        var_0 = unsigned_integer_coder_0.encode(tuple_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bytes_0 = b'\xb9\x8e2\xb9\xd97\x19)\xbe\xe7\xa4$}'
        var_0 = module_0.unpack_for_decoding(bytes_0)
    except BaseException:
        pass


def test_case_4():
    try:
        list_0 = []
        int_0 = 80
        var_0 = module_0.safe_setitem(list_0, int_0, int_0)
    except BaseException:
        pass


def test_case_5():
    try:
        c_f_mask_coder_0 = module_0.CFMaskCoder()
        bool_0 = True
        list_0 = [c_f_mask_coder_0, c_f_mask_coder_0, bool_0]
        var_0 = c_f_mask_coder_0.decode(list_0)
    except BaseException:
        pass


def test_case_6():
    try:
        str_0 = '\n        Convert this dataset to a dictionary following xarray naming\n        conventions.\n\n        Converts all variables and attributes to native Python objects\n        Useful for converting to json. To avoid datetime incompatibility\n        use decode_times=False kwarg in xarrray.open_dataset.\n\n        Parameters\n        ----------\n        data : bool, optional\n            Whether to include the actual data in the dictionary. When set to\n            False, returns just the schema.\n\n        See Also\n        --------\n        Dataset.from_dict\n        '
        c_f_scale_offset_coder_0 = module_0.CFScaleOffsetCoder()
        var_0 = c_f_scale_offset_coder_0.decode(str_0)
    except BaseException:
        pass


def test_case_7():
    try:
        variable_0 = None
        variable_coder_0 = module_0.VariableCoder()
        list_0 = []
        variable_coder_1 = module_0.VariableCoder()
        variable_1 = variable_coder_1.encode(variable_0, list_0)
    except BaseException:
        pass


def test_case_8():
    try:
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        variable_coder_0 = module_0.VariableCoder()
        var_0 = unsigned_integer_coder_0.decode(variable_coder_0)
    except BaseException:
        pass


def test_case_9():
    try:
        variable_coder_0 = module_0.VariableCoder()
        c_f_scale_offset_coder_0 = None
        c_f_scale_offset_coder_1 = module_0.CFScaleOffsetCoder()
        var_0 = c_f_scale_offset_coder_1.encode(c_f_scale_offset_coder_0)
    except BaseException:
        pass


def test_case_10():
    try:
        int_0 = 40
        c_f_scale_offset_coder_0 = module_0.CFScaleOffsetCoder()
        c_f_scale_offset_coder_1 = module_0.CFScaleOffsetCoder()
        dict_0 = {}
        list_0 = []
        c_f_mask_coder_0 = module_0.CFMaskCoder(*list_0)
        var_0 = c_f_mask_coder_0.encode(int_0, dict_0)
    except BaseException:
        pass


def test_case_11():
    try:
        str_0 = 'All the parameters in '
        str_1 = '[$:55=HfR^KffjUPn9]F'
        str_2 = '$x\x0bz~UK}5Dp'
        dict_0 = {str_0: str_2}
        dict_1 = {str_1: str_1, str_0: str_0, str_1: str_1, str_2: dict_0}
        str_3 = '<lQ|Y|dr? pA};4IL]#'
        list_0 = [str_0, str_2, str_1]
        var_0 = module_0.safe_setitem(dict_1, str_3, list_0)
        assert var_0 is None
        unsigned_integer_coder_0 = module_0.UnsignedIntegerCoder()
        assert unsigned_integer_coder_0 is not None
        variable_0 = None
        int_0 = -1404
        variable_coder_0 = module_0.VariableCoder()
        assert variable_coder_0 is not None
        variable_1 = variable_coder_0.decode(variable_0, int_0)
    except BaseException:
        pass


def test_case_12():
    try:
        str_0 = 'x'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.safe_setitem(list_0, str_0, list_0)
    except BaseException:
        pass# Automatically generated by Pynguin.


def test_case_13():
    pass


def test_case_14():
    str_0 = 'key1'
    str_1 = 'key2'
    str_2 = 'value2'
    var_0 = {str_0: str_2, str_1: str_2}
    var_1 = module_0.pop_to(var_0, var_0, str_0)
    assert var_1 == 'value2'


def test_case_15():
    str_0 = 'key1'
    str_1 = 'key2'
    str_2 = 'value2'
    var_0 = {}
    str_3 = {str_1: str_2}
    var_1 = {}
    var_2 = module_0.pop_to(str_3, var_1, str_0)
    var_3 = {str_0: var_0, str_1: str_2}
    var_4 = module_0.pop_to(var_3, var_0, str_0)
    assert var_2 is None
    assert len(var_4) == 1

Coverage: 35.526315789473685
Mutation Score: 1.6400000000000006

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from xarray import Variable
from xarray.coding import variables
from xarray.core import dtypes

def test_serialization_warning():
    with pytest.warns(variables.SerializationWarning):
        warnings.warn("This is a test warning", variables.SerializationWarning)

def test_variable_coder_encode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.encode(Variable(["x"], [1, 2, 3]))

def test_variable_coder_decode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.decode(Variable(["x"], [1, 2, 3]))

def test_elementwise_function_array():
    array = np.array([1, 2, 3])
    func = lambda x: x * 2
    dtype = np.int64
    elemwise_array = variables._ElementwiseFunctionArray(array, func, dtype)

    assert elemwise_array.dtype == np.dtype(dtype)
    assert np.array_equal(elemwise_array[:], np.array([2, 4, 6]))

def test_lazy_elemwise_func_with_numpy_array():
    array = np.array([1, 2, 3])
    func = lambda x: x * 2
    dtype = np.int64
    result = variables.lazy_elemwise_func(array, func, dtype)
    assert np.array_equal(result, np.array([2, 4, 6]))

def test_lazy_elemwise_func_with_dask_array():
    da = pytest.importorskip("dask.array")
    array = da.from_array(np.array([1, 2, 3]), chunks=(2,))
    func = lambda x: x * 2
    dtype = np.int64
    result = variables.lazy_elemwise_func(array, func, dtype)
    assert np.array_equal(result.compute(), np.array([2, 4, 6]))

def test_unpack_for_encoding():
    var = Variable(["x"], [1, 2, 3], attrs={"attr": "value"}, encoding={"enc": "value"})
    dims, data, attrs, encoding = variables.unpack_for_encoding(var)
    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"enc": "value"}

def test_unpack_for_decoding():
    var = Variable(["x"], [1, 2, 3], attrs={"attr": "value"}, encoding={"enc": "value"})
    dims, data, attrs, encoding = variables.unpack_for_decoding(var)
    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"enc": "value"}

def test_safe_setitem():
    dest = {}
    variables.safe_setitem(dest, "key", "value")
    assert dest["key"] == "value"

    with pytest.raises(ValueError):
        variables.safe_setitem(dest, "key", "new_value")

def test_pop_to():
    source = {"key": "value"}
    dest = {}
    result = variables.pop_to(source, dest, "key")
    assert result == "value"
    assert dest["key"] == "value"
    assert "key" not in source

def test_apply_mask():
    data = np.array([1, 2, 3, 4])
    encoded_fill_values = [2, 3]
    decoded_fill_value = -1
    dtype = np.int64
    result = variables._apply_mask(data, encoded_fill_values, decoded_fill_value, dtype)
    assert np.array_equal(result, np.array([1, -1, -1, 4]))

def test_cfmaskcoder_encode():
    coder = variables.CFMaskCoder()
    var = Variable(["x"], [1, 2, 3], encoding={"_FillValue": 2})
    encoded_var = coder.encode(var)
    assert np.array_equal(encoded_var.data, [1, 2, 3])

def test_cfmaskcoder_decode():
    coder = variables.CFMaskCoder()
    var = Variable(["x"], [1, 2, 3], attrs={"_FillValue": 2})
    decoded_var = coder.decode(var)
    assert np.array_equal(decoded_var.data, [1, np.nan, 3])

def test_cfscaleoffsetcoder_encode():
    coder = variables.CFScaleOffsetCoder()
    var = Variable(["x"], [10, 20, 30], encoding={"scale_factor": 2, "add_offset": 5})
    encoded_var = coder.encode(var)
    assert np.allclose(encoded_var.data, [2.5, 7.5, 12.5])

def test_cfscaleoffsetcoder_decode():
    coder = variables.CFScaleOffsetCoder()
    var = Variable(["x"], [2.5, 7.5, 12.5], attrs={"scale_factor": 2, "add_offset": 5})
    decoded_var = coder.decode(var)
    assert np.allclose(decoded_var.data, [10, 20, 30])

def test_unsignedintegercoder_encode():
    coder = variables.UnsignedIntegerCoder()
    var = Variable(["x"], [1, 2, 3], encoding={"_Unsigned": "true"})
    encoded_var = coder.encode(var)
    assert np.array_equal(encoded_var.data, [1, 2, 3])

def test_unsignedintegercoder_decode():
    coder = variables.UnsignedIntegerCoder()
    var = Variable(["x"], [1, 2, 3], attrs={"_Unsigned": "true"})
    decoded_var = coder.decode(var)
    assert np.array_equal(decoded_var.data, [1, 2, 3])

Coverage: 76.3157894736842
Mutation Score: 27.870000000000005

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
import warnings
from xarray import Variable
from xarray.coding import variables
from xarray.core import dtypes

def test_serialization_warning():
    with pytest.warns(variables.SerializationWarning):
        warnings.warn("This is a test warning", variables.SerializationWarning)

def test_variable_coder_encode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.encode(Variable(["x"], [1, 2, 3]))

def test_variable_coder_decode_not_implemented():
    coder = variables.VariableCoder()
    with pytest.raises(NotImplementedError):
        coder.decode(Variable(["x"], [1, 2, 3]))

def test_elementwise_function_array():
    array = np.array([1, 2, 3])
    func = lambda x: x * 2
    dtype = np.int64
    elemwise_array = variables._ElementwiseFunctionArray(array, func, dtype)

    assert elemwise_array.dtype == np.dtype(dtype)
    assert np.array_equal(np.array(elemwise_array), np.array([2, 4, 6]))

def test_lazy_elemwise_func_with_numpy_array():
    array = np.array([1, 2, 3])
    func = lambda x: x * 2
    dtype = np.int64
    result = variables.lazy_elemwise_func(array, func, dtype)
    assert np.array_equal(np.array(result), np.array([2, 4, 6]))

def test_lazy_elemwise_func_with_dask_array():
    da = pytest.importorskip("dask.array")
    array = da.from_array(np.array([1, 2, 3]), chunks=(2,))
    func = lambda x: x * 2
    dtype = np.int64
    result = variables.lazy_elemwise_func(array, func, dtype)
    assert np.array_equal(result.compute(), np.array([2, 4, 6]))

def test_unpack_for_encoding():
    var = Variable(["x"], [1, 2, 3], attrs={"attr": "value"}, encoding={"enc": "value"})
    dims, data, attrs, encoding = variables.unpack_for_encoding(var)
    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"enc": "value"}

def test_unpack_for_decoding():
    var = Variable(["x"], [1, 2, 3], attrs={"attr": "value"}, encoding={"enc": "value"})
    dims, data, attrs, encoding = variables.unpack_for_decoding(var)
    assert dims == ("x",)
    assert np.array_equal(data, [1, 2, 3])
    assert attrs == {"attr": "value"}
    assert encoding == {"enc": "value"}

def test_safe_setitem():
    dest = {}
    variables.safe_setitem(dest, "key", "value")
    assert dest["key"] == "value"

    with pytest.raises(ValueError):
        variables.safe_setitem(dest, "key", "new_value")

def test_pop_to():
    source = {"key": "value"}
    dest = {}
    result = variables.pop_to(source, dest, "key")
    assert result == "value"
    assert dest["key"] == "value"
    assert "key" not in source

def test_apply_mask():
    data = np.array([1, 2, 3, 4])
    encoded_fill_values = [2, 3]
    decoded_fill_value = -1
    dtype = np.int64
    result = variables._apply_mask(data, encoded_fill_values, decoded_fill_value, dtype)
    assert np.array_equal(result, np.array([1, -1, -1, 4]))

def test_cfmaskcoder_encode():
    coder = variables.CFMaskCoder()
    var = Variable(["x"], [1, 2, 3], encoding={"_FillValue": 2})
    encoded_var = coder.encode(var)
    assert np.array_equal(encoded_var.data, [1, 2, 3])

def test_cfmaskcoder_decode():
    coder = variables.CFMaskCoder()
    var = Variable(["x"], [1, 2, 3], attrs={"_FillValue": 2})
    decoded_var = coder.decode(var)
    assert np.array_equal(decoded_var.data, np.array([1, np.nan, 3], dtype=np.float64), equal_nan=True)

def test_cfscaleoffsetcoder_encode():
    coder = variables.CFScaleOffsetCoder()
    var = Variable(["x"], [10, 20, 30], encoding={"scale_factor": 2, "add_offset": 5})
    encoded_var = coder.encode(var)
    assert np.allclose(encoded_var.data, [2.5, 7.5, 12.5])

def test_cfscaleoffsetcoder_decode():
    coder = variables.CFScaleOffsetCoder()
    var = Variable(["x"], [2.5, 7.5, 12.5], attrs={"scale_factor": 2, "add_offset": 5})
    decoded_var = coder.decode(var)
    assert np.allclose(decoded_var.data, [10, 20, 30])

def test_unsignedintegercoder_encode():
    coder = variables.UnsignedIntegerCoder()
    var = Variable(["x"], [1, 2, 3], encoding={"_Unsigned": "true"})
    encoded_var = coder.encode(var)
    assert np.array_equal(encoded_var.data, [1, 2, 3])

def test_unsignedintegercoder_decode():
    coder = variables.UnsignedIntegerCoder()
    var = Variable(["x"], [1, 2, 3], attrs={"_Unsigned": "true"})
    decoded_var = coder.decode(var)
    assert np.array_equal(decoded_var.data, [1, 2, 3])
Coverage: 82.89473684210526
Mutation Score: 29.510000000000005
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_coding.py

no changes added to commit (use "git add" and/or "git commit -a")
commit f20e5884b3382b63e5ce6c2bfcb0f4323d147ed6
Author: TestGenEval <>
Date:   Wed Dec 11 12:30:05 2024 +0000

    Testing fixes

diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff82..938752c4 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -316,6 +316,14 @@ class UnsignedIntegerCoder(VariableCoder):
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "u":
+                if unsigned == "false":
+                    signed_dtype = np.dtype("i%s" % data.dtype.itemsize)
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
                 warnings.warn(
                     "variable %r has _Unsigned attribute but is not "
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
deleted file mode 100644
index e0df7782..00000000
--- a/xarray/tests/test_coding.py
+++ /dev/null
@@ -1,119 +0,0 @@
-from contextlib import suppress
-
-import numpy as np
-import pandas as pd
-import pytest
-
-import xarray as xr
-from xarray.coding import variables
-from xarray.conventions import decode_cf_variable, encode_cf_variable
-
-from . import assert_allclose, assert_equal, assert_identical, requires_dask
-
-with suppress(ImportError):
-    import dask.array as da
-
-
-def test_CFMaskCoder_decode():
-    original = xr.Variable(("x",), [0, -1, 1], {"_FillValue": -1})
-    expected = xr.Variable(("x",), [0, np.nan, 1])
-    coder = variables.CFMaskCoder()
-    encoded = coder.decode(original)
-    assert_identical(expected, encoded)
-
-
-encoding_with_dtype = {
-    "dtype": np.dtype("float64"),
-    "_FillValue": np.float32(1e20),
-    "missing_value": np.float64(1e20),
-}
-encoding_without_dtype = {
-    "_FillValue": np.float32(1e20),
-    "missing_value": np.float64(1e20),
-}
-CFMASKCODER_ENCODE_DTYPE_CONFLICT_TESTS = {
-    "numeric-with-dtype": ([0.0, -1.0, 1.0], encoding_with_dtype),
-    "numeric-without-dtype": ([0.0, -1.0, 1.0], encoding_without_dtype),
-    "times-with-dtype": (pd.date_range("2000", periods=3), encoding_with_dtype),
-}
-
-
-@pytest.mark.parametrize(
-    ("data", "encoding"),
-    CFMASKCODER_ENCODE_DTYPE_CONFLICT_TESTS.values(),
-    ids=list(CFMASKCODER_ENCODE_DTYPE_CONFLICT_TESTS.keys()),
-)
-def test_CFMaskCoder_encode_missing_fill_values_conflict(data, encoding):
-    original = xr.Variable(("x",), data, encoding=encoding)
-    encoded = encode_cf_variable(original)
-
-    assert encoded.dtype == encoded.attrs["missing_value"].dtype
-    assert encoded.dtype == encoded.attrs["_FillValue"].dtype
-
-    with pytest.warns(variables.SerializationWarning):
-        roundtripped = decode_cf_variable("foo", encoded)
-        assert_identical(roundtripped, original)
-
-
-def test_CFMaskCoder_missing_value():
-    expected = xr.DataArray(
-        np.array([[26915, 27755, -9999, 27705], [25595, -9999, 28315, -9999]]),
-        dims=["npts", "ntimes"],
-        name="tmpk",
-    )
-    expected.attrs["missing_value"] = -9999
-
-    decoded = xr.decode_cf(expected.to_dataset())
-    encoded, _ = xr.conventions.cf_encoder(decoded, decoded.attrs)
-
-    assert_equal(encoded["tmpk"], expected.variable)
-
-    decoded.tmpk.encoding["_FillValue"] = -9940
-    with pytest.raises(ValueError):
-        encoded, _ = xr.conventions.cf_encoder(decoded, decoded.attrs)
-
-
-@requires_dask
-def test_CFMaskCoder_decode_dask():
-    original = xr.Variable(("x",), [0, -1, 1], {"_FillValue": -1}).chunk()
-    expected = xr.Variable(("x",), [0, np.nan, 1])
-    coder = variables.CFMaskCoder()
-    encoded = coder.decode(original)
-    assert isinstance(encoded.data, da.Array)
-    assert_identical(expected, encoded)
-
-
-# TODO(shoyer): port other fill-value tests
-
-
-# TODO(shoyer): parameterize when we have more coders
-def test_coder_roundtrip():
-    original = xr.Variable(("x",), [0.0, np.nan, 1.0])
-    coder = variables.CFMaskCoder()
-    roundtripped = coder.decode(coder.encode(original))
-    assert_identical(original, roundtripped)
-
-
-@pytest.mark.parametrize("dtype", "u1 u2 i1 i2 f2 f4".split())
-def test_scaling_converts_to_float32(dtype):
-    original = xr.Variable(
-        ("x",), np.arange(10, dtype=dtype), encoding=dict(scale_factor=10)
-    )
-    coder = variables.CFScaleOffsetCoder()
-    encoded = coder.encode(original)
-    assert encoded.dtype == np.float32
-    roundtripped = coder.decode(encoded)
-    assert_identical(original, roundtripped)
-    assert roundtripped.dtype == np.float32
-
-
-@pytest.mark.parametrize("scale_factor", (10, [10]))
-@pytest.mark.parametrize("add_offset", (0.1, [0.1]))
-def test_scaling_offset_as_list(scale_factor, add_offset):
-    # test for #4631
-    encoding = dict(scale_factor=scale_factor, add_offset=add_offset)
-    original = xr.Variable(("x",), np.arange(10.0), encoding=encoding)
-    coder = variables.CFScaleOffsetCoder()
-    encoded = coder.encode(original)
-    roundtripped = coder.decode(encoded)
-    assert_allclose(original, roundtripped)
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.15 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.17.1.dev6+gf20e5884.d20250207) (1.23.0)
Requirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.17.1.dev6+gf20e5884.d20250207) (1.5.3)
Requirement already satisfied: setuptools>=40.4 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.17.1.dev6+gf20e5884.d20250207) (68.0.0)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.17.1.dev6+gf20e5884.d20250207) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.17.1.dev6+gf20e5884.d20250207) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.25->xarray==0.17.1.dev6+gf20e5884.d20250207) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-0.17.1.dev6+gf20e5884.d20250207-0.editable-py3-none-any.whl size=9055 sha256=2e9d02f694c2f12f565a397b78052d59cd1681f7b561460cd7536990b2293d1f
  Stored in directory: /tmp/pip-ephem-wheel-cache-ueqt1aky/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.17.1.dev6+gf20e5884
    Uninstalling xarray-0.17.1.dev6+gf20e5884:
      Successfully uninstalled xarray-0.17.1.dev6+gf20e5884
Successfully installed xarray-0.17.1.dev6+gf20e5884.d20250207
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 15 items

xarray/tests/test_coding.py ...............                              [100%]

=============================== warnings summary ===============================
xarray/__init__.py:1
  /testbed/xarray/__init__.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

xarray/core/dask_array_compat.py:61
xarray/core/dask_array_compat.py:61
  /testbed/xarray/core/dask_array_compat.py:61: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2.9.0"):

xarray/core/pdcompat.py:45
  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < "0.25.0":

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
xarray/tests/__init__.py:59
  /testbed/xarray/tests/__init__.py:59: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    return version.LooseVersion(vstring)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_coding.py::test_serialization_warning
PASSED xarray/tests/test_coding.py::test_variable_coder_encode_not_implemented
PASSED xarray/tests/test_coding.py::test_variable_coder_decode_not_implemented
PASSED xarray/tests/test_coding.py::test_lazy_elemwise_func_with_dask_array
PASSED xarray/tests/test_coding.py::test_unpack_for_encoding
PASSED xarray/tests/test_coding.py::test_unpack_for_decoding
PASSED xarray/tests/test_coding.py::test_safe_setitem
PASSED xarray/tests/test_coding.py::test_pop_to
PASSED xarray/tests/test_coding.py::test_apply_mask
PASSED xarray/tests/test_coding.py::test_cfmaskcoder_encode
PASSED xarray/tests/test_coding.py::test_cfmaskcoder_decode
PASSED xarray/tests/test_coding.py::test_cfscaleoffsetcoder_encode
PASSED xarray/tests/test_coding.py::test_cfscaleoffsetcoder_decode
PASSED xarray/tests/test_coding.py::test_unsignedintegercoder_encode
PASSED xarray/tests/test_coding.py::test_unsignedintegercoder_decode
======================= 15 passed, 18 warnings in 3.63s ========================

