Instance ID: pydata__xarray-4248-16486

Baseline 1 (Pynguin):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: import datetime as module_2
import numpy as module_0
import numpy as module_1
import pytest
import xarray.core.formatting as module_0
import xarray.core.formatting as module_1

def test_case_1():
    try:
        list_0 = []
        int_0 = -791
        var_0 = module_0.summarize_variable(list_0, int_0, int_0)
    except BaseException:
        pass


def test_case_2():
    try:
        dict_0 = {}
        float_0 = -2805.16337
        str_0 = 'X'
        var_0 = module_0.wrap_indent(str_0)
        assert var_0 == 'X'
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.first_n_items(dict_0, float_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bytes_0 = b'\x89I\x19\x8d\x8b\xbf\xd1\x17'
        var_0 = module_0.format_timestamp(bytes_0)
    except BaseException:
        pass


def test_case_4():
    try:
        dict_0 = {}
        var_0 = module_0.format_items(dict_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bool_0 = True
        var_0 = module_0.inline_sparse_repr(bool_0)
    except BaseException:
        pass


def test_case_6():
    try:
        int_0 = 394
        str_0 = 'i\t2B.3{]G\r\n1N7'
        var_0 = module_0.inline_variable_array_repr(int_0, str_0)
    except BaseException:
        pass


def test_case_7():
    try:
        int_0 = 44
        bool_0 = False
        str_0 = 'tS\\-QwF):hd|oB+[r'
        dict_0 = {str_0: bool_0}
        float_0 = 843.45448
        list_0 = [float_0, int_0]
        var_0 = module_0.summarize_datavar(dict_0, float_0, list_0)
    except BaseException:
        pass


def test_case_8():
    try:
        str_0 = 'CvhAYdYPJp2('
        dict_0 = {str_0: str_0}
        var_0 = module_0.coords_repr(dict_0)
    except BaseException:
        pass


def test_case_9():
    try:
        bool_0 = True
        var_0 = module_0.format_item(bool_0)
        assert var_0 == 'True'
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = "qEz'~w;uMn\r6UYZ2ZOm"
        var_1 = module_0.summarize_attr(str_0, str_0)
        assert var_1 == "    qEz'~w;uMn\r6UYZ2ZOm: qEz'~w;uMn\r6UYZ2ZOm"
        str_1 = 'Y03\tkoi]'
        var_2 = module_0.format_timedelta(str_1)
    except BaseException:
        pass


def test_case_10():
    try:
        float_0 = 1007.6803190534386
        set_0 = {float_0}
        var_0 = module_0.short_numpy_repr(set_0)
        assert var_0 == 'array({1007.6803190534386}, dtype=object)'
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        tuple_0 = ()
        list_0 = [var_0, set_0, tuple_0, set_0]
        var_1 = module_0.format_items(list_0)
        assert var_1 == ["'array({1007.6803190534386}, dtype=object)'", '{1007.6803190534386}', '()', '{1007.6803190534386}']
        var_2 = module_0.indexes_repr(float_0)
    except BaseException:
        pass


def test_case_11():
    try:
        int_0 = -1373
        var_0 = module_0.array_repr(int_0)
    except BaseException:
        pass


def test_case_12():
    try:
        float_0 = -783.636
        dict_0 = {float_0: float_0, float_0: float_0}
        var_0 = module_0.format_timedelta(float_0, dict_0)
        assert var_0 == '-1 days +23:59:59.999999217'
        assert module_0.EMPTY_REPR == '    *empty*'
        list_0 = [float_0, float_0, dict_0]
        bool_0 = None
        int_0 = 118
        str_0 = 'C~m'
        dict_1 = {str_0: list_0}
        tuple_0 = (int_0, dict_1, list_0)
        var_1 = module_0.format_items(tuple_0)
        assert var_1 == ['118', "{'C~m': [-783.636, -783.636, {-783.636: -783.636}]}", '[-783.636, -783.636, {-783.636: -783.636}]']
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        bytes_0 = b'K\xc8'
        list_1 = [bool_0, dict_0, float_0, var_0]
        var_2 = module_0.unindexed_dims_repr(bytes_0, list_1)
        assert var_2 == 'Dimensions without coordinates: 75, 200'
        dict_2 = {}
        var_3 = module_0.maybe_truncate(bool_0, dict_2)
    except BaseException:
        pass


def test_case_13():
    try:
        str_0 = 'al@qaAf'
        int_0 = -823
        var_0 = module_0.limit_lines(str_0, limit=int_0)
        assert var_0 == '...'
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        list_0 = [var_0, var_0, str_0]
        bytes_0 = b'\xa4>I\x16j\xf9\x80\xc0\xda8q\xc0'
        tuple_0 = (list_0, list_0, list_0, bytes_0)
        var_1 = module_0.array_repr(tuple_0)
    except BaseException:
        pass


def test_case_14():
    try:
        float_0 = -1606.7823
        var_0 = module_0.short_data_repr(float_0)
    except BaseException:
        pass


def test_case_15():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = -630
        var_0 = module_0.format_array_flat(timedelta64_0, int_0)
        assert var_0 == '...'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        float_0 = -1140.302
        var_1 = module_0.short_numpy_repr(float_0)
        assert var_1 == 'array(-1140.302)'
        str_0 = 'N3,S_5\\p\x0ci^6'
        var_2 = module_0.dataset_repr(str_0)
    except BaseException:
        pass


def test_case_16():
    try:
        str_0 = 'w1N0i^C9M '
        dict_0 = {}
        bool_0 = False
        var_0 = module_0.diff_array_repr(str_0, dict_0, bool_0)
    except BaseException:
        pass


def test_case_17():
    try:
        str_0 = '(tFk)*-<aPkfa\x0cu~$?['
        set_0 = {str_0}
        dict_0 = None
        var_0 = module_0.diff_dataset_repr(str_0, set_0, dict_0)
    except BaseException:
        pass


def test_case_18():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = 1994
        var_0 = module_0.summarize_variable(timedelta64_0, timedelta64_0, int_0)
    except BaseException:
        pass


def test_case_19():
    try:
        str_0 = '\t1fk'
        list_0 = [str_0]
        dict_0 = {}
        var_0 = module_0.last_n_items(list_0, dict_0)
    except BaseException:
        pass


def test_case_20():
    try:
        int_0 = 6
        str_0 = '54y'
        var_0 = module_0.limit_lines(str_0, limit=int_0)
        assert var_0 == '54y'
        assert module_0.EMPTY_REPR == '    *empty*'
        str_1 = '4Gh)J\t'
        bool_0 = True
        var_1 = module_0.first_n_items(str_1, bool_0)
    except BaseException:
        pass


def test_case_21():
    try:
        str_0 = 'K@x$t?8OV1a3Q2?6GMTJ'
        var_0 = module_0.inline_dask_repr(str_0)
    except BaseException:
        pass


def test_case_22():
    try:
        int_0 = -1729
        var_0 = module_0.short_numpy_repr(int_0)
        assert var_0 == 'array(-1729)'
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = '\n    Make an ndarray with a rolling window of axis-th dimension.\n    The rolling dimension will be placed at the last dimension.\n    '
        var_1 = module_0.unindexed_dims_repr(str_0, str_0)
        assert var_1 is None
        bool_0 = True
        bytes_0 = b'd\xa1\xe6\x8e(\xdb\xd0\xb4\xe1\xc3bk\xfa\x80\xec\xec\xc3'
        var_2 = module_0.maybe_truncate(bool_0, bytes_0)
    except BaseException:
        pass


def test_case_23():
    try:
        dict_0 = None
        var_0 = module_0.coords_repr(dict_0)
    except BaseException:
        pass


def test_case_24():
    try:
        str_0 = '2nR~WK\n\tkjv.+~2ceYz'
        hashable_0 = None
        list_0 = [str_0, hashable_0, str_0]
        int_0 = 2616
        var_0 = module_0.summarize_variable(hashable_0, list_0, int_0, str_0, int_0)
    except BaseException:
        pass


def test_case_25():
    try:
        list_0 = None
        var_0 = module_0.short_numpy_repr(list_0)
        assert var_0 == 'array(None, dtype=object)'
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        int_0 = 1928
        dict_0 = {}
        list_1 = [var_0, list_0, dict_0]
        var_1 = module_0.summarize_attr(int_0, list_1)
        assert var_1 == "    1928: ['array(None, dtype=object)', None, {}]"
        str_0 = '\x0cfBY12L`x/&]'
        bytes_0 = b''
        float_0 = 2726.0
        var_2 = module_0.summarize_attr(str_0, bytes_0, float_0)
    except BaseException:
        pass


def test_case_26():
    try:
        str_0 = '2jR~WK\n\tkjv.+~2ceYz'
        list_0 = [str_0, str_0]
        var_0 = module_0.format_items(list_0)
        assert var_0 == ["'2jR~WK\\n\\tkjv.+~2ceYz'", "'2jR~WK\\n\\tkjv.+~2ceYz'"]
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_1 = 'equals'
        bytes_0 = b'\xd7\xea\xf6\xac\x8fUaY\xde\xaf\x82a\xcbdM'
        str_2 = 'T'
        bool_0 = True
        var_1 = module_0.summarize_attr(list_0, bool_0)
        assert var_1 == "    ['2jR~WK\\n\\tkjv.+~2ceYz', '2jR~WK\\n\\tkjv.+~2ceYz']: True"
        var_2 = module_0.diff_array_repr(bytes_0, str_2, str_1)
    except BaseException:
        pass


def test_case_27():
    try:
        float_0 = 1020.9385976612424
        set_0 = {float_0}
        tuple_0 = ()
        list_0 = [float_0, set_0, tuple_0, set_0]
        bool_0 = False
        int_0 = None
        list_1 = [bool_0, list_0]
        str_0 = "jvS4+rQ-_g'fj~j"
        var_0 = module_0.wrap_indent(int_0, list_1, str_0)
    except BaseException:
        pass


def test_case_28():
    try:
        str_0 = '2jR~WK\n\tkjv.+~2ceYz'
        list_0 = [str_0, str_0]
        var_0 = module_0.format_items(list_0)
        assert var_0 == ["'2jR~WK\\n\\tkjv.+~2ceYz'", "'2jR~WK\\n\\tkjv.+~2ceYz'"]
        assert module_0.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        bool_0 = None
        var_1 = module_0.format_timestamp(bool_0)
        assert var_1 == 'NaT'
        float_0 = 0.5
        var_2 = module_0.format_timestamp(float_0)
        assert var_2 == '1970-01-01'
        dict_0 = {}
        var_3 = module_0.array_repr(dict_0)
    except BaseException:
        pass


def test_case_29():
    try:
        timedelta64_0 = module_1.timedelta64()
        var_0 = module_0.format_items(timedelta64_0)
    except BaseException:
        pass


def test_case_30():
    try:
        str_0 = 'aeKP'
        datetime64_0 = module_1.datetime64()
        var_0 = module_0.last_n_items(datetime64_0, str_0)
    except BaseException:
        pass# Automatically generated by Pynguin.


def test_case_31():
    pass


def test_case_32():
    timedelta64_0 = module_0.timedelta64()
    int_0 = -621
    var_0 = module_1.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '...'
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_33():
    datetime64_0 = module_0.datetime64()
    var_0 = module_1.last_item(datetime64_0)
    assert var_0 == [None]
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_34():
    dict_0 = None
    var_0 = module_1.format_timestamp(dict_0)
    assert var_0 == 'NaT'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_35():
    int_0 = 894
    datetime64_0 = None
    var_0 = module_1.format_timedelta(datetime64_0)
    assert var_0 == 'NaT'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    var_1 = module_1.format_timestamp(int_0)
    assert var_1 == '1970-01-01T00:00:00.000000894'


def test_case_36():
    tuple_0 = None
    var_0 = module_1.format_timedelta(tuple_0)
    assert var_0 == 'NaT'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_37():
    timedelta_0 = module_2.timedelta()
    str_0 = 'pWJ5V*2fi =v'
    var_0 = module_1.format_item(timedelta_0, str_0)
    assert var_0 == '0 days 00:00:00'
    assert module_2.MINYEAR == 1
    assert module_2.MAXYEAR == 9999
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_38():
    int_0 = 987
    bytes_0 = b'\xf2)\x81E/\xd5SF\xc5\xa8\x01}\x03\xe9'
    var_0 = module_1.format_item(int_0, bytes_0)
    assert var_0 == '987'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_39():
    list_0 = []
    var_0 = module_1.short_numpy_repr(list_0)
    assert var_0 == 'array([], dtype=float64)'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_40():
    str_0 = '2nR~WK\n\tkjv.+~2ceYz'
    list_0 = []
    list_1 = [list_0]
    bytes_0 = b'\xe9\xd3\x19L\x9d\x08D\xff\r\xff\x0b'
    var_0 = module_1.short_numpy_repr(bytes_0)
    assert var_0 == "array(b'\\xe9\\xd3\\x19L\\x9d\\x08D\\xff\\r\\xff\\x0b', dtype='|S11')"
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    float_0 = 1953.2606
    str_1 = 'equals'
    str_2 = '#d\n~-l_R3b2`!'
    var_1 = module_1.unindexed_dims_repr(list_0, str_2)
    assert var_1 is None
    tuple_0 = (list_1, float_0, str_0, str_1)
    str_3 = '3Cs'
    var_2 = module_1.short_numpy_repr(str_3)
    assert var_2 == "array('3Cs', dtype='<U3')"
    var_3 = module_1.format_items(tuple_0)
    assert var_3 == ['[[]]', '1.953e+03', "'2nR~WK\\n\\tkjv.+~2ceYz'", "'equals'"]
    float_1 = 1952.1350340601373
    var_4 = module_1.format_timestamp(float_1)
    assert var_4 == '1970-01-01T00:00:00.000001952'


def test_case_41():
    str_0 = '2nR~WK\n\tkjv.+~2ceYz'
    list_0 = []
    list_1 = [list_0]
    var_0 = module_1.format_items(list_0)
    assert module_1.EMPTY_REPR == '    *empty*'
    float_0 = 1953.260607
    tuple_0 = (list_1, float_0, str_0, str_0)
    str_1 = '3Cs'
    var_1 = module_1.short_numpy_repr(str_1)
    assert var_1 == "array('3Cs', dtype='<U3')"
    assert var_0 == []
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    var_2 = module_1.format_items(tuple_0)
    assert var_2 == ['[[]]', '1.953e+03', "'2nR~WK\\n\\tkjv.+~2ceYz'", "'2nR~WK\\n\\tkjv.+~2ceYz'"]
    float_1 = 1952.1350340601373
    var_3 = module_1.format_timestamp(float_1)
    assert var_3 == '1970-01-01T00:00:00.000001952'


def test_case_42():
    dict_0 = {}
    var_0 = module_1.coords_repr(dict_0)
    assert var_0 == 'Coordinates:\n    *empty*'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_43():
    str_0 = ''
    list_0 = [str_0]
    var_0 = module_1.format_items(list_0)
    assert var_0 == ["''"]
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_44():
    timedelta_0 = module_2.timedelta()
    int_0 = 1301
    var_0 = module_1.coords_repr(timedelta_0, int_0)
    assert var_0 == 'Coordinates:\n    *empty*'
    assert module_2.MINYEAR == 1
    assert module_2.MAXYEAR == 9999
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    datetime64_0 = module_0.datetime64()
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    var_1 = module_1.last_item(datetime64_0)
    assert var_1 == [None]


def test_case_45():
    float_0 = 1007.6803190534386
    set_0 = {float_0}
    var_0 = module_1.short_numpy_repr(set_0)
    assert var_0 == 'array({1007.6803190534386}, dtype=object)'
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'
    int_0 = -2667
    float_1 = -4000.7069
    var_1 = module_1.pretty_print(float_1, int_0)
    assert var_1 == '...'
    list_0 = []
    var_2 = module_1.format_items(list_0)
    assert var_2 == []
    str_0 = "Qs YCtf';y<sm>`"
    float_2 = 1e-05
    dict_0 = {var_1: float_2, str_0: float_2}
    var_3 = module_1.indexes_repr(dict_0)
    assert var_3 == "...: 1e-05\nQs YCtf';y<sm>`: 1e-05"


def test_case_46():
    list_0 = []
    timedelta_0 = module_2.timedelta()
    str_0 = '00:00:00.000000470'
    datetime64_0 = module_0.datetime64(*list_0)
    timedelta64_0 = None
    var_0 = module_1.format_item(str_0, datetime64_0, timedelta64_0)
    assert var_0 == '00:00:00.000000470'
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_47():
    dict_0 = {}
    datetime64_0 = module_0.datetime64(**dict_0)
    str_0 = '23:59:59.999996077'
    var_0 = module_1.format_item(datetime64_0, str_0)
    assert var_0 == 'NaT'
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'


def test_case_48():
    timedelta64_0 = module_0.timedelta64()
    int_0 = 1994
    var_0 = module_1.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '00:00:00'
    assert module_0.newaxis is None
    assert module_0.little_endian is True
    assert module_0.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.CLIP == 0
    assert module_0.RAISE == 2
    assert module_0.WRAP == 1
    assert module_0.MAXDIMS == 32
    assert module_0.BUFSIZE == 8192
    assert module_0.ALLOW_THREADS == 1
    assert module_0.MAY_SHARE_BOUNDS == 0
    assert module_0.MAY_SHARE_EXACT == -1
    assert module_0.ERR_CALL == 3
    assert module_0.ERR_DEFAULT == 521
    assert module_0.ERR_IGNORE == 0
    assert module_0.ERR_LOG == 5
    assert module_0.ERR_PRINT == 4
    assert module_0.ERR_RAISE == 2
    assert module_0.ERR_WARN == 1
    assert module_0.FLOATING_POINT_SUPPORT == 1
    assert module_0.FPE_DIVIDEBYZERO == 1
    assert module_0.FPE_INVALID == 8
    assert module_0.FPE_OVERFLOW == 2
    assert module_0.FPE_UNDERFLOW == 4
    assert module_0.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_0.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_0.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_0.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.SHIFT_DIVIDEBYZERO == 0
    assert module_0.SHIFT_INVALID == 9
    assert module_0.SHIFT_OVERFLOW == 3
    assert module_0.SHIFT_UNDERFLOW == 6
    assert module_0.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_0.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_0.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_0.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_0.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_0.sctypeDict) == 136
    assert len(module_0.sctypes) == 5
    assert len(module_0.ScalarType) == 31
    assert len(module_0.cast) == 24
    assert len(module_0.nbytes) == 24
    assert module_0.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_0.tracemalloc_domain == 389047
    assert module_0.mgrid.sparse is False
    assert module_0.ogrid.sparse is True
    assert len(module_0.r_) == 0
    assert len(module_0.c_) == 0
    assert module_0.s_.maketuple is False
    assert module_0.index_exp.maketuple is True
    assert module_0.oldnumeric == 'removed'
    assert module_0.numarray == 'removed'
    assert module_0.use_hugepage == 1
    assert module_0.kernel_version == (6, 8)
    assert module_1.OPTIONS == {'display_width': 80, 'arithmetic_join': 'inner', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'warn_for_unclosed_files': False, 'cmap_sequential': 'viridis', 'cmap_divergent': 'RdBu_r', 'keep_attrs': 'default', 'display_style': 'html'}
    assert module_1.dask_array_type == ()
    assert module_1.sparse_array_type == ()
    assert module_1.EMPTY_REPR == '    *empty*'

Coverage: 41.8732782369146
Mutation Score: 1.230000000000004

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from pandas.errors import OutOfBoundsDatetime
from xarray.core import formatting
from unittest.mock import MagicMock

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("longer than numchars", 10) == "longer th..."

def test_maybe_truncate():
    assert formatting.maybe_truncate("short", 10) == "short"
    assert formatting.maybe_truncate("this is a very long string", 10) == "this is..."

def test_wrap_indent():
    text = "This is a test\nwith multiple lines"
    expected = "Start This is a test\n      with multiple lines"
    assert formatting.wrap_indent(text, start="Start ", length=6) == expected

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]

def test_format_timestamp():
    t = pd.Timestamp("2020-01-01")
    assert formatting.format_timestamp(t) == "2020-01-01"

    t = pd.Timestamp("2020-01-01 12:00:00")
    assert formatting.format_timestamp(t) == "2020-01-01T12:00:00"

def test_format_timedelta():
    t = pd.Timedelta(days=1, hours=5)
    assert formatting.format_timedelta(t) == "1 days 05:00:00"
    assert formatting.format_timedelta(t, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(t, timedelta_format="time") == "05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64("2020-01-01")) == "2020-01-01"
    assert formatting.format_item(np.timedelta64(1, 'D')) == "1 days 00:00:00"
    assert formatting.format_item("string") == "'string'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64("2020-01-01"), np.timedelta64(1, 'D'), "string", 3.14159]
    expected = ["2020-01-01", "1 days 00:00:00", "'string'", "3.142"]
    assert formatting.format_items(items) == expected

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result in ["1 2 3 4 5", "1 2 ... 4 5"]

def test_inline_dask_repr():
    mock_dask_array = MagicMock()
    mock_dask_array.chunks = ((3, 3),)
    mock_dask_array._meta = np.array([])
    assert formatting.inline_dask_repr(mock_dask_array) == "dask.array<chunksize=(3,), meta=np.ndarray>"

def test_inline_sparse_repr():
    mock_sparse_array = MagicMock()
    mock_sparse_array.nnz = 10
    mock_sparse_array.fill_value = 0
    assert formatting.inline_sparse_repr(mock_sparse_array) == "<MagicMock: nnz=10, fill_value=0>"

def test_summarize_variable():
    mock_var = MagicMock()
    mock_var.dims = ('x',)
    mock_var.dtype = 'int64'
    mock_var._in_memory = True
    mock_var.__array_function__ = None
    mock_var.size = 10
    mock_var.shape = (10,)
    mock_var._data = np.arange(10)
    result = formatting.summarize_variable("var", mock_var, 20)
    assert "var" in result
    assert "int64" in result

def test_summarize_attr():
    assert formatting.summarize_attr("key", "value", 20) == "    key: value"

def test_limit_lines():
    long_string = "\n".join(["line"] * 10)
    result = formatting.limit_lines(long_string, limit=5)
    assert result.count("line") == 5
    assert "..." in result

def test_short_numpy_repr():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.short_numpy_repr(array)
    assert "array" in result

def test_short_data_repr():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.short_data_repr(array)
    assert "array" in result

def test_array_repr():
    mock_arr = MagicMock()
    mock_arr.name = "test_array"
    mock_arr.dims = ('x',)
    mock_arr.sizes = {'x': 5}
    mock_arr._data = np.array([1, 2, 3, 4, 5])
    mock_arr.attrs = {}
    result = formatting.array_repr(mock_arr)
    assert "test_array" in result
    assert "x: 5" in result

def test_dataset_repr():
    mock_ds = MagicMock()
    mock_ds.variables = {'var': MagicMock()}
    mock_ds.coords = {}
    mock_ds.dims = {'x': 5}
    mock_ds.data_vars = {}
    mock_ds.attrs = {}
    result = formatting.dataset_repr(mock_ds)
    assert "<xarray." in result
    assert "Dimensions:" in result

Coverage: 57.57575757575758
Mutation Score: 43.39

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from pandas.errors import OutOfBoundsDatetime
from xarray.core import formatting
from unittest.mock import MagicMock

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("longer than numchars", 10) == "longer ..."

def test_maybe_truncate():
    assert formatting.maybe_truncate("short", 10) == "short"
    assert formatting.maybe_truncate("this is a very long string", 10) == "this is..."

def test_wrap_indent():
    text = "This is a test\nwith multiple lines"
    expected = "Start This is a test\n      with multiple lines"
    assert formatting.wrap_indent(text, start="Start ", length=6) == expected

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]

def test_format_timestamp():
    t = pd.Timestamp("2020-01-01")
    assert formatting.format_timestamp(t) == "2020-01-01"

    t = pd.Timestamp("2020-01-01 12:00:00")
    assert formatting.format_timestamp(t) == "2020-01-01T12:00:00"

def test_format_timedelta():
    t = pd.Timedelta(days=1, hours=5)
    assert formatting.format_timedelta(t) == "1 days 05:00:00"
    assert formatting.format_timedelta(t, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(t, timedelta_format="time") == "05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64("2020-01-01")) == "2020-01-01"
    assert formatting.format_item(np.timedelta64(1, 'D')) == "1 days 00:00:00"
    assert formatting.format_item("string") == "'string'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64("2020-01-01"), np.timedelta64(1, 'D'), "string", 3.14159]
    expected = ["2020-01-01", "1 days 00:00:00", "'string'", "3.142"]
    assert formatting.format_items(items) == expected

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result in ["1 2 3 4 5", "1 2 ... 4 5"]

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3, 3),)
        _meta = np.array([])

    mock_dask_array = MockDaskArray()
    assert formatting.inline_dask_repr(mock_dask_array) == "dask.array<chunksize=(3,), meta=np.ndarray>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 10
        fill_value = 0

    mock_sparse_array = MockSparseArray()
    assert formatting.inline_sparse_repr(mock_sparse_array) == "<MockSparseArray: nnz=10, fill_value=0>"

def test_summarize_variable():
    mock_var = MagicMock()
    mock_var.dims = ('x',)
    mock_var.dtype = 'int64'
    mock_var._in_memory = True
    mock_var.__array_function__ = None
    mock_var.size = 10
    mock_var.shape = (10,)
    mock_var._data = np.arange(10)
    result = formatting.summarize_variable("var", mock_var, 20)
    assert "var" in result
    assert "int64" in result

def test_summarize_attr():
    assert formatting.summarize_attr("key", "value", 20) == "    key:             value"

def test_limit_lines():
    long_string = "\n".join(["line"] * 10)
    result = formatting.limit_lines(long_string, limit=5)
    assert result.count("line") == 5
    assert "..." in result

def test_short_numpy_repr():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.short_numpy_repr(array)
    assert "array" in result

def test_short_data_repr():
    class MockArray:
        _data = np.array([1, 2, 3, 4, 5])
        size = 5
        dtype = np.int64
        _in_memory = True

    array = MockArray()
    result = formatting.short_data_repr(array)
    assert "array" in result

def test_array_repr():
    mock_arr = MagicMock()
    mock_arr.name = "test_array"
    mock_arr.dims = ('x',)
    mock_arr.sizes = {'x': 5}
    mock_arr._data = np.array([1, 2, 3, 4, 5])
    mock_arr.attrs = {}
    result = formatting.array_repr(mock_arr)
    assert "test_array" in result
    assert "x: 5" in result

def test_dataset_repr():
    mock_ds = MagicMock()
    mock_ds.variables = {'var': MagicMock()}
    mock_ds.coords = {}
    mock_ds.dims = {'x': 5}
    mock_ds.data_vars = {}
    mock_ds.attrs = {}
    result = formatting.dataset_repr(mock_ds)
    assert "<xarray." in result
    assert "Dimensions:" in result
Coverage: 58.95316804407714
Mutation Score: 43.83
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_formatting.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 8e6649c1ee5a9b168221c18f64ddeb19a5a87d8b
Author: TestGenEval <>
Date:   Wed Dec 11 12:17:39 2024 +0000

    Testing fixes

diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py
index 28eaae5f..9aa20f2b 100644
--- a/xarray/core/formatting.py
+++ b/xarray/core/formatting.py
@@ -261,6 +261,8 @@ def inline_variable_array_repr(var, max_width):
         return inline_dask_repr(var.data)
     elif isinstance(var._data, sparse_array_type):
         return inline_sparse_repr(var.data)
+    elif hasattr(var._data, "_repr_inline_"):
+        return var._data._repr_inline_(max_width)
     elif hasattr(var._data, "__array_function__"):
         return maybe_truncate(repr(var._data).replace("\n", " "), max_width)
     else:
diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py
deleted file mode 100644
index 82de8080..00000000
--- a/xarray/tests/test_formatting.py
+++ /dev/null
@@ -1,423 +0,0 @@
-import sys
-from textwrap import dedent
-
-import numpy as np
-import pandas as pd
-import pytest
-
-import xarray as xr
-from xarray.core import formatting
-
-from . import raises_regex
-
-
-class TestFormatting:
-    def test_get_indexer_at_least_n_items(self):
-        cases = [
-            ((20,), (slice(10),), (slice(-10, None),)),
-            ((3, 20), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 10), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 5), (slice(2), slice(None)), (slice(-2, None), slice(None))),
-            ((1, 2, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            ((2, 3, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            (
-                (1, 10, 1),
-                (0, slice(10), slice(None)),
-                (-1, slice(-10, None), slice(None)),
-            ),
-            (
-                (2, 5, 1),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-            ((2, 5, 3), (0, slice(4), slice(None)), (-1, slice(-4, None), slice(None))),
-            (
-                (2, 3, 3),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-        ]
-        for shape, start_expected, end_expected in cases:
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=False)
-            assert start_expected == actual
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=True)
-            assert end_expected == actual
-
-    def test_first_n_items(self):
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.first_n_items(array, n)
-            expected = array.flat[:n]
-            assert (expected == actual).all()
-
-        with raises_regex(ValueError, "at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_n_items(self):
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.last_n_items(array, n)
-            expected = array.flat[-n:]
-            assert (expected == actual).all()
-
-        with raises_regex(ValueError, "at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_item(self):
-        array = np.arange(100)
-
-        reshape = ((10, 10), (1, 100), (2, 2, 5, 5))
-        expected = np.array([99])
-
-        for r in reshape:
-            result = formatting.last_item(array.reshape(r))
-            assert result == expected
-
-    def test_format_item(self):
-        cases = [
-            (pd.Timestamp("2000-01-01T12"), "2000-01-01T12:00:00"),
-            (pd.Timestamp("2000-01-01"), "2000-01-01"),
-            (pd.Timestamp("NaT"), "NaT"),
-            (pd.Timedelta("10 days 1 hour"), "10 days 01:00:00"),
-            (pd.Timedelta("-3 days"), "-3 days +00:00:00"),
-            (pd.Timedelta("3 hours"), "0 days 03:00:00"),
-            (pd.Timedelta("NaT"), "NaT"),
-            ("foo", "'foo'"),
-            (b"foo", "b'foo'"),
-            (1, "1"),
-            (1.0, "1.0"),
-        ]
-        for item, expected in cases:
-            actual = formatting.format_item(item)
-            assert expected == actual
-
-    def test_format_items(self):
-        cases = [
-            (np.arange(4) * np.timedelta64(1, "D"), "0 days 1 days 2 days 3 days"),
-            (
-                np.arange(4) * np.timedelta64(3, "h"),
-                "00:00:00 03:00:00 06:00:00 09:00:00",
-            ),
-            (
-                np.arange(4) * np.timedelta64(500, "ms"),
-                "00:00:00 00:00:00.500000 00:00:01 00:00:01.500000",
-            ),
-            (pd.to_timedelta(["NaT", "0s", "1s", "NaT"]), "NaT 00:00:00 00:00:01 NaT"),
-            (
-                pd.to_timedelta(["1 day 1 hour", "1 day", "0 hours"]),
-                "1 days 01:00:00 1 days 00:00:00 0 days 00:00:00",
-            ),
-            ([1, 2, 3], "1 2 3"),
-        ]
-        for item, expected in cases:
-            actual = " ".join(formatting.format_items(item))
-            assert expected == actual
-
-    def test_format_array_flat(self):
-        actual = formatting.format_array_flat(np.arange(100), 2)
-        expected = "..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 9)
-        expected = "0 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 10)
-        expected = "0 1 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 13)
-        expected = "0 1 ... 98 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 15)
-        expected = "0 1 2 ... 98 99"
-        assert expected == actual
-
-        # NB: Probably not ideal; an alternative would be cutting after the
-        # first ellipsis
-        actual = formatting.format_array_flat(np.arange(100.0), 11)
-        expected = "0.0 ... ..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100.0), 12)
-        expected = "0.0 ... 99.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(3), 5)
-        expected = "0 1 2"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4.0), 11)
-        expected = "0.0 ... 3.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(0), 0)
-        expected = ""
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(1), 1)
-        expected = "0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(2), 3)
-        expected = "0 1"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4), 7)
-        expected = "0 1 2 3"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(5), 7)
-        expected = "0 ... 4"
-        assert expected == actual
-
-        long_str = [" ".join(["hello world" for _ in range(100)])]
-        actual = formatting.format_array_flat(np.asarray([long_str]), 21)
-        expected = "'hello world hello..."
-        assert expected == actual
-
-    def test_pretty_print(self):
-        assert formatting.pretty_print("abcdefghij", 8) == "abcde..."
-        assert formatting.pretty_print("ß", 1) == "ß"
-
-    def test_maybe_truncate(self):
-        assert formatting.maybe_truncate("ß", 10) == "ß"
-
-    def test_format_timestamp_out_of_bounds(self):
-        from datetime import datetime
-
-        date = datetime(1300, 12, 1)
-        expected = "1300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-        date = datetime(2300, 12, 1)
-        expected = "2300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-    def test_attribute_repr(self):
-        short = formatting.summarize_attr("key", "Short string")
-        long = formatting.summarize_attr("key", 100 * "Very long string ")
-        newlines = formatting.summarize_attr("key", "\n\n\n")
-        tabs = formatting.summarize_attr("key", "\t\t\t")
-        assert short == "    key: Short string"
-        assert len(long) <= 80
-        assert long.endswith("...")
-        assert "\n" not in newlines
-        assert "\t" not in tabs
-
-    def test_diff_array_repr(self):
-        da_a = xr.DataArray(
-            np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"),
-            dims=("x", "y"),
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        da_b = xr.DataArray(
-            np.array([1, 2], dtype="int64"),
-            dims="x",
-            coords={
-                "x": np.array(["a", "c"], dtype="U1"),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right DataArray objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing values:
-        L
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)
-        R
-            array([1, 2], dtype=int64)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_array_repr(da_a, da_b, "identical")
-        try:
-            assert actual == expected
-        except AssertionError:
-            # depending on platform, dtype may not be shown in numpy array repr
-            assert actual == expected.replace(", dtype=int64", "")
-
-        va = xr.Variable(
-            "x", np.array([1, 2, 3], dtype="int64"), {"title": "test Variable"}
-        )
-        vb = xr.Variable(("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"))
-
-        expected = dedent(
-            """\
-        Left and right Variable objects are not equal
-        Differing dimensions:
-            (x: 3) != (x: 2, y: 3)
-        Differing values:
-        L
-            array([1, 2, 3], dtype=int64)
-        R
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)"""
-        )
-
-        actual = formatting.diff_array_repr(va, vb, "equals")
-        try:
-            assert actual == expected
-        except AssertionError:
-            assert actual == expected.replace(", dtype=int64", "")
-
-    @pytest.mark.filterwarnings("error")
-    def test_diff_attrs_repr_with_array(self):
-        attrs_a = {"attr": np.array([0, 1])}
-
-        attrs_b = {"attr": 1}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: 1
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-        attrs_b = {"attr": np.array([-3, 5])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [-3  5]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-        # should not raise a warning
-        attrs_b = {"attr": np.array([0, 1, 2])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [0 1 2]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-    def test_diff_dataset_repr(self):
-        ds_a = xr.Dataset(
-            data_vars={
-                "var1": (("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64")),
-                "var2": ("x", np.array([3, 4], dtype="int64")),
-            },
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        ds_b = xr.Dataset(
-            data_vars={"var1": ("x", np.array([1, 2], dtype="int64"))},
-            coords={
-                "x": ("x", np.array(["a", "c"], dtype="U1"), {"source": 0}),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right Dataset objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-            source: 0
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing data variables:
-        L   var1     (x, y) int64 1 2 3 4 5 6
-        R   var1     (x) int64 1 2
-        Data variables only on the left object:
-            var2     (x) int64 3 4
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_dataset_repr(ds_a, ds_b, "identical")
-        assert actual == expected
-
-    def test_array_repr(self):
-        ds = xr.Dataset(coords={"foo": [1, 2, 3], "bar": [1, 2, 3]})
-        ds[(1, 2)] = xr.DataArray([0], dims="test")
-        actual = formatting.array_repr(ds[(1, 2)])
-        expected = dedent(
-            """\
-        <xarray.DataArray (1, 2) (test: 1)>
-        array([0])
-        Dimensions without coordinates: test"""
-        )
-
-        assert actual == expected
-
-
-def test_set_numpy_options():
-    original_options = np.get_printoptions()
-    with formatting.set_numpy_options(threshold=10):
-        assert len(repr(np.arange(500))) < 200
-    # original options are restored
-    assert np.get_printoptions() == original_options
-
-
-def test_short_numpy_repr():
-    cases = [
-        np.random.randn(500),
-        np.random.randn(20, 20),
-        np.random.randn(5, 10, 15),
-        np.random.randn(5, 10, 15, 3),
-        np.random.randn(100, 5, 1),
-    ]
-    # number of lines:
-    # for default numpy repr: 167, 140, 254, 248, 599
-    # for short_numpy_repr: 1, 7, 24, 19, 25
-    for array in cases:
-        num_lines = formatting.short_numpy_repr(array).count("\n") + 1
-        assert num_lines < 30
-
-
-def test_large_array_repr_length():
-
-    da = xr.DataArray(np.random.randn(100, 5, 1))
-
-    result = repr(da).splitlines()
-    assert len(result) < 50
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: numpy>=1.15 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.1.dev28+g8e6649c1.d20250207) (1.23.0)
Requirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.1.dev28+g8e6649c1.d20250207) (1.5.3)
Requirement already satisfied: setuptools>=41.2 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.1.dev28+g8e6649c1.d20250207) (68.0.0)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.16.1.dev28+g8e6649c1.d20250207) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.16.1.dev28+g8e6649c1.d20250207) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.25->xarray==0.16.1.dev28+g8e6649c1.d20250207) (1.16.0)
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.16.1.dev28+g8e6649c1
    Uninstalling xarray-0.16.1.dev28+g8e6649c1:
      Successfully uninstalled xarray-0.16.1.dev28+g8e6649c1
  DEPRECATION: Legacy editable install of xarray==0.16.1.dev28+g8e6649c1.d20250207 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for xarray
Successfully installed xarray
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.110.1, xdist-3.6.1
collected 17 items

xarray/tests/test_formatting.py .................                        [100%]

=============================== warnings summary ===============================
xarray/__init__.py:1
  /testbed/xarray/__init__.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

xarray/core/dask_array_compat.py:16
xarray/core/dask_array_compat.py:16
  /testbed/xarray/core/dask_array_compat.py:16: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) >= LooseVersion("2.0.0"):

xarray/core/dask_array_compat.py:149
xarray/core/dask_array_compat.py:149
  /testbed/xarray/core/dask_array_compat.py:149: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) >= LooseVersion("2.8.1"):

xarray/core/dask_array_compat.py:186
xarray/core/dask_array_compat.py:186
  /testbed/xarray/core/dask_array_compat.py:186: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2.9.0"):

xarray/core/pdcompat.py:45
  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < "0.25.0":

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
  /testbed/xarray/tests/__init__.py:58: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    return version.LooseVersion(vstring)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_formatting.py::test_pretty_print
PASSED xarray/tests/test_formatting.py::test_maybe_truncate
PASSED xarray/tests/test_formatting.py::test_wrap_indent
PASSED xarray/tests/test_formatting.py::test_first_n_items
PASSED xarray/tests/test_formatting.py::test_last_n_items
PASSED xarray/tests/test_formatting.py::test_last_item
PASSED xarray/tests/test_formatting.py::test_format_timestamp
PASSED xarray/tests/test_formatting.py::test_format_timedelta
PASSED xarray/tests/test_formatting.py::test_format_item
PASSED xarray/tests/test_formatting.py::test_format_items
PASSED xarray/tests/test_formatting.py::test_format_array_flat
PASSED xarray/tests/test_formatting.py::test_summarize_variable
PASSED xarray/tests/test_formatting.py::test_summarize_attr
PASSED xarray/tests/test_formatting.py::test_limit_lines
PASSED xarray/tests/test_formatting.py::test_short_numpy_repr
PASSED xarray/tests/test_formatting.py::test_array_repr
PASSED xarray/tests/test_formatting.py::test_dataset_repr
======================= 17 passed, 18 warnings in 3.38s ========================

