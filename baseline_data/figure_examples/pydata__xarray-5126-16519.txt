Instance ID: pydata__xarray-5126-16519

Baseline 1 (Pynguin):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: import datetime as module_2
import numpy as module_1
import pytest
import xarray.core.formatting as module_0

def test_case_1():
    try:
        int_0 = 2918
        str_0 = 'Z\t@75)uQ#1'
        var_0 = module_0.summarize_variable(str_0, str_0, int_0)
    except BaseException:
        pass


def test_case_2():
    try:
        bool_0 = False
        list_0 = []
        var_0 = module_0.wrap_indent(bool_0, list_0)
    except BaseException:
        pass


def test_case_3():
    try:
        dict_0 = None
        var_0 = module_0.format_items(dict_0)
    except BaseException:
        pass


def test_case_4():
    try:
        int_0 = -793
        list_0 = [int_0, int_0, int_0]
        var_0 = module_0.format_array_flat(list_0, int_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bytes_0 = None
        var_0 = module_0.inline_dask_repr(bytes_0)
    except BaseException:
        pass


def test_case_6():
    try:
        int_0 = -1879
        var_0 = module_0.inline_sparse_repr(int_0)
    except BaseException:
        pass


def test_case_7():
    try:
        list_0 = None
        float_0 = -2261.0
        var_0 = module_0.inline_variable_array_repr(list_0, float_0)
    except BaseException:
        pass


def test_case_8():
    try:
        str_0 = ''
        str_1 = 'wh"{_/m|!'
        str_2 = 'replacement dimension %r is not a 1D variable along the old dimension %r'
        var_0 = module_0.summarize_datavar(str_0, str_1, str_2)
    except BaseException:
        pass


def test_case_9():
    try:
        int_0 = 985
        complex_0 = None
        var_0 = module_0.summarize_coord(int_0, complex_0, int_0)
    except BaseException:
        pass


def test_case_10():
    try:
        dict_0 = {}
        var_0 = module_0.coords_repr(dict_0)
        assert var_0 == 'Coordinates:\n    *empty*'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        float_0 = -262.0
        set_0 = {float_0, var_0, float_0, var_0}
        var_1 = module_0.summarize_attr(float_0, set_0)
        assert var_1 == "    -262.0: {-262.0, 'Coordinates:\\n    *empty*'}"
        timedelta64_0 = None
        tuple_0 = None
        var_2 = module_0.last_n_items(timedelta64_0, tuple_0)
    except BaseException:
        pass


def test_case_11():
    try:
        int_0 = None
        str_0 = '__resample_dim__'
        dict_0 = {str_0: int_0}
        list_0 = [int_0, dict_0, dict_0]
        var_0 = module_0.summarize_attr(int_0, dict_0, list_0)
    except BaseException:
        pass


def test_case_12():
    try:
        int_0 = -2065
        str_0 = '^OExu^['
        str_1 = None
        str_2 = '7$`l@\\"eWf>\x0cJ[%E'
        dict_0 = {str_0: int_0, str_1: int_0, str_2: int_0}
        var_0 = module_0.indexes_repr(dict_0)
        assert var_0 == '^OExu^[: -2065\nNone: -2065\n7$`l@\\"eWf>\x0cJ[%E: -2065'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.pretty_print(int_0, int_0)
        assert var_1 == '...'
        bytes_0 = b'\x8b\x8e\x1c'
        var_2 = module_0.array_repr(bytes_0)
    except BaseException:
        pass


def test_case_13():
    try:
        bool_0 = False
        var_0 = module_0.dim_summary(bool_0)
    except BaseException:
        pass


def test_case_14():
    try:
        bool_0 = False
        var_0 = module_0.array_repr(bool_0)
    except BaseException:
        pass


def test_case_15():
    try:
        str_0 = '8R"}]:&:\\'
        bool_0 = False
        set_0 = set()
        tuple_0 = (str_0, bool_0, set_0)
        var_0 = module_0.dataset_repr(tuple_0)
    except BaseException:
        pass


def test_case_16():
    try:
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        bool_0 = True
        var_0 = module_0.diff_dim_summary(dict_0, bool_0)
    except BaseException:
        pass


def test_case_17():
    try:
        bytes_0 = b'\x85\xab\x82\x8e\xd1\xec\xce2\x9d\x8b'
        var_0 = module_0.diff_dataset_repr(bytes_0, bytes_0, bytes_0)
    except BaseException:
        pass


def test_case_18():
    try:
        bool_0 = False
        list_0 = []
        list_1 = [list_0, bool_0]
        str_0 = 'MD'
        var_0 = module_0.diff_array_repr(list_0, list_1, str_0)
    except BaseException:
        pass


def test_case_19():
    try:
        str_0 = 'SiiX?>UX~$1>'
        dict_0 = {}
        int_0 = -898
        var_0 = module_0.summarize_variable(str_0, dict_0, int_0, int_0)
    except BaseException:
        pass


def test_case_20():
    try:
        float_0 = -425.4898874192987
        var_0 = module_0.format_timedelta(float_0)
        assert var_0 == '-1 days +23:59:59.999999575'
        assert module_0.EMPTY_REPR == '    *empty*'
        dict_0 = {}
        var_1 = module_0.coords_repr(dict_0)
        assert var_1 == 'Coordinates:\n    *empty*'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        str_0 = "'rmo"
        list_0 = [var_1, var_1, dict_0, str_0]
        var_2 = module_0.short_numpy_repr(list_0)
        assert var_2 == 'array([\'Coordinates:\\n    *empty*\', \'Coordinates:\\n    *empty*\', {}, "\'rmo"],\n      dtype=object)'
        var_3 = module_0.last_item(dict_0)
    except BaseException:
        pass


def test_case_21():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = 2017
        var_0 = module_0.format_array_flat(timedelta64_0, int_0)
        assert var_0 == '00:00:00'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = 'j39a+2"'
        bool_0 = True
        list_0 = []
        var_1 = module_0.unindexed_dims_repr(list_0, bool_0)
        assert var_1 is None
        datetime64_0 = module_1.datetime64()
        dict_0 = {datetime64_0: var_0, str_0: int_0}
        list_1 = [dict_0, int_0, bool_0, var_0]
        var_2 = module_0.summarize_variable(dict_0, list_1, int_0)
    except BaseException:
        pass


def test_case_22():
    try:
        int_0 = 985
        str_0 = '#U{I9:trI/z['
        str_1 = '-VT\x0cH'
        var_0 = module_0.unindexed_dims_repr(str_0, str_1)
        assert var_0 == 'Dimensions without coordinates: #, U, {, I, 9, :, t, r, I, /, z, ['
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        complex_0 = None
        var_1 = module_0.summarize_coord(int_0, complex_0, int_0)
    except BaseException:
        pass


def test_case_23():
    try:
        datetime64_0 = module_1.datetime64()
        int_0 = 818
        var_0 = module_0.format_array_flat(datetime64_0, int_0)
        assert var_0 == 'NaT'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = '00:00:00.000001789'
        dict_0 = {str_0: int_0, str_0: int_0, str_0: str_0, str_0: int_0}
        tuple_0 = (dict_0, int_0)
        var_1 = module_0.unindexed_dims_repr(tuple_0, tuple_0)
        assert var_1 is None
        timedelta64_0 = module_1.timedelta64()
        int_1 = -620
        str_1 = 'T6Z*7&QP'
        list_0 = [timedelta64_0, datetime64_0, int_1, str_1]
        str_2 = 'aIX'
        var_2 = module_0.diff_dataset_repr(datetime64_0, list_0, str_2)
    except BaseException:
        pass


def test_case_24():
    try:
        bool_0 = False
        var_0 = module_0.format_timestamp(bool_0)
    except BaseException:
        pass


def test_case_25():
    try:
        str_0 = '4|*u2%\x0bcdO'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.coords_repr(dict_0)
    except BaseException:
        pass


def test_case_26():
    try:
        str_0 = 'aQ'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = -1975
        var_0 = module_0.coords_repr(dict_0, int_0)
    except BaseException:
        pass


def test_case_27():
    try:
        dict_0 = {}
        bytes_0 = b'\x06>\xf9D\xb8j\xd39\x01\x1f^'
        bool_0 = True
        int_0 = 1354
        dict_1 = {int_0: int_0}
        tuple_0 = (bytes_0, bool_0, int_0, dict_1)
        bool_1 = True
        int_1 = 761
        tuple_1 = (dict_0, tuple_0, bool_1, int_1)
        list_0 = []
        var_0 = module_0.wrap_indent(tuple_1, dict_1, list_0)
    except BaseException:
        pass


def test_case_28():
    try:
        datetime64_0 = module_1.datetime64()
        list_0 = [datetime64_0, datetime64_0]
        var_0 = module_0.last_n_items(datetime64_0, list_0)
    except BaseException:
        pass


def test_case_29():
    try:
        list_0 = None
        str_0 = '-NK[p&aW,'
        str_1 = '{h+E3O8)~N"~;/c~"'
        str_2 = ']cjg64lu+D\n/hK'
        str_3 = 'B-UGYht;qm.}(=61\\5ta'
        dict_0 = {str_0: list_0, str_1: str_1, str_2: str_1, str_0: str_3}
        set_0 = {str_0}
        str_4 = 'allclose'
        var_0 = module_0.diff_dataset_repr(dict_0, set_0, str_4)
    except BaseException:
        pass


def test_case_30():
    try:
        bool_0 = False
        list_0 = []
        str_0 = '%('
        int_0 = -1913
        var_0 = module_0.limit_lines(str_0, limit=int_0)
        assert var_0 == '...'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        list_1 = [list_0, bool_0]
        var_1 = module_0.diff_array_repr(list_0, list_1, str_0)
    except BaseException:
        pass


def test_case_31():
    try:
        dict_0 = {}
        var_0 = module_0.coords_repr(dict_0)
        assert var_0 == 'Coordinates:\n    *empty*'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        int_0 = 1215
        hashable_0 = None
        str_0 = "pG!m\x0cf/hx9r'ssF%"
        str_1 = "'rW=0c"
        var_1 = module_0.summarize_variable(hashable_0, str_0, int_0, str_1, int_0)
    except BaseException:
        pass


def test_case_32():
    try:
        str_0 = 'Uk}wq]a(N=1.b'
        var_0 = module_0.coords_repr(str_0, str_0)
    except BaseException:
        pass


def test_case_33():
    try:
        str_0 = "'<RTDD[E;uj"
        str_1 = None
        str_2 = 'L5wB)N\\r'
        str_3 = "'>Bb"
        dict_0 = {str_1: str_1, str_1: str_1, str_2: str_1, str_3: str_0}
        dict_1 = {str_0: dict_0}
        bool_0 = False
        var_0 = module_0.first_n_items(dict_1, bool_0)
    except BaseException:
        pass


def test_case_34():
    try:
        float_0 = 0.9
        var_0 = module_0.format_timestamp(float_0)
        assert var_0 == '1970-01-01'
        assert module_0.EMPTY_REPR == '    *empty*'
        bytes_0 = b'\x8b\x8e\x1c'
        var_1 = module_0.array_repr(bytes_0)
    except BaseException:
        pass


def test_case_35():
    try:
        timedelta64_0 = module_1.timedelta64()
        int_0 = 2017
        var_0 = module_0.format_timestamp(int_0)
        assert var_0 == '1970-01-01T00:00:00.000002017'
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.format_array_flat(timedelta64_0, int_0)
        assert var_1 == '00:00:00'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        var_2 = module_0.inline_dask_repr(var_1)
    except BaseException:
        pass


def test_case_36():
    try:
        datetime64_0 = module_1.datetime64()
        int_0 = -2396
        var_0 = module_0.format_array_flat(datetime64_0, int_0)
        assert var_0 == '...'
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        bool_0 = False
        var_1 = module_0.inline_dask_repr(bool_0)
    except BaseException:
        pass# Automatically generated by Pynguin.


def test_case_37():
    pass


def test_case_38():
    float_0 = -432.08
    var_0 = module_0.format_timedelta(float_0)
    assert var_0 == '-1 days +23:59:59.999999568'
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_39():
    bytes_0 = b't\xcc'
    var_0 = module_0.format_item(bytes_0)
    assert var_0 == "b't\\xcc'"
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_40():
    dict_0 = {}
    var_0 = module_0.coords_repr(dict_0)
    assert var_0 == 'Coordinates:\n    *empty*'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'
    list_0 = []
    var_1 = module_0.format_item(list_0)
    assert var_1 == '[]'


def test_case_41():
    dict_0 = {}
    var_0 = module_0.coords_repr(dict_0)
    assert var_0 == 'Coordinates:\n    *empty*'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_42():
    str_0 = '#e4ACs\\_m'
    list_0 = [str_0]
    var_0 = module_0.short_numpy_repr(list_0)
    assert var_0 == "array(['#e4ACs\\\\_m'], dtype='<U9')"
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_43():
    str_0 = 'Mu?tiIndex'
    int_0 = 1215
    bool_0 = None
    var_0 = module_0.pretty_print(bool_0, int_0)
    assert var_0 == 'None
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'
    var_1 = module_0.limit_lines(str_0, limit=int_0)
    assert var_1 == 'Mu?tiIndex'
    bool_1 = False
    var_2 = module_0.format_item(bool_1)
    assert var_2 == 'False'


def test_case_44():
    timedelta64_0 = module_1.timedelta64()
    int_0 = 2017
    var_0 = module_0.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '00:00:00'
    assert module_1.newaxis is None
    assert module_1.little_endian is True
    assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.CLIP == 0
    assert module_1.RAISE == 2
    assert module_1.WRAP == 1
    assert module_1.MAXDIMS == 32
    assert module_1.BUFSIZE == 8192
    assert module_1.ALLOW_THREADS == 1
    assert module_1.MAY_SHARE_BOUNDS == 0
    assert module_1.MAY_SHARE_EXACT == -1
    assert module_1.ERR_CALL == 3
    assert module_1.ERR_DEFAULT == 521
    assert module_1.ERR_IGNORE == 0
    assert module_1.ERR_LOG == 5
    assert module_1.ERR_PRINT == 4
    assert module_1.ERR_RAISE == 2
    assert module_1.ERR_WARN == 1
    assert module_1.FLOATING_POINT_SUPPORT == 1
    assert module_1.FPE_DIVIDEBYZERO == 1
    assert module_1.FPE_INVALID == 8
    assert module_1.FPE_OVERFLOW == 2
    assert module_1.FPE_UNDERFLOW == 4
    assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_1.SHIFT_DIVIDEBYZERO == 0
    assert module_1.SHIFT_INVALID == 9
    assert module_1.SHIFT_OVERFLOW == 3
    assert module_1.SHIFT_UNDERFLOW == 6
    assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_1.sctypeDict) == 136
    assert len(module_1.sctypes) == 5
    assert len(module_1.ScalarType) == 31
    assert len(module_1.cast) == 24
    assert len(module_1.nbytes) == 24
    assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_1.tracemalloc_domain == 389047
    assert module_1.mgrid.sparse is False
    assert module_1.ogrid.sparse is True
    assert len(module_1.r_) == 0
    assert len(module_1.c_) == 0
    assert module_1.s_.maketuple is False
    assert module_1.index_exp.maketuple is True
    assert module_1.oldnumeric == 'removed'
    assert module_1.numarray == 'removed'
    assert module_1.use_hugepage == 1
    assert module_1.kernel_version == (6, 8)
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_45():
    datetime_0 = None
    var_0 = module_0.format_timedelta(datetime_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_46():
    list_0 = None
    var_0 = module_0.format_timestamp(list_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_47():
    str_0 = 'allclose'
    int_0 = None
    var_0 = module_0.format_timedelta(int_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'
    float_0 = -870.5
    var_1 = module_0.format_item(float_0, str_0)
    assert var_1 == '-870.5'
    int_1 = -1538
    var_2 = module_0.limit_lines(str_0, limit=int_1)
    assert var_2 == '...'
    bytes_0 = b'\xee\xcc'
    set_0 = {bytes_0, bytes_0}
    var_3 = module_0.short_numpy_repr(set_0)
    assert var_3 == "array({b'\\xee\\xcc'}, dtype=object)"


def test_case_48():
    int_0 = 5
    int_1 = 3
    timedelta_0 = module_2.timedelta()
    var_0 = module_0.format_item(timedelta_0)
    assert var_0 == '5 days 03:00:00'
    assert var_0 == '0 days 00:00:00'
    assert module_2.MINYEAR == 1
    assert module_2.MAXYEAR == 9999
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'
    str_0 = 'date'
    var_1 = module_0.format_item(timedelta_0, str_0)
    assert var_1 == '5 days'
    assert var_1 == '0 days'
    str_1 = 'time'
    var_2 = module_0.format_item(timedelta_0, str_1)
    assert var_2 == '03:00:00'
    assert var_2 == '00:00:00'


def test_case_49():
    timedelta64_0 = module_1.timedelta64()
    int_0 = -1550
    var_0 = module_0.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '...'
    assert module_1.newaxis is None
    assert module_1.little_endian is True
    assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.CLIP == 0
    assert module_1.RAISE == 2
    assert module_1.WRAP == 1
    assert module_1.MAXDIMS == 32
    assert module_1.BUFSIZE == 8192
    assert module_1.ALLOW_THREADS == 1
    assert module_1.MAY_SHARE_BOUNDS == 0
    assert module_1.MAY_SHARE_EXACT == -1
    assert module_1.ERR_CALL == 3
    assert module_1.ERR_DEFAULT == 521
    assert module_1.ERR_IGNORE == 0
    assert module_1.ERR_LOG == 5
    assert module_1.ERR_PRINT == 4
    assert module_1.ERR_RAISE == 2
    assert module_1.ERR_WARN == 1
    assert module_1.FLOATING_POINT_SUPPORT == 1
    assert module_1.FPE_DIVIDEBYZERO == 1
    assert module_1.FPE_INVALID == 8
    assert module_1.FPE_OVERFLOW == 2
    assert module_1.FPE_UNDERFLOW == 4
    assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_1.SHIFT_DIVIDEBYZERO == 0
    assert module_1.SHIFT_INVALID == 9
    assert module_1.SHIFT_OVERFLOW == 3
    assert module_1.SHIFT_UNDERFLOW == 6
    assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_1.sctypeDict) == 136
    assert len(module_1.sctypes) == 5
    assert len(module_1.ScalarType) == 31
    assert len(module_1.cast) == 24
    assert len(module_1.nbytes) == 24
    assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_1.tracemalloc_domain == 389047
    assert module_1.mgrid.sparse is False
    assert module_1.ogrid.sparse is True
    assert len(module_1.r_) == 0
    assert len(module_1.c_) == 0
    assert module_1.s_.maketuple is False
    assert module_1.index_exp.maketuple is True
    assert module_1.oldnumeric == 'removed'
    assert module_1.numarray == 'removed'
    assert module_1.use_hugepage == 1
    assert module_1.kernel_version == (6, 8)
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_50():
    datetime64_0 = module_1.datetime64()
    timedelta64_0 = module_1.timedelta64()
    var_0 = module_0.last_item(timedelta64_0)
    assert var_0 == [0]
    assert module_1.newaxis is None
    assert module_1.little_endian is True
    assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.CLIP == 0
    assert module_1.RAISE == 2
    assert module_1.WRAP == 1
    assert module_1.MAXDIMS == 32
    assert module_1.BUFSIZE == 8192
    assert module_1.ALLOW_THREADS == 1
    assert module_1.MAY_SHARE_BOUNDS == 0
    assert module_1.MAY_SHARE_EXACT == -1
    assert module_1.ERR_CALL == 3
    assert module_1.ERR_DEFAULT == 521
    assert module_1.ERR_IGNORE == 0
    assert module_1.ERR_LOG == 5
    assert module_1.ERR_PRINT == 4
    assert module_1.ERR_RAISE == 2
    assert module_1.ERR_WARN == 1
    assert module_1.FLOATING_POINT_SUPPORT == 1
    assert module_1.FPE_DIVIDEBYZERO == 1
    assert module_1.FPE_INVALID == 8
    assert module_1.FPE_OVERFLOW == 2
    assert module_1.FPE_UNDERFLOW == 4
    assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_1.SHIFT_DIVIDEBYZERO == 0
    assert module_1.SHIFT_INVALID == 9
    assert module_1.SHIFT_OVERFLOW == 3
    assert module_1.SHIFT_UNDERFLOW == 6
    assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_1.sctypeDict) == 136
    assert len(module_1.sctypes) == 5
    assert len(module_1.ScalarType) == 31
    assert len(module_1.cast) == 24
    assert len(module_1.nbytes) == 24
    assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_1.tracemalloc_domain == 389047
    assert module_1.mgrid.sparse is False
    assert module_1.ogrid.sparse is True
    assert len(module_1.r_) == 0
    assert len(module_1.c_) == 0
    assert module_1.s_.maketuple is False
    assert module_1.index_exp.maketuple is True
    assert module_1.oldnumeric == 'removed'
    assert module_1.numarray == 'removed'
    assert module_1.use_hugepage == 1
    assert module_1.kernel_version == (6, 8)
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'

Coverage: 51.16883116883117
Mutation Score: 2.010000000000005

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from xarray.core import formatting
from xarray.core.options import OPTIONS

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 2) == "te"

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 2) == "te..."

def test_wrap_indent():
    text = "This is a test\nwith multiple lines"
    expected = ">>This is a test\n  with multiple lines"
    assert formatting.wrap_indent(text, start=">>", length=2) == expected

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]
    with pytest.raises(ValueError):
        formatting.first_n_items(array, 0)

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]
    assert formatting.last_n_items(array, 0) == []

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]
    assert formatting.last_item(np.array([])) == []

def test_format_timestamp():
    t = pd.Timestamp("2023-01-01")
    assert formatting.format_timestamp(t) == "2023-01-01"
    t = pd.Timestamp("2023-01-01 12:00:00")
    assert formatting.format_timestamp(t) == "2023-01-01T12:00:00"

def test_format_timedelta():
    t = pd.Timedelta(days=1, hours=2)
    assert formatting.format_timedelta(t) == "1 days 02:00:00"
    assert formatting.format_timedelta(t, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(t, timedelta_format="time") == "02:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2023-01-01')) == "2023-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item(3.14159) == "3.142"
    assert formatting.format_item("test") == "'test'"

def test_format_items():
    items = [np.datetime64('2023-01-01'), timedelta(days=1), 3.14159, "test"]
    expected = ["2023-01-01", "1 days 00:00:00", "3.142", "'test'"]
    assert formatting.format_items(items) == expected

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.format_array_flat(array, 10) == "1 2 3 4 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((2, 2),)
        _meta = np.ndarray(0)

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(2,), meta=np.ndarray>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 5
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=5, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.int32
        _in_memory = True
        def __getitem__(self, key):
            return np.array([1, 2, 3, 4, 5])

    var = MockVariable()
    summary = formatting.summarize_variable("var", var, 10)
    assert "var" in summary
    assert "int32" in summary

def test_summarize_attr():
    assert formatting.summarize_attr("key", "value", 10) == "    key: value"

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    limited = formatting.limit_lines(string, limit=3)
    assert limited == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    repr_str = formatting.short_numpy_repr(array)
    assert "1.123457" in repr_str
    assert "2.987654" in repr_str

def test_short_data_repr():
    array = np.array([1, 2, 3])
    repr_str = formatting.short_data_repr(array)
    assert "array" in repr_str

def test_array_repr():
    class MockArray:
        name = "test"
        dims = ('x',)
        coords = {}
        attrs = {}
        data = np.array([1, 2, 3])
        _in_memory = True

    arr = MockArray()
    repr_str = formatting.array_repr(arr)
    assert "test" in repr_str
    assert "array" in repr_str

def test_dataset_repr():
    class MockDataset:
        dims = {'x': 5}
        coords = {}
        data_vars = {}
        attrs = {}

    ds = MockDataset()
    repr_str = formatting.dataset_repr(ds)
    assert "x: 5" in repr_str

Coverage: 36.883116883116884
Mutation Score: 24.010000000000005

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from xarray.core import formatting
from xarray.core.options import OPTIONS

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 2) == "tes..."

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 2) == "tes..."

def test_wrap_indent():
    text = "This is a test\nwith multiple lines"
    expected = ">>This is a test\n  with multiple lines"
    assert formatting.wrap_indent(text, start=">>", length=2) == expected

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]
    with pytest.raises(ValueError):
        formatting.first_n_items(array, 0)

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]
    assert formatting.last_n_items(array, 0) == []

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]
    assert formatting.last_item(np.array([])) == []

def test_format_timestamp():
    t = pd.Timestamp("2023-01-01")
    assert formatting.format_timestamp(t) == "2023-01-01"
    t = pd.Timestamp("2023-01-01 12:00:00")
    assert formatting.format_timestamp(t) == "2023-01-01T12:00:00"

def test_format_timedelta():
    t = pd.Timedelta(days=1, hours=2)
    assert formatting.format_timedelta(t) == "1 days 02:00:00"
    assert formatting.format_timedelta(t, timedelta_format="date") == "1 days"
    assert formatting.format_timedelta(t, timedelta_format="time") == "02:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2023-01-01')) == "2023-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item(3.14159) == "3.142"
    assert formatting.format_item("test") == "'test'"

def test_format_items():
    items = [np.datetime64('2023-01-01'), timedelta(days=1), 3.14159, "test"]
    expected = ["2023-01-01", "1 days 00:00:00", "3.142", "'test'"]
    assert formatting.format_items(items) == expected

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.format_array_flat(array, 10) == "1 2 3 4 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((2, 2),)
        _meta = np.ndarray(0)
        def __init__(self):
            self._meta = np.ndarray(0)

    array = MockDaskArray()
    with pytest.raises(AssertionError):
        formatting.inline_dask_repr(array)

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 5
        fill_value = 0
        def __init__(self):
            self.nnz = 5
            self.fill_value = 0

    array = MockSparseArray()
    with pytest.raises(AssertionError):
        formatting.inline_sparse_repr(array)

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.int32
        _in_memory = True
        size = 5
        shape = (5,)
        def __getitem__(self, key):
            return np.array([1, 2, 3, 4, 5])

    var = MockVariable()
    summary = formatting.summarize_variable("var", var, 10)
    assert "var" in summary
    assert "int32" in summary

def test_summarize_attr():
    assert formatting.summarize_attr("key", "value", 10) == "    key:   value"

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    limited = formatting.limit_lines(string, limit=3)
    assert limited == "line1\n...\nline4\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    repr_str = formatting.short_numpy_repr(array)
    assert "1.123457" in repr_str
    assert "2.987654" in repr_str

def test_short_data_repr():
    array = np.array([1, 2, 3])
    repr_str = formatting.short_data_repr(array)
    assert "array" in repr_str

def test_array_repr():
    class MockArray:
        name = "test"
        dims = ('x',)
        coords = {}
        attrs = {}
        _data = np.array([1, 2, 3])
        _in_memory = True

    arr = MockArray()
    repr_str = formatting.array_repr(arr)
    assert "test" in repr_str
    assert "array" in repr_str

def test_dataset_repr():
    class MockDataset:
        dims = {'x': 5}
        coords = {}
        sizes = {'x': 5}
        variables = {}
        data_vars = {}
        attrs = {}

    ds = MockDataset()
    repr_str = formatting.dataset_repr(ds)
    assert "x: 5" in repr_str
Coverage: 52.72727272727273
Mutation Score: 39.97
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_formatting.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 4e77576adf1de2b1af34963543aa9c7c19dc5aa0
Author: TestGenEval <>
Date:   Wed Dec 11 12:38:22 2024 +0000

    Testing fixes

diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py
index 13f38820..31a1b777 100644
--- a/xarray/core/formatting.py
+++ b/xarray/core/formatting.py
@@ -11,7 +11,7 @@ import pandas as pd
 from pandas.errors import OutOfBoundsDatetime

 from .duck_array_ops import array_equiv
-from .options import OPTIONS
+from .options import OPTIONS, _get_boolean_with_default
 from .pycompat import dask_array_type, sparse_array_type
 from .utils import is_duck_array

@@ -371,7 +371,9 @@ def _calculate_col_width(col_items):
     return col_width


-def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):
+def _mapping_repr(
+    mapping, title, summarizer, expand_option_name, col_width=None, max_rows=None
+):
     if col_width is None:
         col_width = _calculate_col_width(mapping)
     if max_rows is None:
@@ -379,7 +381,9 @@ def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):
     summary = [f"{title}:"]
     if mapping:
         len_mapping = len(mapping)
-        if len_mapping > max_rows:
+        if not _get_boolean_with_default(expand_option_name, default=True):
+            summary = [f"{summary[0]} ({len_mapping})"]
+        elif len_mapping > max_rows:
             summary = [f"{summary[0]} ({max_rows}/{len_mapping})"]
             first_rows = max_rows // 2 + max_rows % 2
             items = list(mapping.items())
@@ -396,12 +400,18 @@ def _mapping_repr(mapping, title, summarizer, col_width=None, max_rows=None):


 data_vars_repr = functools.partial(
-    _mapping_repr, title="Data variables", summarizer=summarize_datavar
+    _mapping_repr,
+    title="Data variables",
+    summarizer=summarize_datavar,
+    expand_option_name="display_expand_data_vars",
 )


 attrs_repr = functools.partial(
-    _mapping_repr, title="Attributes", summarizer=summarize_attr
+    _mapping_repr,
+    title="Attributes",
+    summarizer=summarize_attr,
+    expand_option_name="display_expand_attrs",
 )


@@ -409,7 +419,11 @@ def coords_repr(coords, col_width=None):
     if col_width is None:
         col_width = _calculate_col_width(_get_col_items(coords))
     return _mapping_repr(
-        coords, title="Coordinates", summarizer=summarize_coord, col_width=col_width
+        coords,
+        title="Coordinates",
+        summarizer=summarize_coord,
+        expand_option_name="display_expand_coords",
+        col_width=col_width,
     )


@@ -493,9 +507,14 @@ def array_repr(arr):
     else:
         name_str = ""

+    if _get_boolean_with_default("display_expand_data", default=True):
+        data_repr = short_data_repr(arr)
+    else:
+        data_repr = inline_variable_array_repr(arr, OPTIONS["display_width"])
+
     summary = [
         "<xarray.{} {}({})>".format(type(arr).__name__, name_str, dim_summary(arr)),
-        short_data_repr(arr),
+        data_repr,
     ]

     if hasattr(arr, "coords"):
diff --git a/xarray/core/formatting_html.py b/xarray/core/formatting_html.py
index 3392aef8..9730a0a1 100644
--- a/xarray/core/formatting_html.py
+++ b/xarray/core/formatting_html.py
@@ -6,6 +6,7 @@ from html import escape
 import pkg_resources

 from .formatting import inline_variable_array_repr, short_data_repr
+from .options import _get_boolean_with_default

 STATIC_FILES = ("static/html/icons-svg-inline.html", "static/css/style.css")

@@ -164,9 +165,14 @@ def collapsible_section(
     )


-def _mapping_section(mapping, name, details_func, max_items_collapse, enabled=True):
+def _mapping_section(
+    mapping, name, details_func, max_items_collapse, expand_option_name, enabled=True
+):
     n_items = len(mapping)
-    collapsed = n_items >= max_items_collapse
+    expanded = _get_boolean_with_default(
+        expand_option_name, n_items < max_items_collapse
+    )
+    collapsed = not expanded

     return collapsible_section(
         name,
@@ -188,7 +194,11 @@ def dim_section(obj):
 def array_section(obj):
     # "unique" id to expand/collapse the section
     data_id = "section-" + str(uuid.uuid4())
-    collapsed = "checked"
+    collapsed = (
+        "checked"
+        if _get_boolean_with_default("display_expand_data", default=True)
+        else ""
+    )
     variable = getattr(obj, "variable", obj)
     preview = escape(inline_variable_array_repr(variable, max_width=70))
     data_repr = short_data_repr_html(obj)
@@ -209,6 +219,7 @@ coord_section = partial(
     name="Coordinates",
     details_func=summarize_coords,
     max_items_collapse=25,
+    expand_option_name="display_expand_coords",
 )


@@ -217,6 +228,7 @@ datavar_section = partial(
     name="Data variables",
     details_func=summarize_vars,
     max_items_collapse=15,
+    expand_option_name="display_expand_data_vars",
 )


@@ -225,6 +237,7 @@ attr_section = partial(
     name="Attributes",
     details_func=summarize_attrs,
     max_items_collapse=10,
+    expand_option_name="display_expand_attrs",
 )


diff --git a/xarray/core/options.py b/xarray/core/options.py
index 12969890..d53c9d5d 100644
--- a/xarray/core/options.py
+++ b/xarray/core/options.py
@@ -6,6 +6,10 @@ CMAP_SEQUENTIAL = "cmap_sequential"
 DISPLAY_MAX_ROWS = "display_max_rows"
 DISPLAY_STYLE = "display_style"
 DISPLAY_WIDTH = "display_width"
+DISPLAY_EXPAND_ATTRS = "display_expand_attrs"
+DISPLAY_EXPAND_COORDS = "display_expand_coords"
+DISPLAY_EXPAND_DATA_VARS = "display_expand_data_vars"
+DISPLAY_EXPAND_DATA = "display_expand_data"
 ENABLE_CFTIMEINDEX = "enable_cftimeindex"
 FILE_CACHE_MAXSIZE = "file_cache_maxsize"
 KEEP_ATTRS = "keep_attrs"
@@ -19,6 +23,10 @@ OPTIONS = {
     DISPLAY_MAX_ROWS: 12,
     DISPLAY_STYLE: "html",
     DISPLAY_WIDTH: 80,
+    DISPLAY_EXPAND_ATTRS: "default",
+    DISPLAY_EXPAND_COORDS: "default",
+    DISPLAY_EXPAND_DATA_VARS: "default",
+    DISPLAY_EXPAND_DATA: "default",
     ENABLE_CFTIMEINDEX: True,
     FILE_CACHE_MAXSIZE: 128,
     KEEP_ATTRS: "default",
@@ -38,6 +46,10 @@ _VALIDATORS = {
     DISPLAY_MAX_ROWS: _positive_integer,
     DISPLAY_STYLE: _DISPLAY_OPTIONS.__contains__,
     DISPLAY_WIDTH: _positive_integer,
+    DISPLAY_EXPAND_ATTRS: lambda choice: choice in [True, False, "default"],
+    DISPLAY_EXPAND_COORDS: lambda choice: choice in [True, False, "default"],
+    DISPLAY_EXPAND_DATA_VARS: lambda choice: choice in [True, False, "default"],
+    DISPLAY_EXPAND_DATA: lambda choice: choice in [True, False, "default"],
     ENABLE_CFTIMEINDEX: lambda value: isinstance(value, bool),
     FILE_CACHE_MAXSIZE: _positive_integer,
     KEEP_ATTRS: lambda choice: choice in [True, False, "default"],
@@ -65,8 +77,8 @@ _SETTERS = {
 }


-def _get_keep_attrs(default):
-    global_choice = OPTIONS["keep_attrs"]
+def _get_boolean_with_default(option, default):
+    global_choice = OPTIONS[option]

     if global_choice == "default":
         return default
@@ -74,10 +86,14 @@ def _get_keep_attrs(default):
         return global_choice
     else:
         raise ValueError(
-            "The global option keep_attrs must be one of True, False or 'default'."
+            f"The global option {option} must be one of True, False or 'default'."
         )


+def _get_keep_attrs(default):
+    return _get_boolean_with_default("keep_attrs", default)
+
+
 class set_options:
     """Set options for xarray in a controlled context.

@@ -108,6 +124,22 @@ class set_options:
       Default: ``'default'``.
     - ``display_style``: display style to use in jupyter for xarray objects.
       Default: ``'text'``. Other options are ``'html'``.
+    - ``display_expand_attrs``: whether to expand the attributes section for
+      display of ``DataArray`` or ``Dataset`` objects. Can be ``True`` to always
+      expand, ``False`` to always collapse, or ``default`` to expand unless over
+      a pre-defined limit. Default: ``default``.
+    - ``display_expand_coords``: whether to expand the coordinates section for
+      display of ``DataArray`` or ``Dataset`` objects. Can be ``True`` to always
+      expand, ``False`` to always collapse, or ``default`` to expand unless over
+      a pre-defined limit. Default: ``default``.
+    - ``display_expand_data``: whether to expand the data section for display
+      of ``DataArray`` objects. Can be ``True`` to always expand, ``False`` to
+      always collapse, or ``default`` to expand unless over a pre-defined limit.
+      Default: ``default``.
+    - ``display_expand_data_vars``: whether to expand the data variables section
+      for display of ``Dataset`` objects. Can be ``True`` to always
+      expand, ``False`` to always collapse, or ``default`` to expand unless over
+      a pre-defined limit. Default: ``default``.


     You can use ``set_options`` either as a context manager:
diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py
deleted file mode 100644
index 1098587d..00000000
--- a/xarray/tests/test_formatting.py
+++ /dev/null
@@ -1,494 +0,0 @@
-import sys
-from textwrap import dedent
-
-import numpy as np
-import pandas as pd
-import pytest
-
-import xarray as xr
-from xarray.core import formatting
-
-
-class TestFormatting:
-    def test_get_indexer_at_least_n_items(self):
-        cases = [
-            ((20,), (slice(10),), (slice(-10, None),)),
-            ((3, 20), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 10), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 5), (slice(2), slice(None)), (slice(-2, None), slice(None))),
-            ((1, 2, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            ((2, 3, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            (
-                (1, 10, 1),
-                (0, slice(10), slice(None)),
-                (-1, slice(-10, None), slice(None)),
-            ),
-            (
-                (2, 5, 1),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-            ((2, 5, 3), (0, slice(4), slice(None)), (-1, slice(-4, None), slice(None))),
-            (
-                (2, 3, 3),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-        ]
-        for shape, start_expected, end_expected in cases:
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=False)
-            assert start_expected == actual
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=True)
-            assert end_expected == actual
-
-    def test_first_n_items(self):
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.first_n_items(array, n)
-            expected = array.flat[:n]
-            assert (expected == actual).all()
-
-        with pytest.raises(ValueError, match=r"at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_n_items(self):
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.last_n_items(array, n)
-            expected = array.flat[-n:]
-            assert (expected == actual).all()
-
-        with pytest.raises(ValueError, match=r"at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_item(self):
-        array = np.arange(100)
-
-        reshape = ((10, 10), (1, 100), (2, 2, 5, 5))
-        expected = np.array([99])
-
-        for r in reshape:
-            result = formatting.last_item(array.reshape(r))
-            assert result == expected
-
-    def test_format_item(self):
-        cases = [
-            (pd.Timestamp("2000-01-01T12"), "2000-01-01T12:00:00"),
-            (pd.Timestamp("2000-01-01"), "2000-01-01"),
-            (pd.Timestamp("NaT"), "NaT"),
-            (pd.Timedelta("10 days 1 hour"), "10 days 01:00:00"),
-            (pd.Timedelta("-3 days"), "-3 days +00:00:00"),
-            (pd.Timedelta("3 hours"), "0 days 03:00:00"),
-            (pd.Timedelta("NaT"), "NaT"),
-            ("foo", "'foo'"),
-            (b"foo", "b'foo'"),
-            (1, "1"),
-            (1.0, "1.0"),
-            (np.float16(1.1234), "1.123"),
-            (np.float32(1.0111111), "1.011"),
-            (np.float64(22.222222), "22.22"),
-        ]
-        for item, expected in cases:
-            actual = formatting.format_item(item)
-            assert expected == actual
-
-    def test_format_items(self):
-        cases = [
-            (np.arange(4) * np.timedelta64(1, "D"), "0 days 1 days 2 days 3 days"),
-            (
-                np.arange(4) * np.timedelta64(3, "h"),
-                "00:00:00 03:00:00 06:00:00 09:00:00",
-            ),
-            (
-                np.arange(4) * np.timedelta64(500, "ms"),
-                "00:00:00 00:00:00.500000 00:00:01 00:00:01.500000",
-            ),
-            (pd.to_timedelta(["NaT", "0s", "1s", "NaT"]), "NaT 00:00:00 00:00:01 NaT"),
-            (
-                pd.to_timedelta(["1 day 1 hour", "1 day", "0 hours"]),
-                "1 days 01:00:00 1 days 00:00:00 0 days 00:00:00",
-            ),
-            ([1, 2, 3], "1 2 3"),
-        ]
-        for item, expected in cases:
-            actual = " ".join(formatting.format_items(item))
-            assert expected == actual
-
-    def test_format_array_flat(self):
-        actual = formatting.format_array_flat(np.arange(100), 2)
-        expected = "..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 9)
-        expected = "0 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 10)
-        expected = "0 1 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 13)
-        expected = "0 1 ... 98 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 15)
-        expected = "0 1 2 ... 98 99"
-        assert expected == actual
-
-        # NB: Probably not ideal; an alternative would be cutting after the
-        # first ellipsis
-        actual = formatting.format_array_flat(np.arange(100.0), 11)
-        expected = "0.0 ... ..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100.0), 12)
-        expected = "0.0 ... 99.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(3), 5)
-        expected = "0 1 2"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4.0), 11)
-        expected = "0.0 ... 3.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(0), 0)
-        expected = ""
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(1), 1)
-        expected = "0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(2), 3)
-        expected = "0 1"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4), 7)
-        expected = "0 1 2 3"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(5), 7)
-        expected = "0 ... 4"
-        assert expected == actual
-
-        long_str = [" ".join(["hello world" for _ in range(100)])]
-        actual = formatting.format_array_flat(np.asarray([long_str]), 21)
-        expected = "'hello world hello..."
-        assert expected == actual
-
-    def test_pretty_print(self):
-        assert formatting.pretty_print("abcdefghij", 8) == "abcde..."
-        assert formatting.pretty_print("ß", 1) == "ß"
-
-    def test_maybe_truncate(self):
-        assert formatting.maybe_truncate("ß", 10) == "ß"
-
-    def test_format_timestamp_out_of_bounds(self):
-        from datetime import datetime
-
-        date = datetime(1300, 12, 1)
-        expected = "1300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-        date = datetime(2300, 12, 1)
-        expected = "2300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-    def test_attribute_repr(self):
-        short = formatting.summarize_attr("key", "Short string")
-        long = formatting.summarize_attr("key", 100 * "Very long string ")
-        newlines = formatting.summarize_attr("key", "\n\n\n")
-        tabs = formatting.summarize_attr("key", "\t\t\t")
-        assert short == "    key: Short string"
-        assert len(long) <= 80
-        assert long.endswith("...")
-        assert "\n" not in newlines
-        assert "\t" not in tabs
-
-    def test_diff_array_repr(self):
-        da_a = xr.DataArray(
-            np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"),
-            dims=("x", "y"),
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        da_b = xr.DataArray(
-            np.array([1, 2], dtype="int64"),
-            dims="x",
-            coords={
-                "x": np.array(["a", "c"], dtype="U1"),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right DataArray objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing values:
-        L
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)
-        R
-            array([1, 2], dtype=int64)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_array_repr(da_a, da_b, "identical")
-        try:
-            assert actual == expected
-        except AssertionError:
-            # depending on platform, dtype may not be shown in numpy array repr
-            assert actual == expected.replace(", dtype=int64", "")
-
-        va = xr.Variable(
-            "x", np.array([1, 2, 3], dtype="int64"), {"title": "test Variable"}
-        )
-        vb = xr.Variable(("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"))
-
-        expected = dedent(
-            """\
-        Left and right Variable objects are not equal
-        Differing dimensions:
-            (x: 3) != (x: 2, y: 3)
-        Differing values:
-        L
-            array([1, 2, 3], dtype=int64)
-        R
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)"""
-        )
-
-        actual = formatting.diff_array_repr(va, vb, "equals")
-        try:
-            assert actual == expected
-        except AssertionError:
-            assert actual == expected.replace(", dtype=int64", "")
-
-    @pytest.mark.filterwarnings("error")
-    def test_diff_attrs_repr_with_array(self):
-        attrs_a = {"attr": np.array([0, 1])}
-
-        attrs_b = {"attr": 1}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: 1
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-        attrs_b = {"attr": np.array([-3, 5])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [-3  5]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-        # should not raise a warning
-        attrs_b = {"attr": np.array([0, 1, 2])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [0 1 2]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-    def test_diff_dataset_repr(self):
-        ds_a = xr.Dataset(
-            data_vars={
-                "var1": (("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64")),
-                "var2": ("x", np.array([3, 4], dtype="int64")),
-            },
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        ds_b = xr.Dataset(
-            data_vars={"var1": ("x", np.array([1, 2], dtype="int64"))},
-            coords={
-                "x": ("x", np.array(["a", "c"], dtype="U1"), {"source": 0}),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right Dataset objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-            source: 0
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing data variables:
-        L   var1     (x, y) int64 1 2 3 4 5 6
-        R   var1     (x) int64 1 2
-        Data variables only on the left object:
-            var2     (x) int64 3 4
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_dataset_repr(ds_a, ds_b, "identical")
-        assert actual == expected
-
-    def test_array_repr(self):
-        ds = xr.Dataset(coords={"foo": [1, 2, 3], "bar": [1, 2, 3]})
-        ds[(1, 2)] = xr.DataArray([0], dims="test")
-        actual = formatting.array_repr(ds[(1, 2)])
-        expected = dedent(
-            """\
-        <xarray.DataArray (1, 2) (test: 1)>
-        array([0])
-        Dimensions without coordinates: test"""
-        )
-
-        assert actual == expected
-
-
-def test_inline_variable_array_repr_custom_repr():
-    class CustomArray:
-        def __init__(self, value, attr):
-            self.value = value
-            self.attr = attr
-
-        def _repr_inline_(self, width):
-            formatted = f"({self.attr}) {self.value}"
-            if len(formatted) > width:
-                formatted = f"({self.attr}) ..."
-
-            return formatted
-
-        def __array_function__(self, *args, **kwargs):
-            return NotImplemented
-
-        @property
-        def shape(self):
-            return self.value.shape
-
-        @property
-        def dtype(self):
-            return self.value.dtype
-
-        @property
-        def ndim(self):
-            return self.value.ndim
-
-    value = CustomArray(np.array([20, 40]), "m")
-    variable = xr.Variable("x", value)
-
-    max_width = 10
-    actual = formatting.inline_variable_array_repr(variable, max_width=10)
-
-    assert actual == value._repr_inline_(max_width)
-
-
-def test_set_numpy_options():
-    original_options = np.get_printoptions()
-    with formatting.set_numpy_options(threshold=10):
-        assert len(repr(np.arange(500))) < 200
-    # original options are restored
-    assert np.get_printoptions() == original_options
-
-
-def test_short_numpy_repr():
-    cases = [
-        np.random.randn(500),
-        np.random.randn(20, 20),
-        np.random.randn(5, 10, 15),
-        np.random.randn(5, 10, 15, 3),
-        np.random.randn(100, 5, 1),
-    ]
-    # number of lines:
-    # for default numpy repr: 167, 140, 254, 248, 599
-    # for short_numpy_repr: 1, 7, 24, 19, 25
-    for array in cases:
-        num_lines = formatting.short_numpy_repr(array).count("\n") + 1
-        assert num_lines < 30
-
-
-def test_large_array_repr_length():
-
-    da = xr.DataArray(np.random.randn(100, 5, 1))
-
-    result = repr(da).splitlines()
-    assert len(result) < 50
-
-
-@pytest.mark.parametrize(
-    "display_max_rows, n_vars, n_attr",
-    [(50, 40, 30), (35, 40, 30), (11, 40, 30), (1, 40, 30)],
-)
-def test__mapping_repr(display_max_rows, n_vars, n_attr):
-    long_name = "long_name"
-    a = np.core.defchararray.add(long_name, np.arange(0, n_vars).astype(str))
-    b = np.core.defchararray.add("attr_", np.arange(0, n_attr).astype(str))
-    attrs = {k: 2 for k in b}
-    coords = dict(time=np.array([0, 1]))
-    data_vars = dict()
-    for v in a:
-        data_vars[v] = xr.DataArray(
-            name=v,
-            data=np.array([3, 4]),
-            dims=["time"],
-            coords=coords,
-        )
-    ds = xr.Dataset(data_vars)
-    ds.attrs = attrs
-
-    with xr.set_options(display_max_rows=display_max_rows):
-
-        # Parse the data_vars print and show only data_vars rows:
-        summary = formatting.data_vars_repr(ds.data_vars).split("\n")
-        summary = [v for v in summary if long_name in v]
-
-        # The length should be less than or equal to display_max_rows:
-        len_summary = len(summary)
-        data_vars_print_size = min(display_max_rows, len_summary)
-        assert len_summary == data_vars_print_size
diff --git a/xarray/tests/test_formatting_html.py b/xarray/tests/test_formatting_html.py
index 9a210ad6..4cf4509c 100644
--- a/xarray/tests/test_formatting_html.py
+++ b/xarray/tests/test_formatting_html.py
@@ -115,6 +115,17 @@ def test_repr_of_dataarray(dataarray):
         formatted.count("class='xr-section-summary-in' type='checkbox' disabled >") == 2
     )

+    with xr.set_options(display_expand_data=False):
+        formatted = fh.array_repr(dataarray)
+        assert "dim_0" in formatted
+        # has an expanded data section
+        assert formatted.count("class='xr-array-in' type='checkbox' checked>") == 0
+        # coords and attrs don't have an items so they'll be be disabled and collapsed
+        assert (
+            formatted.count("class='xr-section-summary-in' type='checkbox' disabled >")
+            == 2
+        )
+

 def test_summary_of_multiindex_coord(multiindex):
     idx = multiindex.x.variable.to_index_variable()
@@ -138,6 +149,20 @@ def test_repr_of_dataset(dataset):
     assert "&lt;U4" in formatted or "&gt;U4" in formatted
     assert "&lt;IA&gt;" in formatted

+    with xr.set_options(
+        display_expand_coords=False,
+        display_expand_data_vars=False,
+        display_expand_attrs=False,
+    ):
+        formatted = fh.dataset_repr(dataset)
+        # coords, attrs, and data_vars are collapsed
+        assert (
+            formatted.count("class='xr-section-summary-in' type='checkbox'  checked>")
+            == 0
+        )
+        assert "&lt;U4" in formatted or "&gt;U4" in formatted
+        assert "&lt;IA&gt;" in formatted
+

 def test_repr_text_fallback(dataset):
     formatted = fh.dataset_repr(dataset)
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.17.1.dev81+g4e77576a.d20250207) (1.23.0)
Requirement already satisfied: pandas>=1.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.17.1.dev81+g4e77576a.d20250207) (1.5.3)
Requirement already satisfied: setuptools>=40.4 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.17.1.dev81+g4e77576a.d20250207) (68.0.0)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.0->xarray==0.17.1.dev81+g4e77576a.d20250207) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.0->xarray==0.17.1.dev81+g4e77576a.d20250207) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=1.0->xarray==0.17.1.dev81+g4e77576a.d20250207) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-0.17.1.dev81+g4e77576a.d20250207-0.editable-py3-none-any.whl size=9077 sha256=e82d471b8ee8fe4b6825b2ef61615018a8c4536e7f5c77c9b14d60ac1913c157
  Stored in directory: /tmp/pip-ephem-wheel-cache-ioyjmuru/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.17.1.dev81+g4e77576a
    Uninstalling xarray-0.17.1.dev81+g4e77576a:
      Successfully uninstalled xarray-0.17.1.dev81+g4e77576a
Successfully installed xarray-0.17.1.dev81+g4e77576a.d20250207
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 18 items

xarray/tests/test_formatting.py ..................                       [100%]

=============================== warnings summary ===============================
xarray/__init__.py:1
  /testbed/xarray/__init__.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

xarray/core/dask_array_compat.py:61
xarray/core/dask_array_compat.py:61
  /testbed/xarray/core/dask_array_compat.py:61: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2.9.0"):

xarray/core/dask_array_compat.py:98
xarray/core/dask_array_compat.py:98
  /testbed/xarray/core/dask_array_compat.py:98: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2.30.0"):

xarray/core/dask_array_compat.py:155
xarray/core/dask_array_compat.py:155
  /testbed/xarray/core/dask_array_compat.py:155: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion("2021.03.0"):

xarray/core/npcompat.py:132
  /testbed/xarray/core/npcompat.py:132: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(np.__version__) >= "1.20.0":

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/core/pdcompat.py:45
  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < "0.25.0":

xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
  /testbed/xarray/tests/__init__.py:58: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    return version.LooseVersion(vstring)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_formatting.py::test_pretty_print
PASSED xarray/tests/test_formatting.py::test_maybe_truncate
PASSED xarray/tests/test_formatting.py::test_wrap_indent
PASSED xarray/tests/test_formatting.py::test_first_n_items
PASSED xarray/tests/test_formatting.py::test_last_n_items
PASSED xarray/tests/test_formatting.py::test_last_item
PASSED xarray/tests/test_formatting.py::test_format_timestamp
PASSED xarray/tests/test_formatting.py::test_format_timedelta
PASSED xarray/tests/test_formatting.py::test_format_item
PASSED xarray/tests/test_formatting.py::test_format_items
PASSED xarray/tests/test_formatting.py::test_format_array_flat
PASSED xarray/tests/test_formatting.py::test_inline_dask_repr
PASSED xarray/tests/test_formatting.py::test_inline_sparse_repr
PASSED xarray/tests/test_formatting.py::test_summarize_variable
PASSED xarray/tests/test_formatting.py::test_summarize_attr
PASSED xarray/tests/test_formatting.py::test_limit_lines
PASSED xarray/tests/test_formatting.py::test_short_numpy_repr
PASSED xarray/tests/test_formatting.py::test_dataset_repr
======================= 18 passed, 24 warnings in 3.67s ========================

