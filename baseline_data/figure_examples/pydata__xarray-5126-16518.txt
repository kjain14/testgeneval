Instance ID: pydata__xarray-5126-16518

Baseline 1:
Predicted Test Suite: # Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import xarray.core.formatting_html as module_0
import _locale as module_1
import email.message as module_2
import pkg_resources._vendor.more_itertools.more as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.format_dims(none_type_0, none_type_0)
    assert var_0 == ""
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.localeconv()
    var_1 = module_0.summarize_attrs(var_0)
    assert (
        var_1
        == "<dl class='xr-attrs'><dt><span>int_curr_symbol :</span></dt><dd>USD </dd><dt><span>currency_symbol :</span></dt><dd>$</dd><dt><span>mon_decimal_point :</span></dt><dd>.</dd><dt><span>mon_thousands_sep :</span></dt><dd>,</dd><dt><span>mon_grouping :</span></dt><dd>[3, 3, 0]</dd><dt><span>positive_sign :</span></dt><dd></dd><dt><span>negative_sign :</span></dt><dd>-</dd><dt><span>int_frac_digits :</span></dt><dd>2</dd><dt><span>frac_digits :</span></dt><dd>2</dd><dt><span>p_cs_precedes :</span></dt><dd>1</dd><dt><span>p_sep_by_space :</span></dt><dd>0</dd><dt><span>n_cs_precedes :</span></dt><dd>1</dd><dt><span>n_sep_by_space :</span></dt><dd>0</dd><dt><span>p_sign_posn :</span></dt><dd>1</dd><dt><span>n_sign_posn :</span></dt><dd>1</dd><dt><span>decimal_point :</span></dt><dd>.</dd><dt><span>thousands_sep :</span></dt><dd>,</dd><dt><span>grouping :</span></dt><dd>[3, 3, 0]</dd></dl>"
    )
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )
    var_1.__getstate__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.localeconv()
    module_0.summarize_variable(var_0, var_0, var_0, preview=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.summarize_variable(none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_4():
    none_type_0 = None
    var_0 = module_0.collapsible_section(none_type_0, details=none_type_0)
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )


def test_case_5():
    none_type_0 = None
    var_0 = module_0.collapsible_section(none_type_0, none_type_0, enabled=none_type_0)
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.array_section(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.short_data_repr_html(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.summarize_attrs(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.summarize_vars(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_0.dataset_repr(none_type_0)


def test_case_11():
    var_0 = module_1.localeconv()
    var_1 = module_0.format_dims(var_0, var_0)
    assert (
        var_1
        == "<ul class='xr-dim-list'><li><span class='xr-has-index'>int_curr_symbol</span>: USD </li><li><span class='xr-has-index'>currency_symbol</span>: $</li><li><span class='xr-has-index'>mon_decimal_point</span>: .</li><li><span class='xr-has-index'>mon_thousands_sep</span>: ,</li><li><span class='xr-has-index'>mon_grouping</span>: [3, 3, 0]</li><li><span class='xr-has-index'>positive_sign</span>: </li><li><span class='xr-has-index'>negative_sign</span>: -</li><li><span class='xr-has-index'>int_frac_digits</span>: 2</li><li><span class='xr-has-index'>frac_digits</span>: 2</li><li><span class='xr-has-index'>p_cs_precedes</span>: 1</li><li><span class='xr-has-index'>p_sep_by_space</span>: 0</li><li><span class='xr-has-index'>n_cs_precedes</span>: 1</li><li><span class='xr-has-index'>n_sep_by_space</span>: 0</li><li><span class='xr-has-index'>p_sign_posn</span>: 1</li><li><span class='xr-has-index'>n_sign_posn</span>: 1</li><li><span class='xr-has-index'>decimal_point</span>: .</li><li><span class='xr-has-index'>thousands_sep</span>: ,</li><li><span class='xr-has-index'>grouping</span>: [3, 3, 0]</li></ul>"
    )
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )


@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_1.localeconv()
    module_0.summarize_vars(var_0)


def test_case_13():
    var_0 = module_1.localeconv()
    var_1 = module_0.collapsible_section(var_0, var_0, var_0, var_0)
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )


def test_case_14():
    var_0 = module_1.localeconv()
    var_1 = var_0.clear()
    var_2 = module_0.summarize_coords(var_0)
    assert var_2 == "<ul class='xr-var-list'></ul>"
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )
    var_3 = module_0.collapsible_section(var_1, var_2, enabled=var_2, collapsed=var_2)


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_1.localeconv()
    module_0.summarize_coords(var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    message_0 = module_2.Message()
    var_0 = module_0.summarize_coords(message_0)
    assert var_0 == "<ul class='xr-var-list'></ul>"
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )
    module_0.summarize_vars(var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_1.localeconv()
    var_1 = module_3.longest_common_prefix(var_0)
    var_2 = module_0.format_dims(var_0, var_1)
    assert (
        var_2
        == "<ul class='xr-dim-list'><li><span>int_curr_symbol</span>: USD </li><li><span>currency_symbol</span>: $</li><li><span>mon_decimal_point</span>: .</li><li><span>mon_thousands_sep</span>: ,</li><li><span>mon_grouping</span>: [3, 3, 0]</li><li><span>positive_sign</span>: </li><li><span>negative_sign</span>: -</li><li><span>int_frac_digits</span>: 2</li><li><span>frac_digits</span>: 2</li><li><span>p_cs_precedes</span>: 1</li><li><span>p_sep_by_space</span>: 0</li><li><span>n_cs_precedes</span>: 1</li><li><span>n_sep_by_space</span>: 0</li><li><span>p_sign_posn</span>: 1</li><li><span>n_sign_posn</span>: 1</li><li><span>decimal_point</span>: .</li><li><span>thousands_sep</span>: ,</li><li><span>grouping</span>: [3, 3, 0]</li></ul>"
    )
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )
    var_1.get_filename()


def test_case_18():
    message_0 = module_2.Message()
    var_0 = module_0.summarize_vars(message_0)
    assert var_0 == "<ul class='xr-var-list'></ul>"
    assert module_0.STATIC_FILES == (
        "static/html/icons-svg-inline.html",
        "static/css/style.css",
    )

Coverage: -1
Mutation Score: -1

Baseline 2:
Predicted Test Suite: 
import unittest
from unittest.mock import MagicMock, patch
from xarray.core import formatting_html as fh
from collections import OrderedDict

class TestFormattingHTML(unittest.TestCase):

    def setUp(self):
        self.mock_array = MagicMock()
        self.mock_array.dims = ('x', 'y')
        self.mock_array.shape = (10, 20)
        self.mock_array.name = 'test_array'
        self.mock_array.coords = {'x': MagicMock(), 'y': MagicMock()}
        self.mock_array.attrs = {'attr1': 'value1', 'attr2': 'value2'}
        self.mock_array.variable = MagicMock()
        self.mock_array.variable._data = MagicMock()

        self.mock_dataset = MagicMock()
        self.mock_dataset.dims = {'x': 10, 'y': 20}
        self.mock_dataset.coords = {'x': MagicMock(), 'y': MagicMock()}
        self.mock_dataset.data_vars = {'var1': MagicMock(), 'var2': MagicMock()}
        self.mock_dataset.attrs = {'attr1': 'value1', 'attr2': 'value2'}

    @patch('xarray.core.formatting_html.pkg_resources.resource_string')
    def test_load_static_files(self, mock_resource_string):
        mock_resource_string.return_value = b"<svg></svg>"
        result = fh._load_static_files()
        self.assertEqual(len(result), 2)
        self.assertTrue(all(isinstance(r, str) for r in result))

    def test_short_data_repr_html(self):
        self.mock_array.variable._data._repr_html_ = MagicMock(return_value="<div>HTML</div>")
        result = fh.short_data_repr_html(self.mock_array)
        self.assertEqual(result, "<div>HTML</div>")

        del self.mock_array.variable._data._repr_html_
        with patch('xarray.core.formatting_html.short_data_repr', return_value='short_repr'):
            result = fh.short_data_repr_html(self.mock_array)
            self.assertEqual(result, "<pre>short_repr</pre>")

    def test_format_dims(self):
        dims = OrderedDict([('x', 10), ('y', 20)])
        coord_names = ['x']
        result = fh.format_dims(dims, coord_names)
        self.assertIn("class='xr-has-index'", result)
        self.assertIn("<li><span class='xr-has-index'>x</span>: 10</li>", result)

    def test_summarize_attrs(self):
        attrs = {'attr1': 'value1', 'attr2': 'value2'}
        result = fh.summarize_attrs(attrs)
        self.assertIn("<dt><span>attr1 :</span></dt><dd>value1</dd>", result)

    def test_icon(self):
        result = fh._icon("test-icon")
        self.assertIn("<svg class='icon xr-test-icon'>", result)

    def test_summarize_coord_multiindex(self):
        coord = MagicMock()
        coord.level_names = ['level1', 'level2']
        with patch('xarray.core.formatting_html.summarize_variable', return_value='summary'):
            result = fh._summarize_coord_multiindex('coord_name', coord)
            self.assertIn('summary', result)

    def test_summarize_coord(self):
        var = MagicMock()
        var.dims = ['x']
        var.variable.to_index_variable.return_value.level_names = ['level1']
        with patch('xarray.core.formatting_html.summarize_variable', return_value='summary'):
            result = fh.summarize_coord('x', var)
            self.assertIn('summary', result)

    def test_summarize_coords(self):
        variables = {'x': self.mock_array, 'y': self.mock_array}
        with patch('xarray.core.formatting_html.summarize_coord', return_value={'x': 'summary'}):
            result = fh.summarize_coords(variables)
            self.assertIn("<li class='xr-var-item'>summary</li>", result)

    def test_summarize_variable(self):
        var = MagicMock()
        var.dims = ['x']
        var.dtype = 'float64'
        var.attrs = {'attr1': 'value1'}
        with patch('xarray.core.formatting_html.inline_variable_array_repr', return_value='preview'):
            with patch('xarray.core.formatting_html.short_data_repr_html', return_value='data_repr'):
                result = fh.summarize_variable('var_name', var)
                self.assertIn("<div class='xr-var-name'><span>var_name</span></div>", result)

    def test_summarize_vars(self):
        variables = {'var1': self.mock_array, 'var2': self.mock_array}
        with patch('xarray.core.formatting_html.summarize_variable', return_value='summary'):
            result = fh.summarize_vars(variables)
            self.assertIn("<li class='xr-var-item'>summary</li>", result)

    def test_collapsible_section(self):
        result = fh.collapsible_section('Section', n_items=5)
        self.assertIn("Section:<span>(5)</span>", result)

    def test_mapping_section(self):
        mapping = {'key1': 'value1', 'key2': 'value2'}
        with patch('xarray.core.formatting_html._get_boolean_with_default', return_value=True):
            with patch('xarray.core.formatting_html.summarize_attrs', return_value='details'):
                result = fh._mapping_section(mapping, 'Test', fh.summarize_attrs, 10, 'option_name')
                self.assertIn("Test:<span>(2)</span>", result)

    def test_dim_section(self):
        result = fh.dim_section(self.mock_dataset)
        self.assertIn("Dimensions", result)

    def test_array_section(self):
        with patch('xarray.core.formatting_html.inline_variable_array_repr', return_value='preview'):
            with patch('xarray.core.formatting_html.short_data_repr_html', return_value='data_repr'):
                result = fh.array_section(self.mock_array)
                self.assertIn("Show/hide data repr", result)

    def test_array_repr(self):
        with patch('xarray.core.formatting_html._obj_repr', return_value='obj_repr'):
            result = fh.array_repr(self.mock_array)
            self.assertEqual(result, 'obj_repr')

    def test_dataset_repr(self):
        with patch('xarray.core.formatting_html._obj_repr', return_value='obj_repr'):
            result = fh.dataset_repr(self.mock_dataset)
            self.assertEqual(result, 'obj_repr')


Coverage: 70.43478260869566
Mutation Score: 51.52

Approach:
Predicted Test Suite: import unittest
from unittest.mock import MagicMock, patch
from xarray.core import formatting_html as fh
from collections import OrderedDict

class TestFormattingHTML(unittest.TestCase):

    def setUp(self):
        self.mock_array = MagicMock()
        self.mock_array.dims = ('x', 'y')
        self.mock_array.shape = (10, 20)
        self.mock_array.name = 'test_array'
        self.mock_array.coords = {'x': MagicMock(), 'y': MagicMock()}
        self.mock_array.attrs = {'attr1': 'value1', 'attr2': 'value2'}
        self.mock_array.variable = MagicMock()
        self.mock_array.variable._data = MagicMock()

        self.mock_dataset = MagicMock()
        self.mock_dataset.dims = {'x': 10, 'y': 20}
        self.mock_dataset.coords = {'x': MagicMock(), 'y': MagicMock()}
        self.mock_dataset.data_vars = {'var1': MagicMock(), 'var2': MagicMock()}
        self.mock_dataset.attrs = {'attr1': 'value1', 'attr2': 'value2'}

    @patch('xarray.core.formatting_html.pkg_resources.resource_string')
    def test_load_static_files(self, mock_resource_string):
        mock_resource_string.return_value = b"<svg></svg>"
        result = fh._load_static_files()
        self.assertEqual(len(result), 2)
        self.assertTrue(all(isinstance(r, str) for r in result))

    def test_short_data_repr_html(self):
        self.mock_array.variable._data._repr_html_ = MagicMock(return_value="<div>HTML</div>")
        result = fh.short_data_repr_html(self.mock_array)
        self.assertEqual(result, "<div>HTML</div>")

        del self.mock_array.variable._data._repr_html_
        with patch('xarray.core.formatting_html.short_data_repr', return_value='short_repr'):
            result = fh.short_data_repr_html(self.mock_array)
            self.assertEqual(result, "<pre>short_repr</pre>")

    def test_format_dims(self):
        dims = OrderedDict([('x', 10), ('y', 20)])
        coord_names = ['x']
        result = fh.format_dims(dims, coord_names)
        self.assertIn("class='xr-has-index'", result)
        self.assertIn("<li><span class='xr-has-index'>x</span>: 10</li>", result)

    def test_summarize_attrs(self):
        attrs = {'attr1': 'value1', 'attr2': 'value2'}
        result = fh.summarize_attrs(attrs)
        self.assertIn("<dt><span>attr1 :</span></dt><dd>value1</dd>", result)

    def test_icon(self):
        result = fh._icon("test-icon")
        self.assertIn("<svg class='icon xr-test-icon'>", result)

    def test_summarize_coord_multiindex(self):
        coord = MagicMock()
        coord.level_names = ['level1', 'level2']
        with patch('xarray.core.formatting_html.summarize_variable', return_value='summary'):
            result = fh._summarize_coord_multiindex('coord_name', coord)
            self.assertIn('summary', result)

    def test_summarize_coord(self):
        var = MagicMock()
        var.dims = ['x']
        var.variable.to_index_variable.return_value.level_names = ['level1']
        with patch('xarray.core.formatting_html.summarize_variable', return_value='summary'):
            result = fh.summarize_coord('x', var)
            self.assertIn('summary', result['x'])
            self.assertIn('summary', result['level1'])

    def test_summarize_coords(self):
        variables = {'x': self.mock_array, 'y': self.mock_array}
        with patch('xarray.core.formatting_html.summarize_coord', return_value={'x': 'summary'}):
            result = fh.summarize_coords(variables)
            self.assertIn("<li class='xr-var-item'>summary</li>", result)

    def test_summarize_variable(self):
        var = MagicMock()
        var.dims = ['x']
        var.dtype = 'float64'
        var.attrs = {'attr1': 'value1'}
        with patch('xarray.core.formatting_html.inline_variable_array_repr', return_value='preview'):
            with patch('xarray.core.formatting_html.short_data_repr_html', return_value='data_repr'):
                result = fh.summarize_variable('var_name', var)
                self.assertIn("<div class='xr-var-name'><span>var_name</span></div>", result)

    def test_summarize_vars(self):
        variables = {'var1': self.mock_array, 'var2': self.mock_array}
        with patch('xarray.core.formatting_html.summarize_variable', return_value='summary'):
            result = fh.summarize_vars(variables)
            self.assertIn("<li class='xr-var-item'>summary</li>", result)

    def test_collapsible_section(self):
        result = fh.collapsible_section('Section', n_items=5)
        self.assertIn("Section: <span>(5)</span>", result)

    def test_mapping_section(self):
        mapping = {'key1': 'value1', 'key2': 'value2'}
        with patch('xarray.core.formatting_html._get_boolean_with_default', return_value=True):
            with patch('xarray.core.formatting_html.summarize_attrs', return_value='details'):
                result = fh._mapping_section(mapping, 'Test', fh.summarize_attrs, 10, 'option_name')
                self.assertIn("Test: <span>(2)</span>", result)

    def test_dim_section(self):
        result = fh.dim_section(self.mock_dataset)
        self.assertIn("Dimensions", result)

    def test_array_section(self):
        with patch('xarray.core.formatting_html.inline_variable_array_repr', return_value='preview'):
            with patch('xarray.core.formatting_html.short_data_repr_html', return_value='data_repr'):
                result = fh.array_section(self.mock_array)
                self.assertIn("Show/hide data repr", result)

    def test_array_repr(self):
        self.mock_array.variable.size = 1
        with patch('xarray.core.formatting_html._obj_repr', return_value='obj_repr'):
            result = fh.array_repr(self.mock_array)
            self.assertEqual(result, 'obj_repr')

    def test_dataset_repr(self):
        self.mock_dataset.coords['x'].variable.size = 1
        with patch('xarray.core.formatting_html._obj_repr', return_value='obj_repr'):
            result = fh.dataset_repr(self.mock_dataset)
            self.assertEqual(result, 'obj_repr')
Coverage: 82.6086956521739
Mutation Score: 57.58
