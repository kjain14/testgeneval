Instance ID: pydata__xarray-6400-16539

Baseline 1 (Pynguin):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: import datetime as module_2
import numpy as module_1
import pytest
import xarray.core.formatting as module_0

def test_case_1():
    try:
        bool_0 = False
        var_0 = module_0.format_timestamp(bool_0)
    except BaseException:
        pass


def test_case_2():
    try:
        list_0 = []
        var_0 = module_0.inline_dask_repr(list_0)
    except BaseException:
        pass


def test_case_3():
    try:
        int_0 = -4807
        var_0 = module_0.inline_sparse_repr(int_0)
    except BaseException:
        pass


def test_case_4():
    try:
        float_0 = None
        list_0 = [float_0]
        var_0 = module_0.inline_variable_array_repr(float_0, list_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bool_0 = None
        int_0 = None
        var_0 = module_0.summarize_variable(bool_0, int_0, int_0, int_0)
    except BaseException:
        pass


def test_case_6():
    try:
        bool_0 = None
        int_0 = 5
        int_1 = None
        var_0 = module_0.summarize_variable(bool_0, int_0, int_0, int_1)
    except BaseException:
        pass


def test_case_7():
    try:
        float_0 = 4034.118243
        str_0 = 'GZ3zv'
        set_0 = {str_0, float_0}
        dict_0 = {str_0: set_0, str_0: str_0, str_0: str_0}
        dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: dict_0}
        list_0 = []
        var_0 = module_0.summarize_attr(dict_1, list_0)
        assert var_0 == "    {4034.118243: {'GZ3zv': 'GZ3zv'}}: []"
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        bool_0 = False
        var_1 = module_0.array_repr(bool_0)
    except BaseException:
        pass


def test_case_8():
    try:
        set_0 = set()
        str_0 = '9?E\x0bE\\g@>K"\trhZ~;O'
        list_0 = [str_0, set_0, str_0]
        var_0 = module_0.coords_repr(list_0)
    except BaseException:
        pass


def test_case_9():
    try:
        float_0 = -1461.600378
        var_0 = module_0.dim_summary(float_0)
    except BaseException:
        pass


def test_case_10():
    try:
        str_0 = 'YO\nsd]`pbGr\x0cP1@IT>h0'
        int_0 = -3619
        str_1 = module_0.dim_summary_limited(str_0, int_0)
    except BaseException:
        pass


def test_case_11():
    try:
        str_0 = '$'
        int_0 = -579
        var_0 = module_0.limit_lines(str_0, limit=int_0)
        assert var_0 == '...'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        int_1 = -1642
        var_1 = module_0.last_item(int_1)
    except BaseException:
        pass


def test_case_12():
    try:
        bool_0 = False
        var_0 = module_0.array_repr(bool_0)
    except BaseException:
        pass


def test_case_13():
    try:
        bytes_0 = None
        float_0 = -2411.9841003788883
        var_0 = module_0.format_timedelta(float_0)
        assert var_0 == '-1 days +23:59:59.999997589'
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = '#k1~?9\nf=j=5a}`9r'
        list_0 = [str_0, bytes_0, float_0]
        var_1 = module_0.dataset_repr(list_0)
    except BaseException:
        pass


def test_case_14():
    try:
        timedelta64_0 = module_1.timedelta64()
        str_0 = '4+G\nn`^\nd_j\tK9@c'
        var_0 = module_0.diff_array_repr(timedelta64_0, timedelta64_0, str_0)
    except BaseException:
        pass


def test_case_15():
    try:
        str_0 = '\x0b,B)^Q ^J\x0c<rUdg'
        list_0 = []
        var_0 = module_0.diff_dataset_repr(str_0, str_0, list_0)
    except BaseException:
        pass


def test_case_16():
    try:
        int_0 = -225
        str_0 = '(t'
        set_0 = None
        var_0 = module_0.diff_coords_repr(int_0, set_0, str_0)
    except BaseException:
        pass


def test_case_17():
    try:
        int_0 = 24
        var_0 = module_0.format_items(int_0)
    except BaseException:
        pass


def test_case_18():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        int_0 = 1459
        var_0 = module_0.format_item(list_0, int_0)
        assert var_0 == '[False, False, False]'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.format_timestamp(bool_0)
    except BaseException:
        pass


def test_case_19():
    try:
        timedelta64_0 = module_1.timedelta64()
        str_0 = '$FMib.c#&QoYiH'
        var_0 = module_0.last_n_items(timedelta64_0, str_0)
    except BaseException:
        pass


def test_case_20():
    try:
        bytes_0 = None
        float_0 = -2411.0
        int_0 = -865
        bool_0 = True
        var_0 = module_0.summarize_variable(bytes_0, float_0, int_0, bool_0)
    except BaseException:
        pass


def test_case_21():
    try:
        str_0 = '}n"Qyt}c\r\x0bNNF'
        var_0 = module_0.format_item(str_0)
        assert var_0 == '\'}n"Qyt}c\\r\\x0bNNF\''
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        bool_0 = False
        int_0 = -767
        var_1 = module_0.coords_repr(bool_0, int_0)
    except BaseException:
        pass


def test_case_22():
    try:
        timedelta_0 = module_2.timedelta()
        var_0 = module_0.format_timedelta(timedelta_0)
        assert var_0 == '0 days 00:00:00'
        assert module_0.EMPTY_REPR == '    *empty*'
        int_0 = 1
        dict_0 = {int_0: int_0}
        timedelta_1 = module_2.timedelta()
        list_0 = [timedelta_1, int_0, dict_0]
        var_1 = module_0.format_items(list_0)
        assert var_1 == ['0 days 00:00:00', '1', '{1: 1}']
        assert module_2.MINYEAR == 1
        assert module_2.MAXYEAR == 9999
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        timedelta_2 = module_2.timedelta()
        list_1 = [int_0, timedelta_1, int_0, timedelta_2]
        var_2 = module_0.unindexed_dims_repr(list_1, dict_0)
        assert var_2 == 'Dimensions without coordinates: 0:00:00, 0:00:00'
        var_3 = module_0.inline_dask_repr(dict_0)
    except BaseException:
        pass


def test_case_23():
    try:
        int_0 = -13
        int_1 = module_0.calc_max_rows_last(int_0)
        assert int_1 == -7
        assert module_0.EMPTY_REPR == '    *empty*'
        tuple_0 = None
        var_0 = module_0.format_timedelta(tuple_0)
        assert var_0 == 'NaT'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        dict_0 = {int_0: int_0, tuple_0: int_0}
        set_0 = set()
        var_1 = module_0.unindexed_dims_repr(dict_0, set_0, int_1)
        assert var_1 == 'Dimensions without coordinates: \n                                ...'
        var_2 = module_0.first_n_items(dict_0, int_1)
    except BaseException:
        pass


def test_case_24():
    try:
        int_0 = None
        int_1 = module_0.calc_max_rows_last(int_0)
    except BaseException:
        pass


def test_case_25():
    try:
        bytes_0 = b'1 R\xd9\x03\x03'
        dict_0 = {bytes_0: bytes_0}
        bool_0 = True
        tuple_0 = (bytes_0, dict_0, bool_0)
        list_0 = []
        str_0 = '\ne>uqF\\S5'
        var_0 = module_0.wrap_indent(tuple_0, list_0, str_0)
    except BaseException:
        pass


def test_case_26():
    try:
        str_0 = '}n"Qyt}c\r\x0bNNF'
        int_0 = -865
        bool_0 = True
        str_1 = '00:00:00.000002065'
        dict_0 = {int_0: bool_0, str_0: int_0, int_0: str_1}
        dict_1 = {}
        int_1 = 416
        int_2 = -1934
        var_0 = module_0.summarize_variable(dict_0, dict_1, int_1, int_2, bool_0)
    except BaseException:
        pass


def test_case_27():
    try:
        bytes_0 = None
        float_0 = -2411.0
        str_0 = ' must be castable to float64 to support interpolation or curve fitting, got '
        dict_0 = {str_0: float_0}
        str_1 = None
        var_0 = module_0.format_item(dict_0, str_1)
        assert var_0 == "{' must be castable to float64 to support interpolation or curve fitting, got ': -2411.0}"
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        int_0 = -865
        list_0 = [int_0, bytes_0, bytes_0]
        str_2 = 'equals'
        var_1 = module_0.diff_dataset_repr(bytes_0, list_0, str_2)
    except BaseException:
        pass


def test_case_28():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        int_0 = 35
        int_1 = module_0.calc_max_rows_first(int_0)
        assert int_1 == 18
        assert module_0.EMPTY_REPR == '    *empty*'
        var_0 = module_0.format_items(list_0)
        assert var_0 == ['False', 'False', 'False']
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        str_0 = "<ul class='xr-dim-list'>"
        list_1 = []
        var_1 = module_0.unindexed_dims_repr(str_0, list_1)
        assert var_1 == "Dimensions without coordinates: <, u, l,  , c, l, a, s, s, =, ', x, r, -, d, i,\n                                m, -, l, i, s, t, ', >"
        bytes_0 = None
        tuple_0 = (int_0, bool_0)
        int_2 = -4731
        var_2 = module_0.summarize_variable(bytes_0, tuple_0, int_2)
    except BaseException:
        pass


def test_case_29():
    try:
        float_0 = -1307.67732
        float_1 = 4494.75
        list_0 = [float_0]
        var_0 = module_0.summarize_attr(float_0, float_1, list_0)
    except BaseException:
        pass


def test_case_30():
    try:
        set_0 = set()
        var_0 = module_0.coords_repr(set_0)
    except BaseException:
        pass


def test_case_31():
    try:
        int_0 = 1
        timedelta_0 = module_2.timedelta()
        timedelta_1 = module_2.timedelta()
        var_0 = module_0.format_timedelta(timedelta_0)
        assert var_0 == '1 days 05:00:00'
        assert var_0 == '0 days 00:00:00'
        assert module_0.EMPTY_REPR == '    *empty*'
        timedelta_2 = module_2.timedelta()
        var_1 = module_0.format_timedelta(timedelta_2)
        assert var_1 == '0 days 05:00:00'
        assert var_1 == '0 days 00:00:00'
        var_2 = module_0.set_numpy_options()
        assert var_2.args == ()
        assert var_2.kwds == {}
        float_0 = 718.0
        tuple_0 = (float_0,)
        var_3 = module_0.format_items(tuple_0)
        assert var_3 == ['718.0']
        assert module_2.MINYEAR == 1
        assert module_2.MAXYEAR == 9999
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        var_4 = module_0.inline_dask_repr(timedelta_1)
    except BaseException:
        pass


def test_case_32():
    try:
        float_0 = 1346.7
        dict_0 = {float_0: float_0, float_0: float_0}
        str_0 = 'allclose'
        set_0 = set()
        var_0 = module_0.indexes_repr(set_0)
        assert var_0 == 'Indexes:\n    *empty*'
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        var_1 = module_0.diff_array_repr(dict_0, dict_0, str_0)
    except BaseException:
        pass


def test_case_33():
    try:
        set_0 = set()
        timedelta_0 = module_2.timedelta()
        var_0 = module_0.format_item(set_0, timedelta_0)
        assert var_0 == 'set()'
        assert module_2.MINYEAR == 1
        assert module_2.MAXYEAR == 9999
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        datetime64_0 = module_1.datetime64()
        assert module_1.newaxis is None
        assert module_1.little_endian is True
        assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.CLIP == 0
        assert module_1.RAISE == 2
        assert module_1.WRAP == 1
        assert module_1.MAXDIMS == 32
        assert module_1.BUFSIZE == 8192
        assert module_1.ALLOW_THREADS == 1
        assert module_1.MAY_SHARE_BOUNDS == 0
        assert module_1.MAY_SHARE_EXACT == -1
        assert module_1.ERR_CALL == 3
        assert module_1.ERR_DEFAULT == 521
        assert module_1.ERR_IGNORE == 0
        assert module_1.ERR_LOG == 5
        assert module_1.ERR_PRINT == 4
        assert module_1.ERR_RAISE == 2
        assert module_1.ERR_WARN == 1
        assert module_1.FLOATING_POINT_SUPPORT == 1
        assert module_1.FPE_DIVIDEBYZERO == 1
        assert module_1.FPE_INVALID == 8
        assert module_1.FPE_OVERFLOW == 2
        assert module_1.FPE_UNDERFLOW == 4
        assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
        assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
        assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
        assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert module_1.SHIFT_DIVIDEBYZERO == 0
        assert module_1.SHIFT_INVALID == 9
        assert module_1.SHIFT_OVERFLOW == 3
        assert module_1.SHIFT_UNDERFLOW == 6
        assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
        assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
        assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
        assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
        assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
        assert len(module_1.sctypeDict) == 136
        assert len(module_1.sctypes) == 5
        assert len(module_1.ScalarType) == 31
        assert len(module_1.cast) == 24
        assert len(module_1.nbytes) == 24
        assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
        assert module_1.tracemalloc_domain == 389047
        assert module_1.mgrid.sparse is False
        assert module_1.ogrid.sparse is True
        assert len(module_1.r_) == 0
        assert len(module_1.c_) == 0
        assert module_1.s_.maketuple is False
        assert module_1.index_exp.maketuple is True
        assert module_1.oldnumeric == 'removed'
        assert module_1.numarray == 'removed'
        assert module_1.use_hugepage == 1
        assert module_1.kernel_version == (6, 8)
        var_1 = module_0.format_item(datetime64_0)
        assert var_1 == 'NaT'
        timedelta64_0 = module_1.timedelta64()
        var_2 = module_0.inline_sparse_repr(timedelta64_0)
    except BaseException:
        pass


def test_case_34():
    try:
        timedelta_0 = module_2.timedelta()
        timedelta_1 = None
        var_0 = module_0.format_timedelta(timedelta_1)
        assert var_0 == 'NaT'
        assert module_2.MINYEAR == 1
        assert module_2.MAXYEAR == 9999
        assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
        assert module_0.dask_array_type == ()
        assert module_0.sparse_array_type == ()
        assert module_0.EMPTY_REPR == '    *empty*'
        str_0 = 'qD.QJe=8DkK~b2y~&$2'
        bytes_0 = b'\xb1\x12Dw\xff\xed\x07\xa0>\xdcE\x8d>1('
        tuple_0 = (bytes_0,)
        int_0 = None
        var_1 = module_0.format_item(str_0, tuple_0, int_0)
        assert var_1 == 'qD.QJe=8DkK~b2y~&$2'
        bool_0 = False
        var_2 = module_0.inline_dask_repr(bool_0)
    except BaseException:
        pass# Automatically generated by Pynguin.


def test_case_35():
    pass


def test_case_36():
    int_0 = 8
    var_0 = module_0.pretty_print(int_0, int_0)
    assert var_0 == '8       '
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_37():
    int_0 = -2798
    var_0 = module_0.pretty_print(int_0, int_0)
    assert var_0 == '...'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_38():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.indexes_repr(dict_0)
    assert var_0 == 'Indexes:\nFalse: False'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_39():
    int_0 = 1
    timedelta64_0 = module_1.timedelta64()
    var_0 = module_0.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '...'
    assert module_1.newaxis is None
    assert module_1.little_endian is True
    assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.CLIP == 0
    assert module_1.RAISE == 2
    assert module_1.WRAP == 1
    assert module_1.MAXDIMS == 32
    assert module_1.BUFSIZE == 8192
    assert module_1.ALLOW_THREADS == 1
    assert module_1.MAY_SHARE_BOUNDS == 0
    assert module_1.MAY_SHARE_EXACT == -1
    assert module_1.ERR_CALL == 3
    assert module_1.ERR_DEFAULT == 521
    assert module_1.ERR_IGNORE == 0
    assert module_1.ERR_LOG == 5
    assert module_1.ERR_PRINT == 4
    assert module_1.ERR_RAISE == 2
    assert module_1.ERR_WARN == 1
    assert module_1.FLOATING_POINT_SUPPORT == 1
    assert module_1.FPE_DIVIDEBYZERO == 1
    assert module_1.FPE_INVALID == 8
    assert module_1.FPE_OVERFLOW == 2
    assert module_1.FPE_UNDERFLOW == 4
    assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_1.SHIFT_DIVIDEBYZERO == 0
    assert module_1.SHIFT_INVALID == 9
    assert module_1.SHIFT_OVERFLOW == 3
    assert module_1.SHIFT_UNDERFLOW == 6
    assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_1.sctypeDict) == 136
    assert len(module_1.sctypes) == 5
    assert len(module_1.ScalarType) == 31
    assert len(module_1.cast) == 24
    assert len(module_1.nbytes) == 24
    assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_1.tracemalloc_domain == 389047
    assert module_1.mgrid.sparse is False
    assert module_1.ogrid.sparse is True
    assert len(module_1.r_) == 0
    assert len(module_1.c_) == 0
    assert module_1.s_.maketuple is False
    assert module_1.index_exp.maketuple is True
    assert module_1.oldnumeric == 'removed'
    assert module_1.numarray == 'removed'
    assert module_1.use_hugepage == 1
    assert module_1.kernel_version == (6, 8)
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_40():
    timedelta64_0 = module_1.timedelta64()
    var_0 = module_0.last_item(timedelta64_0)
    assert var_0 == [0]
    assert module_1.newaxis is None
    assert module_1.little_endian is True
    assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.CLIP == 0
    assert module_1.RAISE == 2
    assert module_1.WRAP == 1
    assert module_1.MAXDIMS == 32
    assert module_1.BUFSIZE == 8192
    assert module_1.ALLOW_THREADS == 1
    assert module_1.MAY_SHARE_BOUNDS == 0
    assert module_1.MAY_SHARE_EXACT == -1
    assert module_1.ERR_CALL == 3
    assert module_1.ERR_DEFAULT == 521
    assert module_1.ERR_IGNORE == 0
    assert module_1.ERR_LOG == 5
    assert module_1.ERR_PRINT == 4
    assert module_1.ERR_RAISE == 2
    assert module_1.ERR_WARN == 1
    assert module_1.FLOATING_POINT_SUPPORT == 1
    assert module_1.FPE_DIVIDEBYZERO == 1
    assert module_1.FPE_INVALID == 8
    assert module_1.FPE_OVERFLOW == 2
    assert module_1.FPE_UNDERFLOW == 4
    assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_1.SHIFT_DIVIDEBYZERO == 0
    assert module_1.SHIFT_INVALID == 9
    assert module_1.SHIFT_OVERFLOW == 3
    assert module_1.SHIFT_UNDERFLOW == 6
    assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_1.sctypeDict) == 136
    assert len(module_1.sctypes) == 5
    assert len(module_1.ScalarType) == 31
    assert len(module_1.cast) == 24
    assert len(module_1.nbytes) == 24
    assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_1.tracemalloc_domain == 389047
    assert module_1.mgrid.sparse is False
    assert module_1.ogrid.sparse is True
    assert len(module_1.r_) == 0
    assert len(module_1.c_) == 0
    assert module_1.s_.maketuple is False
    assert module_1.index_exp.maketuple is True
    assert module_1.oldnumeric == 'removed'
    assert module_1.numarray == 'removed'
    assert module_1.use_hugepage == 1
    assert module_1.kernel_version == (6, 8)
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_41():
    int_0 = -674
    int_1 = module_0.calc_max_rows_first(int_0)
    assert int_1 == -337
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_42():
    int_0 = 2065
    var_0 = module_0.format_timestamp(int_0)
    assert var_0 == '1970-01-01T00:00:00.000002065'
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_43():
    dict_0 = None
    var_0 = module_0.format_timedelta(dict_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_44():
    str_0 = '}n"Qyt}c\r\x0bNNF'
    var_0 = module_0.format_item(str_0)
    assert var_0 == '\'}n"Qyt}c\\r\\x0bNNF\''
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_45():
    str_0 = None
    var_0 = module_0.indexes_repr(str_0)
    assert var_0 == 'Indexes:\n    *empty*'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_46():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.format_items(list_0)
    assert var_0 == ['True', 'True']
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'
    str_0 = 'D6df@@)ib|$X'
    list_1 = []
    var_1 = module_0.unindexed_dims_repr(str_0, list_1)
    assert var_1 == 'Dimensions without coordinates: D, 6, d, f, @, @, ), i, b, |, $, X'


def test_case_47():
    set_0 = set()
    str_0 = '9?E\x0bE\\g@>K"\trhZ~;O'
    var_0 = module_0.unindexed_dims_repr(set_0, str_0)
    assert var_0 is None
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_48():
    str_0 = '6G}8\x0b-}TLd'
    var_0 = module_0.short_numpy_repr(str_0)
    assert var_0 == "array('6G}8\\x0b-}TLd', dtype='<U10')"
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_49():
    str_0 = 'v\ro'
    int_0 = 2421
    var_0 = module_0.limit_lines(str_0, limit=int_0)
    assert var_0 == 'v\ro'
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_50():
    bytes_0 = None
    var_0 = module_0.format_timestamp(bytes_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_51():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_0 = module_0.format_items(list_0)
    assert var_0 == ['True', 'True', 'True', 'True']
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_52():
    int_0 = 13
    int_1 = module_0.calc_max_rows_last(int_0)
    assert int_1 == 6
    assert module_0.EMPTY_REPR == '    *empty*'
    tuple_0 = None
    var_0 = module_0.format_timedelta(tuple_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    dict_0 = {int_0: int_0, tuple_0: int_0}
    set_0 = set()
    var_1 = module_0.unindexed_dims_repr(dict_0, set_0, int_1)
    assert var_1 == 'Dimensions without coordinates: 13, None'
    var_2 = module_0.set_numpy_options()
    assert var_2.args == ()
    assert var_2.kwds == {}


def test_case_53():
    int_0 = -32
    int_1 = module_0.calc_max_rows_last(int_0)
    assert int_1 == -16
    assert module_0.EMPTY_REPR == '    *empty*'
    tuple_0 = None
    var_0 = module_0.format_timedelta(tuple_0)
    assert var_0 == 'NaT'
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    dict_0 = {int_0: int_0, tuple_0: int_0}
    set_0 = set()
    var_1 = module_0.unindexed_dims_repr(dict_0, set_0, int_1)
    assert var_1 == 'Dimensions without coordinates: \n                                ...'


def test_case_54():
    int_0 = 1
    timedelta_0 = module_2.timedelta()
    var_0 = module_0.format_timedelta(timedelta_0)
    assert var_0 == '1 days 00:00:00'
    assert var_0 == '0 days 00:00:00'
    assert module_0.EMPTY_REPR == '    *empty*'
    int_1 = 5
    timedelta_1 = module_2.timedelta()
    var_1 = module_0.format_timedelta(timedelta_1)
    assert var_1 == '1 days 05:00:00'
    assert var_1 == '0 days 00:00:00'
    timedelta_2 = module_2.timedelta()
    var_2 = module_0.format_timedelta(timedelta_2)
    assert var_2 == '0 days 05:00:00'
    assert var_2 == '0 days 00:00:00'
    int_2 = 0
    timedelta_3 = module_2.timedelta()
    var_3 = module_0.format_timedelta(timedelta_3)
    assert var_3 == '0 days 00:00:00'
    timedelta_4 = module_2.timedelta()
    str_0 = 'date'
    var_4 = module_0.format_timedelta(timedelta_4, str_0)
    assert var_4 == '1 days'
    assert var_4 == '0 days'
    assert module_2.MINYEAR == 1
    assert module_2.MAXYEAR == 9999
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()


def test_case_55():
    int_0 = 4191
    timedelta64_0 = module_1.timedelta64()
    var_0 = module_0.format_array_flat(timedelta64_0, int_0)
    assert var_0 == '00:00:00'
    assert module_1.newaxis is None
    assert module_1.little_endian is True
    assert module_1.Inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.inf == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.infty == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.Infinity == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.CLIP == 0
    assert module_1.RAISE == 2
    assert module_1.WRAP == 1
    assert module_1.MAXDIMS == 32
    assert module_1.BUFSIZE == 8192
    assert module_1.ALLOW_THREADS == 1
    assert module_1.MAY_SHARE_BOUNDS == 0
    assert module_1.MAY_SHARE_EXACT == -1
    assert module_1.ERR_CALL == 3
    assert module_1.ERR_DEFAULT == 521
    assert module_1.ERR_IGNORE == 0
    assert module_1.ERR_LOG == 5
    assert module_1.ERR_PRINT == 4
    assert module_1.ERR_RAISE == 2
    assert module_1.ERR_WARN == 1
    assert module_1.FLOATING_POINT_SUPPORT == 1
    assert module_1.FPE_DIVIDEBYZERO == 1
    assert module_1.FPE_INVALID == 8
    assert module_1.FPE_OVERFLOW == 2
    assert module_1.FPE_UNDERFLOW == 4
    assert module_1.NINF == pytest.approx(-1e309, abs=0.01, rel=0.01)
    assert module_1.NZERO == pytest.approx(-0.0, abs=0.01, rel=0.01)
    assert module_1.PINF == pytest.approx(1e309, abs=0.01, rel=0.01)
    assert module_1.PZERO == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_1.SHIFT_DIVIDEBYZERO == 0
    assert module_1.SHIFT_INVALID == 9
    assert module_1.SHIFT_OVERFLOW == 3
    assert module_1.SHIFT_UNDERFLOW == 6
    assert module_1.UFUNC_BUFSIZE_DEFAULT == 8192
    assert module_1.UFUNC_PYVALS_NAME == 'UFUNC_PYVALS'
    assert module_1.e == pytest.approx(2.718281828459045, abs=0.01, rel=0.01)
    assert module_1.euler_gamma == pytest.approx(0.5772156649015329, abs=0.01, rel=0.01)
    assert module_1.pi == pytest.approx(3.141592653589793, abs=0.01, rel=0.01)
    assert len(module_1.sctypeDict) == 136
    assert len(module_1.sctypes) == 5
    assert len(module_1.ScalarType) == 31
    assert len(module_1.cast) == 24
    assert len(module_1.nbytes) == 24
    assert module_1.typecodes == {'Character': 'c', 'Integer': 'bhilqp', 'UnsignedInteger': 'BHILQP', 'Float': 'efdg', 'Complex': 'FDG', 'AllInteger': 'bBhHiIlLqQpP', 'AllFloat': 'efdgFDG', 'Datetime': 'Mm', 'All': '?bhilqpBHILQPefdgFDGSUVOMm'}
    assert module_1.tracemalloc_domain == 389047
    assert module_1.mgrid.sparse is False
    assert module_1.ogrid.sparse is True
    assert len(module_1.r_) == 0
    assert len(module_1.c_) == 0
    assert module_1.s_.maketuple is False
    assert module_1.index_exp.maketuple is True
    assert module_1.oldnumeric == 'removed'
    assert module_1.numarray == 'removed'
    assert module_1.use_hugepage == 1
    assert module_1.kernel_version == (6, 8)
    assert module_0.OPTIONS == {'arithmetic_join': 'inner', 'cmap_divergent': 'RdBu_r', 'cmap_sequential': 'viridis', 'display_max_rows': 12, 'display_values_threshold': 200, 'display_style': 'html', 'display_width': 80, 'display_expand_attrs': 'default', 'display_expand_coords': 'default', 'display_expand_data_vars': 'default', 'display_expand_data': 'default', 'enable_cftimeindex': True, 'file_cache_maxsize': 128, 'keep_attrs': 'default', 'use_bottleneck': True, 'warn_for_unclosed_files': False}
    assert module_0.dask_array_type == ()
    assert module_0.sparse_array_type == ()
    assert module_0.EMPTY_REPR == '    *empty*'


def test_case_56():
    str_0 = '2023-10-05 14:30:00'
    var_0 = module_0.format_timestamp(str_0)
    assert var_0 == '2023-10-05T14:30:00'
    assert module_0.EMPTY_REPR == '    *empty*'
    str_1 = '2023-10-05'
    var_1 = module_0.format_timestamp(str_1)
    assert var_1 == '2023-10-05'
    str_2 = '3000-01-01 00:00:00'
    var_2 = module_0.format_timestamp(str_2)
    assert var_2 == '3000-01-01 00:00:00'
    assert var_2 == '3000-01-01'

Coverage: 38.80597014925373
Mutation Score: 3.819999999999993

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from xarray.core import formatting
from pandas.errors import OutOfBoundsDatetime

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("longstring", 5) == "longs"

def test_maybe_truncate():
    assert formatting.maybe_truncate("short", 10) == "short"
    assert formatting.maybe_truncate("this is a very long string", 10) == "this is..."

def test_wrap_indent():
    text = "line1\nline2"
    result = formatting.wrap_indent(text, start=">>", length=2)
    assert result == ">>line1\n  line2"

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]

def test_calc_max_rows_first():
    assert formatting.calc_max_rows_first(5) == 3

def test_calc_max_rows_last():
    assert formatting.calc_max_rows_last(5) == 2

def test_format_timestamp():
    ts = pd.Timestamp("2023-01-01")
    assert formatting.format_timestamp(ts) == "2023-01-01"

def test_format_timedelta():
    td = pd.Timedelta(days=2, hours=3)
    assert formatting.format_timedelta(td) == "2 days 03:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64("2023-01-01")) == "2023-01-01"
    assert formatting.format_item(np.timedelta64(2, 'D')) == "2 days 00:00:00"
    assert formatting.format_item("string") == "'string'"

def test_format_items():
    items = [np.datetime64("2023-01-01"), np.timedelta64(2, 'D'), "string"]
    formatted = formatting.format_items(items)
    assert formatted == ["2023-01-01", "2 days 00:00:00", "'string'"]

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, max_width=10)
    assert result == "1 2 3 ... 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.ndarray(0)

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3,)>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 10
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=10, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ("x",)
        dtype = np.dtype("float64")
        _data = np.array([1, 2, 3])
        _in_memory = True

    var = MockVariable()
    result = formatting.summarize_variable("var", var, col_width=10)
    assert "var" in result

def test_summarize_attr():
    result = formatting.summarize_attr("key", "value", col_width=10)
    assert "key:" in result

def test_empty_repr():
    assert formatting.EMPTY_REPR == "    *empty*"

def test_calculate_col_width():
    col_items = ["a", "b", "c"]
    assert formatting._calculate_col_width(col_items) == 7 + 6

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(string, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    result = formatting.short_numpy_repr(array)
    assert "1.123457" in result

def test_short_data_repr():
    array = np.array([1, 2, 3])
    result = formatting.short_data_repr(array)
    assert "array" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ("x",)
        variable = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result

def test_dataset_repr():
    class MockDataset:
        variables = {"var": np.array([1, 2, 3])}
        coords = {}
        dims = {"x": 3}
        data_vars = {"var": np.array([1, 2, 3])}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "<xarray." in result

def test_diff_dim_summary():
    class MockObj:
        dims = {"x": 3}
        sizes = {"x": 3}

    a = MockObj()
    b = MockObj()
    result = formatting.diff_dim_summary(a, b)
    assert result == ""

def test_diff_array_repr():
    class MockArray:
        dims = ("x",)
        data = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    a = MockArray()
    b = MockArray()
    result = formatting.diff_array_repr(a, b, compat="equals")
    assert "not equal" in result

def test_diff_dataset_repr():
    class MockDataset:
        dims = {"x": 3}
        coords = {}
        data_vars = {"var": np.array([1, 2, 3])}
        attrs = {}

    a = MockDataset()
    b = MockDataset()
    result = formatting.diff_dataset_repr(a, b, compat="equals")
    assert "not equal" in result

Coverage: 34.5771144278607
Mutation Score: 26.25

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from xarray.core import formatting
from pandas.errors import OutOfBoundsDatetime

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("longstring", 5) == "long..."

def test_maybe_truncate():
    assert formatting.maybe_truncate("short", 10) == "short"
    assert formatting.maybe_truncate("this is a very long string", 10) == "this is..."

def test_wrap_indent():
    text = "line1\nline2"
    result = formatting.wrap_indent(text, start=">>", length=2)
    assert result == ">>line1\n  line2"

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]

def test_calc_max_rows_first():
    assert formatting.calc_max_rows_first(5) == 3

def test_calc_max_rows_last():
    assert formatting.calc_max_rows_last(5) == 2

def test_format_timestamp():
    ts = pd.Timestamp("2023-01-01")
    assert formatting.format_timestamp(ts) == "2023-01-01"

def test_format_timedelta():
    td = pd.Timedelta(days=2, hours=3)
    assert formatting.format_timedelta(td) == "2 days 03:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64("2023-01-01")) == "2023-01-01"
    assert formatting.format_item(np.timedelta64(2, 'D')) == "2 days 00:00:00"
    assert formatting.format_item("string") == "'string'"

def test_format_items():
    items = [np.datetime64("2023-01-01"), np.timedelta64(2, 'D'), "string"]
    formatted = formatting.format_items(items)
    assert formatted == ["2023-01-01", "2 days 00:00:00", "'string'"]

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, max_width=10)
    assert result == "1 2 3 4 5"

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.ndarray(0)

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3,), meta=np.ndarray>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 10
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=10, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ("x",)
        dtype = np.dtype("float64")
        _data = np.array([1, 2, 3])
        _in_memory = True

    var = MockVariable()
    result = formatting.summarize_variable("var", var, col_width=10, max_width=20)
    assert "var" in result

def test_summarize_attr():
    result = formatting.summarize_attr("key", "value", col_width=10)
    assert "key:" in result

def test_empty_repr():
    assert formatting.EMPTY_REPR == "    *empty*"

def test_calculate_col_width():
    col_items = ["a", "b", "c"]
    assert formatting._calculate_col_width(col_items) == 7 + 6

def test_limit_lines():
    string = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(string, limit=3)
    assert result == "line1\n...\nline4\nline5"

def test_short_numpy_repr():
    array = np.array([1.123456789, 2.987654321])
    result = formatting.short_numpy_repr(array)
    assert "1.123457" in result

def test_short_data_repr():
    array = np.array([1, 2, 3])
    result = formatting.short_data_repr(array)
    assert "[3 values with dtype=int64]" in result
    assert "array" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ("x",)
        variable = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "<xarray.MockArray" in result
    assert "mock" in result

def test_dataset_repr():
    class MockDataset:
        variables = {"var": np.array([1, 2, 3])}
        coords = {}
        dims = {"x": 3}
        data_vars = {"var": np.array([1, 2, 3])}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "Dimensions: (x: 3)" in result
    assert "<xarray." in result

def test_diff_dim_summary():
    class MockObj:
        dims = {"x": 3}
        sizes = {"x": 3}

    a = MockObj()
    b = MockObj()
    result = formatting.diff_dim_summary(a, b)
    assert result == ""

def test_diff_array_repr():
    class MockArray:
        dims = ("x",)
        data = np.array([1, 2, 3])
        coords = {}
        attrs = {}

    a = MockArray()
    b = MockArray()
    result = formatting.diff_array_repr(a, b, compat="equals")
    assert "Differing values:" in result
    assert "not equal" in result

def test_diff_dataset_repr():
    class MockDataset:
        dims = {"x": 3}
        coords = {}
        data_vars = {"var": np.array([1, 2, 3])}
        attrs = {}

    a = MockDataset()
    b = MockDataset()
    result = formatting.diff_dataset_repr(a, b, compat="equals")
    assert "Differing data variables:" in result
    assert "not equal" in result
Coverage: 39.30348258706468
Mutation Score: 34.09
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_formatting.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 8448f87bcd6154c5be5cf50e7909de71d79548e8
Author: TestGenEval <>
Date:   Wed Dec 11 12:58:57 2024 +0000

    Testing fixes

diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py
index 81617ae3..e372e3bd 100644
--- a/xarray/core/formatting.py
+++ b/xarray/core/formatting.py
@@ -520,7 +520,11 @@ def short_numpy_repr(array):

     # default to lower precision so a full (abbreviated) line can fit on
     # one line with the default display_width
-    options = {"precision": 6, "linewidth": OPTIONS["display_width"], "threshold": 200}
+    options = {
+        "precision": 6,
+        "linewidth": OPTIONS["display_width"],
+        "threshold": OPTIONS["display_values_threshold"],
+    }
     if array.ndim < 3:
         edgeitems = 3
     elif array.ndim == 3:
diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index c8851788..27bd4954 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -5,6 +5,7 @@ from collections import Counter, defaultdict
 from contextlib import suppress
 from dataclasses import dataclass, field
 from datetime import timedelta
+from html import escape
 from typing import (
     TYPE_CHECKING,
     Any,
@@ -25,6 +26,7 @@ from packaging.version import Version

 from . import duck_array_ops, nputils, utils
 from .npcompat import DTypeLike
+from .options import OPTIONS
 from .pycompat import dask_version, integer_types, is_duck_dask_array, sparse_array_type
 from .types import T_Xarray
 from .utils import either_dict_or_kwargs, get_valid_numpy_dtype
@@ -1507,23 +1509,31 @@ class PandasMultiIndexingAdapter(PandasIndexingAdapter):
             )
             return f"{type(self).__name__}{props}"

-    def _repr_inline_(self, max_width) -> str:
-        # special implementation to speed-up the repr for big multi-indexes
+    def _get_array_subset(self) -> np.ndarray:
+        # used to speed-up the repr for big multi-indexes
+        threshold = max(100, OPTIONS["display_values_threshold"] + 2)
+        if self.size > threshold:
+            pos = threshold // 2
+            indices = np.concatenate([np.arange(0, pos), np.arange(-pos, 0)])
+            subset = self[OuterIndexer((indices,))]
+        else:
+            subset = self
+
+        return np.asarray(subset)
+
+    def _repr_inline_(self, max_width: int) -> str:
+        from .formatting import format_array_flat
+
         if self.level is None:
             return "MultiIndex"
         else:
-            from .formatting import format_array_flat
+            return format_array_flat(self._get_array_subset(), max_width)

-            if self.size > 100 and max_width < self.size:
-                n_values = max_width
-                indices = np.concatenate(
-                    [np.arange(0, n_values), np.arange(-n_values, 0)]
-                )
-                subset = self[OuterIndexer((indices,))]
-            else:
-                subset = self
+    def _repr_html_(self) -> str:
+        from .formatting import short_numpy_repr

-            return format_array_flat(np.asarray(subset), max_width)
+        array_repr = short_numpy_repr(self._get_array_subset())
+        return f"<pre>{escape(array_repr)}</pre>"

     def copy(self, deep: bool = True) -> "PandasMultiIndexingAdapter":
         # see PandasIndexingAdapter.copy
diff --git a/xarray/core/options.py b/xarray/core/options.py
index 0c45e126..399afe90 100644
--- a/xarray/core/options.py
+++ b/xarray/core/options.py
@@ -15,6 +15,7 @@ class T_Options(TypedDict):
     cmap_divergent: Union[str, "Colormap"]
     cmap_sequential: Union[str, "Colormap"]
     display_max_rows: int
+    display_values_threshold: int
     display_style: Literal["text", "html"]
     display_width: int
     display_expand_attrs: Literal["default", True, False]
@@ -33,6 +34,7 @@ OPTIONS: T_Options = {
     "cmap_divergent": "RdBu_r",
     "cmap_sequential": "viridis",
     "display_max_rows": 12,
+    "display_values_threshold": 200,
     "display_style": "html",
     "display_width": 80,
     "display_expand_attrs": "default",
@@ -57,6 +59,7 @@ def _positive_integer(value):
 _VALIDATORS = {
     "arithmetic_join": _JOIN_OPTIONS.__contains__,
     "display_max_rows": _positive_integer,
+    "display_values_threshold": _positive_integer,
     "display_style": _DISPLAY_OPTIONS.__contains__,
     "display_width": _positive_integer,
     "display_expand_attrs": lambda choice: choice in [True, False, "default"],
@@ -154,6 +157,9 @@ class set_options:
         * ``default`` : to expand unless over a pre-defined limit
     display_max_rows : int, default: 12
         Maximum display rows.
+    display_values_threshold : int, default: 200
+        Total number of array elements which trigger summarization rather
+        than full repr for variable data views (numpy arrays).
     display_style : {"text", "html"}, default: "html"
         Display style to use in jupyter for xarray objects.
     display_width : int, default: 80
diff --git a/xarray/tests/test_formatting.py b/xarray/tests/test_formatting.py
deleted file mode 100644
index 105cec7e..00000000
--- a/xarray/tests/test_formatting.py
+++ /dev/null
@@ -1,601 +0,0 @@
-import sys
-from textwrap import dedent
-
-import numpy as np
-import pandas as pd
-import pytest
-from numpy.core import defchararray
-
-import xarray as xr
-from xarray.core import formatting
-
-from . import requires_netCDF4
-
-
-class TestFormatting:
-    def test_get_indexer_at_least_n_items(self) -> None:
-        cases = [
-            ((20,), (slice(10),), (slice(-10, None),)),
-            ((3, 20), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 10), (0, slice(10)), (-1, slice(-10, None))),
-            ((2, 5), (slice(2), slice(None)), (slice(-2, None), slice(None))),
-            ((1, 2, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            ((2, 3, 5), (0, slice(2), slice(None)), (-1, slice(-2, None), slice(None))),
-            (
-                (1, 10, 1),
-                (0, slice(10), slice(None)),
-                (-1, slice(-10, None), slice(None)),
-            ),
-            (
-                (2, 5, 1),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-            ((2, 5, 3), (0, slice(4), slice(None)), (-1, slice(-4, None), slice(None))),
-            (
-                (2, 3, 3),
-                (slice(2), slice(None), slice(None)),
-                (slice(-2, None), slice(None), slice(None)),
-            ),
-        ]
-        for shape, start_expected, end_expected in cases:
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=False)
-            assert start_expected == actual
-            actual = formatting._get_indexer_at_least_n_items(shape, 10, from_end=True)
-            assert end_expected == actual
-
-    def test_first_n_items(self) -> None:
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.first_n_items(array, n)
-            expected = array.flat[:n]
-            assert (expected == actual).all()
-
-        with pytest.raises(ValueError, match=r"at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_n_items(self) -> None:
-        array = np.arange(100).reshape(10, 5, 2)
-        for n in [3, 10, 13, 100, 200]:
-            actual = formatting.last_n_items(array, n)
-            expected = array.flat[-n:]
-            assert (expected == actual).all()
-
-        with pytest.raises(ValueError, match=r"at least one item"):
-            formatting.first_n_items(array, 0)
-
-    def test_last_item(self) -> None:
-        array = np.arange(100)
-
-        reshape = ((10, 10), (1, 100), (2, 2, 5, 5))
-        expected = np.array([99])
-
-        for r in reshape:
-            result = formatting.last_item(array.reshape(r))
-            assert result == expected
-
-    def test_format_item(self) -> None:
-        cases = [
-            (pd.Timestamp("2000-01-01T12"), "2000-01-01T12:00:00"),
-            (pd.Timestamp("2000-01-01"), "2000-01-01"),
-            (pd.Timestamp("NaT"), "NaT"),
-            (pd.Timedelta("10 days 1 hour"), "10 days 01:00:00"),
-            (pd.Timedelta("-3 days"), "-3 days +00:00:00"),
-            (pd.Timedelta("3 hours"), "0 days 03:00:00"),
-            (pd.Timedelta("NaT"), "NaT"),
-            ("foo", "'foo'"),
-            (b"foo", "b'foo'"),
-            (1, "1"),
-            (1.0, "1.0"),
-            (np.float16(1.1234), "1.123"),
-            (np.float32(1.0111111), "1.011"),
-            (np.float64(22.222222), "22.22"),
-        ]
-        for item, expected in cases:
-            actual = formatting.format_item(item)
-            assert expected == actual
-
-    def test_format_items(self) -> None:
-        cases = [
-            (np.arange(4) * np.timedelta64(1, "D"), "0 days 1 days 2 days 3 days"),
-            (
-                np.arange(4) * np.timedelta64(3, "h"),
-                "00:00:00 03:00:00 06:00:00 09:00:00",
-            ),
-            (
-                np.arange(4) * np.timedelta64(500, "ms"),
-                "00:00:00 00:00:00.500000 00:00:01 00:00:01.500000",
-            ),
-            (pd.to_timedelta(["NaT", "0s", "1s", "NaT"]), "NaT 00:00:00 00:00:01 NaT"),
-            (
-                pd.to_timedelta(["1 day 1 hour", "1 day", "0 hours"]),
-                "1 days 01:00:00 1 days 00:00:00 0 days 00:00:00",
-            ),
-            ([1, 2, 3], "1 2 3"),
-        ]
-        for item, expected in cases:
-            actual = " ".join(formatting.format_items(item))
-            assert expected == actual
-
-    def test_format_array_flat(self) -> None:
-        actual = formatting.format_array_flat(np.arange(100), 2)
-        expected = "..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 9)
-        expected = "0 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 10)
-        expected = "0 1 ... 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 13)
-        expected = "0 1 ... 98 99"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100), 15)
-        expected = "0 1 2 ... 98 99"
-        assert expected == actual
-
-        # NB: Probably not ideal; an alternative would be cutting after the
-        # first ellipsis
-        actual = formatting.format_array_flat(np.arange(100.0), 11)
-        expected = "0.0 ... ..."
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(100.0), 12)
-        expected = "0.0 ... 99.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(3), 5)
-        expected = "0 1 2"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4.0), 11)
-        expected = "0.0 ... 3.0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(0), 0)
-        expected = ""
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(1), 1)
-        expected = "0"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(2), 3)
-        expected = "0 1"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(4), 7)
-        expected = "0 1 2 3"
-        assert expected == actual
-
-        actual = formatting.format_array_flat(np.arange(5), 7)
-        expected = "0 ... 4"
-        assert expected == actual
-
-        long_str = [" ".join(["hello world" for _ in range(100)])]
-        actual = formatting.format_array_flat(np.asarray([long_str]), 21)
-        expected = "'hello world hello..."
-        assert expected == actual
-
-    def test_pretty_print(self) -> None:
-        assert formatting.pretty_print("abcdefghij", 8) == "abcde..."
-        assert formatting.pretty_print("ß", 1) == "ß"
-
-    def test_maybe_truncate(self) -> None:
-        assert formatting.maybe_truncate("ß", 10) == "ß"
-
-    def test_format_timestamp_invalid_pandas_format(self) -> None:
-        expected = "2021-12-06 17:00:00 00"
-        with pytest.raises(ValueError):
-            formatting.format_timestamp(expected)
-
-    def test_format_timestamp_out_of_bounds(self) -> None:
-        from datetime import datetime
-
-        date = datetime(1300, 12, 1)
-        expected = "1300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-        date = datetime(2300, 12, 1)
-        expected = "2300-12-01"
-        result = formatting.format_timestamp(date)
-        assert result == expected
-
-    def test_attribute_repr(self) -> None:
-        short = formatting.summarize_attr("key", "Short string")
-        long = formatting.summarize_attr("key", 100 * "Very long string ")
-        newlines = formatting.summarize_attr("key", "\n\n\n")
-        tabs = formatting.summarize_attr("key", "\t\t\t")
-        assert short == "    key: Short string"
-        assert len(long) <= 80
-        assert long.endswith("...")
-        assert "\n" not in newlines
-        assert "\t" not in tabs
-
-    def test_diff_array_repr(self) -> None:
-        da_a = xr.DataArray(
-            np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"),
-            dims=("x", "y"),
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        da_b = xr.DataArray(
-            np.array([1, 2], dtype="int64"),
-            dims="x",
-            coords={
-                "x": np.array(["a", "c"], dtype="U1"),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right DataArray objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing values:
-        L
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)
-        R
-            array([1, 2], dtype=int64)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_array_repr(da_a, da_b, "identical")
-        try:
-            assert actual == expected
-        except AssertionError:
-            # depending on platform, dtype may not be shown in numpy array repr
-            assert actual == expected.replace(", dtype=int64", "")
-
-        va = xr.Variable(
-            "x", np.array([1, 2, 3], dtype="int64"), {"title": "test Variable"}
-        )
-        vb = xr.Variable(("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64"))
-
-        expected = dedent(
-            """\
-        Left and right Variable objects are not equal
-        Differing dimensions:
-            (x: 3) != (x: 2, y: 3)
-        Differing values:
-        L
-            array([1, 2, 3], dtype=int64)
-        R
-            array([[1, 2, 3],
-                   [4, 5, 6]], dtype=int64)"""
-        )
-
-        actual = formatting.diff_array_repr(va, vb, "equals")
-        try:
-            assert actual == expected
-        except AssertionError:
-            assert actual == expected.replace(", dtype=int64", "")
-
-    @pytest.mark.filterwarnings("error")
-    def test_diff_attrs_repr_with_array(self) -> None:
-        attrs_a = {"attr": np.array([0, 1])}
-
-        attrs_b = {"attr": 1}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: 1
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_b, "equals")
-        assert expected == actual
-
-        attrs_c = {"attr": np.array([-3, 5])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [-3  5]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_c, "equals")
-        assert expected == actual
-
-        # should not raise a warning
-        attrs_c = {"attr": np.array([0, 1, 2])}
-        expected = dedent(
-            """\
-            Differing attributes:
-            L   attr: [0 1]
-            R   attr: [0 1 2]
-            """
-        ).strip()
-        actual = formatting.diff_attrs_repr(attrs_a, attrs_c, "equals")
-        assert expected == actual
-
-    def test_diff_dataset_repr(self) -> None:
-        ds_a = xr.Dataset(
-            data_vars={
-                "var1": (("x", "y"), np.array([[1, 2, 3], [4, 5, 6]], dtype="int64")),
-                "var2": ("x", np.array([3, 4], dtype="int64")),
-            },
-            coords={
-                "x": np.array(["a", "b"], dtype="U1"),
-                "y": np.array([1, 2, 3], dtype="int64"),
-            },
-            attrs={"units": "m", "description": "desc"},
-        )
-
-        ds_b = xr.Dataset(
-            data_vars={"var1": ("x", np.array([1, 2], dtype="int64"))},
-            coords={
-                "x": ("x", np.array(["a", "c"], dtype="U1"), {"source": 0}),
-                "label": ("x", np.array([1, 2], dtype="int64")),
-            },
-            attrs={"units": "kg"},
-        )
-
-        byteorder = "<" if sys.byteorder == "little" else ">"
-        expected = dedent(
-            """\
-        Left and right Dataset objects are not identical
-        Differing dimensions:
-            (x: 2, y: 3) != (x: 2)
-        Differing coordinates:
-        L * x        (x) %cU1 'a' 'b'
-        R * x        (x) %cU1 'a' 'c'
-            source: 0
-        Coordinates only on the left object:
-          * y        (y) int64 1 2 3
-        Coordinates only on the right object:
-            label    (x) int64 1 2
-        Differing data variables:
-        L   var1     (x, y) int64 1 2 3 4 5 6
-        R   var1     (x) int64 1 2
-        Data variables only on the left object:
-            var2     (x) int64 3 4
-        Differing attributes:
-        L   units: m
-        R   units: kg
-        Attributes only on the left object:
-            description: desc"""
-            % (byteorder, byteorder)
-        )
-
-        actual = formatting.diff_dataset_repr(ds_a, ds_b, "identical")
-        assert actual == expected
-
-    def test_array_repr(self) -> None:
-        ds = xr.Dataset(coords={"foo": [1, 2, 3], "bar": [1, 2, 3]})
-        ds[(1, 2)] = xr.DataArray([0], dims="test")
-        actual = formatting.array_repr(ds[(1, 2)])
-        expected = dedent(
-            """\
-        <xarray.DataArray (1, 2) (test: 1)>
-        array([0])
-        Dimensions without coordinates: test"""
-        )
-
-        assert actual == expected
-
-        with xr.set_options(display_expand_data=False):
-            actual = formatting.array_repr(ds[(1, 2)])
-            expected = dedent(
-                """\
-            <xarray.DataArray (1, 2) (test: 1)>
-            0
-            Dimensions without coordinates: test"""
-            )
-
-            assert actual == expected
-
-    def test_array_repr_variable(self) -> None:
-        var = xr.Variable("x", [0, 1])
-
-        formatting.array_repr(var)
-
-        with xr.set_options(display_expand_data=False):
-            formatting.array_repr(var)
-
-
-def test_inline_variable_array_repr_custom_repr() -> None:
-    class CustomArray:
-        def __init__(self, value, attr):
-            self.value = value
-            self.attr = attr
-
-        def _repr_inline_(self, width):
-            formatted = f"({self.attr}) {self.value}"
-            if len(formatted) > width:
-                formatted = f"({self.attr}) ..."
-
-            return formatted
-
-        def __array_function__(self, *args, **kwargs):
-            return NotImplemented
-
-        @property
-        def shape(self):
-            return self.value.shape
-
-        @property
-        def dtype(self):
-            return self.value.dtype
-
-        @property
-        def ndim(self):
-            return self.value.ndim
-
-    value = CustomArray(np.array([20, 40]), "m")
-    variable = xr.Variable("x", value)
-
-    max_width = 10
-    actual = formatting.inline_variable_array_repr(variable, max_width=10)
-
-    assert actual == value._repr_inline_(max_width)
-
-
-def test_set_numpy_options() -> None:
-    original_options = np.get_printoptions()
-    with formatting.set_numpy_options(threshold=10):
-        assert len(repr(np.arange(500))) < 200
-    # original options are restored
-    assert np.get_printoptions() == original_options
-
-
-def test_short_numpy_repr() -> None:
-    cases = [
-        np.random.randn(500),
-        np.random.randn(20, 20),
-        np.random.randn(5, 10, 15),
-        np.random.randn(5, 10, 15, 3),
-        np.random.randn(100, 5, 1),
-    ]
-    # number of lines:
-    # for default numpy repr: 167, 140, 254, 248, 599
-    # for short_numpy_repr: 1, 7, 24, 19, 25
-    for array in cases:
-        num_lines = formatting.short_numpy_repr(array).count("\n") + 1
-        assert num_lines < 30
-
-
-def test_large_array_repr_length() -> None:
-
-    da = xr.DataArray(np.random.randn(100, 5, 1))
-
-    result = repr(da).splitlines()
-    assert len(result) < 50
-
-
-@requires_netCDF4
-def test_repr_file_collapsed(tmp_path) -> None:
-    arr = xr.DataArray(np.arange(300), dims="test")
-    arr.to_netcdf(tmp_path / "test.nc", engine="netcdf4")
-
-    with xr.open_dataarray(tmp_path / "test.nc") as arr, xr.set_options(
-        display_expand_data=False
-    ):
-        actual = formatting.array_repr(arr)
-        expected = dedent(
-            """\
-        <xarray.DataArray (test: 300)>
-        array([  0,   1,   2, ..., 297, 298, 299])
-        Dimensions without coordinates: test"""
-        )
-
-        assert actual == expected
-
-
-@pytest.mark.parametrize(
-    "display_max_rows, n_vars, n_attr",
-    [(50, 40, 30), (35, 40, 30), (11, 40, 30), (1, 40, 30)],
-)
-def test__mapping_repr(display_max_rows, n_vars, n_attr) -> None:
-    long_name = "long_name"
-    a = defchararray.add(long_name, np.arange(0, n_vars).astype(str))
-    b = defchararray.add("attr_", np.arange(0, n_attr).astype(str))
-    c = defchararray.add("coord", np.arange(0, n_vars).astype(str))
-    attrs = {k: 2 for k in b}
-    coords = {_c: np.array([0, 1]) for _c in c}
-    data_vars = dict()
-    for (v, _c) in zip(a, coords.items()):
-        data_vars[v] = xr.DataArray(
-            name=v,
-            data=np.array([3, 4]),
-            dims=[_c[0]],
-            coords=dict([_c]),
-        )
-    ds = xr.Dataset(data_vars)
-    ds.attrs = attrs
-
-    with xr.set_options(display_max_rows=display_max_rows):
-
-        # Parse the data_vars print and show only data_vars rows:
-        summary = formatting.dataset_repr(ds).split("\n")
-        summary = [v for v in summary if long_name in v]
-        # The length should be less than or equal to display_max_rows:
-        len_summary = len(summary)
-        data_vars_print_size = min(display_max_rows, len_summary)
-        assert len_summary == data_vars_print_size
-
-        summary = formatting.data_vars_repr(ds.data_vars).split("\n")
-        summary = [v for v in summary if long_name in v]
-        # The length should be equal to the number of data variables
-        len_summary = len(summary)
-        assert len_summary == n_vars
-
-        summary = formatting.coords_repr(ds.coords).split("\n")
-        summary = [v for v in summary if "coord" in v]
-        # The length should be equal to the number of data variables
-        len_summary = len(summary)
-        assert len_summary == n_vars
-
-    with xr.set_options(
-        display_max_rows=display_max_rows,
-        display_expand_coords=False,
-        display_expand_data_vars=False,
-        display_expand_attrs=False,
-    ):
-        actual = formatting.dataset_repr(ds)
-        col_width = formatting._calculate_col_width(ds.variables)
-        dims_start = formatting.pretty_print("Dimensions:", col_width)
-        dims_values = formatting.dim_summary_limited(
-            ds, col_width=col_width + 1, max_rows=display_max_rows
-        )
-        expected = f"""\
-<xarray.Dataset>
-{dims_start}({dims_values})
-Coordinates: ({n_vars})
-Data variables: ({n_vars})
-Attributes: ({n_attr})"""
-        expected = dedent(expected)
-        assert actual == expected
-
-
-def test__element_formatter(n_elements: int = 100) -> None:
-    expected = """\
-    Dimensions without coordinates: dim_0: 3, dim_1: 3, dim_2: 3, dim_3: 3,
-                                    dim_4: 3, dim_5: 3, dim_6: 3, dim_7: 3,
-                                    dim_8: 3, dim_9: 3, dim_10: 3, dim_11: 3,
-                                    dim_12: 3, dim_13: 3, dim_14: 3, dim_15: 3,
-                                    dim_16: 3, dim_17: 3, dim_18: 3, dim_19: 3,
-                                    dim_20: 3, dim_21: 3, dim_22: 3, dim_23: 3,
-                                    ...
-                                    dim_76: 3, dim_77: 3, dim_78: 3, dim_79: 3,
-                                    dim_80: 3, dim_81: 3, dim_82: 3, dim_83: 3,
-                                    dim_84: 3, dim_85: 3, dim_86: 3, dim_87: 3,
-                                    dim_88: 3, dim_89: 3, dim_90: 3, dim_91: 3,
-                                    dim_92: 3, dim_93: 3, dim_94: 3, dim_95: 3,
-                                    dim_96: 3, dim_97: 3, dim_98: 3, dim_99: 3"""
-    expected = dedent(expected)
-
-    intro = "Dimensions without coordinates: "
-    elements = [
-        f"{k}: {v}" for k, v in {f"dim_{k}": 3 for k in np.arange(n_elements)}.items()
-    ]
-    values = xr.core.formatting._element_formatter(
-        elements, col_width=len(intro), max_rows=12
-    )
-    actual = intro + values
-    assert expected == actual
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.18 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.3.1.dev30+g8448f87b.d20250207) (1.23.0)
Requirement already satisfied: pandas>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.3.1.dev30+g8448f87b.d20250207) (1.5.3)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.3.1.dev30+g8448f87b.d20250207) (23.1)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.1->xarray==2022.3.1.dev30+g8448f87b.d20250207) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.1->xarray==2022.3.1.dev30+g8448f87b.d20250207) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=1.1->xarray==2022.3.1.dev30+g8448f87b.d20250207) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-2022.3.1.dev30+g8448f87b.d20250207-0.editable-py3-none-any.whl size=9124 sha256=7817ac02de6c57581510e6c813f90682d369453980cfb7567b372e69175292c1
  Stored in directory: /tmp/pip-ephem-wheel-cache-s_1oe_0x/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 2022.3.1.dev30+g8448f87b
    Uninstalling xarray-2022.3.1.dev30+g8448f87b:
      Successfully uninstalled xarray-2022.3.1.dev30+g8448f87b
Successfully installed xarray-2022.3.1.dev30+g8448f87b.d20250207
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 18 items

xarray/tests/test_formatting.py ..................                       [100%]

==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_formatting.py::test_maybe_truncate
PASSED xarray/tests/test_formatting.py::test_wrap_indent
PASSED xarray/tests/test_formatting.py::test_first_n_items
PASSED xarray/tests/test_formatting.py::test_last_n_items
PASSED xarray/tests/test_formatting.py::test_last_item
PASSED xarray/tests/test_formatting.py::test_calc_max_rows_first
PASSED xarray/tests/test_formatting.py::test_calc_max_rows_last
PASSED xarray/tests/test_formatting.py::test_format_timestamp
PASSED xarray/tests/test_formatting.py::test_format_timedelta
PASSED xarray/tests/test_formatting.py::test_format_item
PASSED xarray/tests/test_formatting.py::test_format_items
PASSED xarray/tests/test_formatting.py::test_format_array_flat
PASSED xarray/tests/test_formatting.py::test_summarize_attr
PASSED xarray/tests/test_formatting.py::test_empty_repr
PASSED xarray/tests/test_formatting.py::test_calculate_col_width
PASSED xarray/tests/test_formatting.py::test_limit_lines
PASSED xarray/tests/test_formatting.py::test_short_numpy_repr
PASSED xarray/tests/test_formatting.py::test_diff_dim_summary
============================== 18 passed in 0.34s ==============================

