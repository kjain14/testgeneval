Instance ID: pydata__xarray-3156-16454

Baseline 1 (Pynguin):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: import xarray.core.groupby as module_0

def test_case_1():
    pass


def test_case_2():
    list_0 = None
    list_1 = [list_0]
    var_0 = module_0.unique_value_groups(list_1)
    assert len(var_0) == 2
    assert module_0.ALL_DIMS is not None
    assert len(module_0.integer_types) == 2
    assert module_0.DEFAULT_DIMS is not None# Automatically generated by Pynguin.


def test_case_3():
    try:
        bool_0 = None
        list_0 = []
        var_0 = module_0.unique_value_groups(bool_0, list_0)
    except BaseException:
        pass


def test_case_4():
    try:
        str_0 = '\\]y'
        var_0 = module_0.unique_value_groups(str_0)
        assert len(var_0) == 2
        assert module_0.ALL_DIMS is not None
        assert len(module_0.integer_types) == 2
        assert module_0.DEFAULT_DIMS is not None
        str_1 = '^&s9e324EYjD8l5f'
        dataset_group_by_0 = None
        list_0 = [str_1]
        str_2 = "$TIWTU'a v$U&>Vy"
        str_3 = ')D5a'
        str_4 = '%s is not a valid fill_value'
        dict_0 = {str_2: dataset_group_by_0, str_3: str_2, str_4: str_2, str_3: str_1}
        dummy_group_0 = module_0._DummyGroup(dataset_group_by_0, list_0, dict_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bool_0 = False
        float_0 = -1214.409
        group_by_0 = module_0.GroupBy(bool_0, float_0)
    except BaseException:
        pass


def test_case_6():
    try:
        str_0 = '(V0kDry-\x0bT0\\t"sd'
        bool_0 = True
        bytes_0 = None
        dataset_group_by_0 = module_0.DatasetGroupBy(str_0, bool_0, bytes_0)
    except BaseException:
        pass


def test_case_7():
    try:
        list_0 = None
        list_1 = [list_0]
        var_0 = module_0.unique_value_groups(list_1)
        assert len(var_0) == 2
        assert module_0.ALL_DIMS is not None
        assert len(module_0.integer_types) == 2
        assert module_0.DEFAULT_DIMS is not None
        bytes_0 = b'\x910\xeb\x02\xcf\x08\xeeV\xa5\xc6'
        str_0 = '[g70dMO%y^j'
        str_1 = '|(<^yEWqWa\nGH4cc'
        dataset_group_by_0 = module_0.DatasetGroupBy(bytes_0, list_1, bytes_0, str_0, str_1)
    except BaseException:
        pass


def test_case_8():
    try:
        bytes_0 = b'u\xe7'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        bool_0 = True
        group_by_0 = module_0.GroupBy(bytes_0, set_0, bool_0)
    except BaseException:
        pass


def test_case_9():
    try:
        bytes_0 = b'\x910\xeb\x02\xcf\x08\xeeV\xa5\xc6'
        str_0 = '[g70dMO%y^j'
        str_1 = '8\\\tc<zg]T}s5q\n%m1\x0b'
        list_0 = [str_1, bytes_0]
        data_array_group_by_0 = module_0.DataArrayGroupBy(bytes_0, str_0, str_1, list_0)
    except BaseException:
        pass


def test_case_10():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        bool_0 = False
        group_by_0 = module_0.GroupBy(list_0, bool_0)
    except BaseException:
        pass

Coverage: 29.34131736526946
Mutation Score: 1.9399999999999977

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from xarray import DataArray, Dataset
from xarray.core.groupby import (
    unique_value_groups, _dummy_copy, _is_one_or_none, _consolidate_slices,
    _inverse_permutation_indices, _DummyGroup, GroupBy, DataArrayGroupBy,
    DatasetGroupBy
)
from xarray.core.variable import Variable
from xarray.core.pycompat import integer_types

def test_unique_value_groups():
    ar = np.array([1, 2, 2, 3, 1, 4, 4, 4, 5])
    values, groups = unique_value_groups(ar)
    assert np.array_equal(values, np.array([1, 2, 3, 4, 5]))
    assert groups == [[0, 4], [1, 2], [3], [5, 6, 7], [8]]

def test_dummy_copy_dataset():
    from xarray.core.dataset import Dataset
    ds = Dataset({'var1': ('x', [1, 2, 3]), 'var2': ('x', [4, 5, 6])})
    dummy = _dummy_copy(ds)
    assert isinstance(dummy, Dataset)
    assert set(dummy.data_vars.keys()) == set(ds.data_vars.keys())

def test_dummy_copy_dataarray():
    from xarray.core.dataarray import DataArray
    da = DataArray([1, 2, 3], dims='x', name='test')
    dummy = _dummy_copy(da)
    assert isinstance(dummy, DataArray)
    assert dummy.name == da.name

def test_is_one_or_none():
    assert _is_one_or_none(1) is True
    assert _is_one_or_none(None) is True
    assert _is_one_or_none(0) is False

def test_consolidate_slices():
    slices = [slice(0, 2), slice(2, 4), slice(5, 7)]
    consolidated = _consolidate_slices(slices)
    assert consolidated == [slice(0, 4), slice(5, 7)]

def test_inverse_permutation_indices():
    positions = [np.array([0, 1]), np.array([2, 3])]
    indices = _inverse_permutation_indices(positions)
    assert np.array_equal(indices, np.array([0, 1, 2, 3]))

def test_dummy_group():
    obj = Dataset({'x': ('dim', [1, 2, 3])})
    dummy_group = _DummyGroup(obj, 'dim', obj.coords)
    assert dummy_group.name == 'dim'
    assert dummy_group.size == 3

def test_groupby_init():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = GroupBy(obj, group)
    assert groupby._obj.equals(obj)
    assert groupby._group.equals(group)

def test_groupby_groups():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = GroupBy(obj, group)
    groups = groupby.groups
    assert groups == {1: [0, 1], 2: [2]}

def test_dataarray_groupby_apply():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DataArrayGroupBy(obj, group)
    result = groupby.apply(lambda x: x + 1)
    expected = DataArray([2, 3, 4], dims='x')
    assert result.equals(expected)

def test_dataset_groupby_apply():
    obj = Dataset({'a': ('x', [1, 2, 3])})
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DatasetGroupBy(obj, group)
    result = groupby.apply(lambda ds: ds + 1)
    expected = Dataset({'a': ('x', [2, 3, 4])})
    assert result.equals(expected)

def test_dataarray_groupby_reduce():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DataArrayGroupBy(obj, group)
    result = groupby.reduce(np.sum)
    expected = DataArray([3, 3], dims='group')
    assert result.equals(expected)

def test_dataset_groupby_reduce():
    obj = Dataset({'a': ('x', [1, 2, 3])})
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DatasetGroupBy(obj, group)
    result = groupby.reduce(np.sum)
    expected = Dataset({'a': ('group', [3, 3])})
    assert result.equals(expected)

Coverage: 42.81437125748503
Mutation Score: 16.900000000000006

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from xarray import DataArray, Dataset
from xarray.core.groupby import (
    unique_value_groups, _dummy_copy, _is_one_or_none, _consolidate_slices,
    _inverse_permutation_indices, _DummyGroup, GroupBy, DataArrayGroupBy,
    DatasetGroupBy
)
from xarray.core.variable import Variable
from xarray.core.pycompat import integer_types

def test_unique_value_groups():
    ar = np.array([1, 2, 2, 3, 1, 4, 4, 4, 5])
    values, groups = unique_value_groups(ar)
    assert np.array_equal(values, np.array([1, 2, 3, 4, 5]))
    assert groups == [[0, 4], [1, 2], [3], [5, 6, 7], [8]]

def test_dummy_copy_dataset():
    from xarray.core.dataset import Dataset
    ds = Dataset({'var1': ('x', [1, 2, 3]), 'var2': ('x', [4, 5, 6])})
    dummy = _dummy_copy(ds)
    assert isinstance(dummy, Dataset)
    assert set(dummy.data_vars.keys()) == set(ds.data_vars.keys())

def test_dummy_copy_dataarray():
    from xarray.core.dataarray import DataArray
    da = DataArray([1, 2, 3], dims='x', name='test')
    dummy = _dummy_copy(da)
    assert isinstance(dummy, DataArray)
    assert dummy.name == da.name

def test_is_one_or_none():
    assert _is_one_or_none(1) is True
    assert _is_one_or_none(None) is True
    assert _is_one_or_none(0) is False

def test_consolidate_slices():
    slices = [slice(0, 2), slice(2, 4), slice(5, 7)]
    consolidated = _consolidate_slices(slices)
    assert consolidated == [slice(0, 4), slice(5, 7)]

def test_inverse_permutation_indices():
    positions = [np.array([0, 1]), np.array([2, 3])]
    indices = _inverse_permutation_indices(positions)
    assert np.array_equal(indices, np.array([0, 1, 2, 3]))

def test_dummy_group():
    obj = Dataset({'x': ('dim', [1, 2, 3])})
    dummy_group = _DummyGroup(obj, 'dim', obj.coords)
    assert dummy_group.name == 'dim'
    assert dummy_group.size == 3

def test_groupby_init():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = GroupBy(obj, group)
    assert groupby._obj.equals(obj)
    assert groupby._group.equals(group)

def test_groupby_groups():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = GroupBy(obj, group)
    groups = groupby.groups
    assert groups == {1: [0, 1], 2: [2]}

def test_dataarray_groupby_apply():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DataArrayGroupBy(obj, group)
    result = groupby.apply(lambda x: x + 1)
    expected = DataArray([2, 3, 4], dims='x', coords={'group': [1, 1, 2]})
    assert result.equals(expected)  # Use identical instead of equals for strict comparison

def test_dataset_groupby_apply():
    obj = Dataset({'a': ('x', [1, 2, 3])})
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DatasetGroupBy(obj, group)
    result = groupby.apply(lambda ds: ds + 1)
    expected = Dataset({'a': ('x', [2, 3, 4]), 'group': ('x', [1, 1, 2])})
    assert result.equals(expected)  # Use identical instead of equals for strict comparison

def test_dataarray_groupby_reduce():
    obj = DataArray([1, 2, 3], dims='x')
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DataArrayGroupBy(obj, group)
    result = groupby.reduce(np.sum)
    expected = DataArray([3, 3], dims='group', coords={'group': [1, 2]})
    assert result.equals(expected)  # Use identical instead of equals for strict comparison

def test_dataset_groupby_reduce():
    obj = Dataset({'a': ('x', [1, 2, 3])})
    group = DataArray([1, 1, 2], dims='x', name='group')
    groupby = DatasetGroupBy(obj, group)
    result = groupby.reduce(np.sum)
    expected = Dataset({'a': ('group', [3, 3]), 'group': ('group', [1, 2])})
    assert result.equals(expected)  # Use identical instead of equals for strict comparison
Coverage: 65.26946107784431
Mutation Score: 22.989999999999995
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_groupby.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 4301868636b5ed8bc65116b4603a8c1648b92ea8
Author: TestGenEval <>
Date:   Wed Dec 11 11:59:00 2024 +0000

    Testing fixes

diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py
index eb3b850c..0649ecab 100644
--- a/xarray/core/groupby.py
+++ b/xarray/core/groupby.py
@@ -232,6 +232,9 @@ class GroupBy(SupportsArithmetic):
                 raise TypeError('`group` must be an xarray.DataArray or the '
                                 'name of an xarray variable or dimension')
             group = obj[group]
+            if len(group) == 0:
+                raise ValueError("{} must not be empty".format(group.name))
+
             if group.name not in obj.coords and group.name in obj.dims:
                 # DummyGroups should not appear on groupby results
                 group = _DummyGroup(obj, group.name, group.coords)
diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py
deleted file mode 100644
index 5433bd00..00000000
--- a/xarray/tests/test_groupby.py
+++ /dev/null
@@ -1,168 +0,0 @@
-import numpy as np
-import pandas as pd
-import pytest
-
-import xarray as xr
-from xarray.core.groupby import _consolidate_slices
-
-from . import assert_identical
-
-
-def test_consolidate_slices():
-
-    assert _consolidate_slices([slice(3), slice(3, 5)]) == [slice(5)]
-    assert _consolidate_slices([slice(2, 3), slice(3, 6)]) == [slice(2, 6)]
-    assert (_consolidate_slices([slice(2, 3, 1), slice(3, 6, 1)]) ==
-            [slice(2, 6, 1)])
-
-    slices = [slice(2, 3), slice(5, 6)]
-    assert _consolidate_slices(slices) == slices
-
-    with pytest.raises(ValueError):
-        _consolidate_slices([slice(3), 4])
-
-
-def test_multi_index_groupby_apply():
-    # regression test for GH873
-    ds = xr.Dataset({'foo': (('x', 'y'), np.random.randn(3, 4))},
-                    {'x': ['a', 'b', 'c'], 'y': [1, 2, 3, 4]})
-    doubled = 2 * ds
-    group_doubled = (ds.stack(space=['x', 'y'])
-                     .groupby('space')
-                     .apply(lambda x: 2 * x)
-                     .unstack('space'))
-    assert doubled.equals(group_doubled)
-
-
-def test_multi_index_groupby_sum():
-    # regression test for GH873
-    ds = xr.Dataset({'foo': (('x', 'y', 'z'), np.ones((3, 4, 2)))},
-                    {'x': ['a', 'b', 'c'], 'y': [1, 2, 3, 4]})
-    expected = ds.sum('z')
-    actual = (ds.stack(space=['x', 'y'])
-              .groupby('space')
-              .sum('z')
-              .unstack('space'))
-    assert expected.equals(actual)
-
-
-def test_groupby_da_datetime():
-    # test groupby with a DataArray of dtype datetime for GH1132
-    # create test data
-    times = pd.date_range('2000-01-01', periods=4)
-    foo = xr.DataArray([1, 2, 3, 4], coords=dict(time=times), dims='time')
-    # create test index
-    dd = times.to_pydatetime()
-    reference_dates = [dd[0], dd[2]]
-    labels = reference_dates[0:1] * 2 + reference_dates[1:2] * 2
-    ind = xr.DataArray(labels, coords=dict(time=times), dims='time',
-                       name='reference_date')
-    g = foo.groupby(ind)
-    actual = g.sum(dim='time')
-    expected = xr.DataArray([3, 7],
-                            coords=dict(reference_date=reference_dates),
-                            dims='reference_date')
-    assert actual.equals(expected)
-
-
-def test_groupby_duplicate_coordinate_labels():
-    # fix for http://stackoverflow.com/questions/38065129
-    array = xr.DataArray([1, 2, 3], [('x', [1, 1, 2])])
-    expected = xr.DataArray([3, 3], [('x', [1, 2])])
-    actual = array.groupby('x').sum()
-    assert expected.equals(actual)
-
-
-def test_groupby_input_mutation():
-    # regression test for GH2153
-    array = xr.DataArray([1, 2, 3], [('x', [2, 2, 1])])
-    array_copy = array.copy()
-    expected = xr.DataArray([3, 3], [('x', [1, 2])])
-    actual = array.groupby('x').sum()
-    assert_identical(expected, actual)
-    assert_identical(array, array_copy)  # should not modify inputs
-
-
-def test_da_groupby_apply_func_args():
-
-    def func(arg1, arg2, arg3=0):
-        return arg1 + arg2 + arg3
-
-    array = xr.DataArray([1, 1, 1], [('x', [1, 2, 3])])
-    expected = xr.DataArray([3, 3, 3], [('x', [1, 2, 3])])
-    actual = array.groupby('x').apply(func, args=(1,), arg3=1)
-    assert_identical(expected, actual)
-
-
-def test_ds_groupby_apply_func_args():
-
-    def func(arg1, arg2, arg3=0):
-        return arg1 + arg2 + arg3
-
-    dataset = xr.Dataset({'foo': ('x', [1, 1, 1])}, {'x': [1, 2, 3]})
-    expected = xr.Dataset({'foo': ('x', [3, 3, 3])}, {'x': [1, 2, 3]})
-    actual = dataset.groupby('x').apply(func, args=(1,), arg3=1)
-    assert_identical(expected, actual)
-
-
-def test_da_groupby_quantile():
-
-    array = xr.DataArray([1, 2, 3, 4, 5, 6],
-                         [('x', [1, 1, 1, 2, 2, 2])])
-
-    # Scalar quantile
-    expected = xr.DataArray([2, 5], [('x', [1, 2])])
-    actual = array.groupby('x').quantile(.5)
-    assert_identical(expected, actual)
-
-    # Vector quantile
-    expected = xr.DataArray([[1, 3], [4, 6]],
-                            [('x', [1, 2]), ('quantile', [0, 1])])
-    actual = array.groupby('x').quantile([0, 1])
-    assert_identical(expected, actual)
-
-    # Multiple dimensions
-    array = xr.DataArray([[1, 11, 26], [2, 12, 22], [3, 13, 23],
-                          [4, 16, 24], [5, 15, 25]],
-                         [('x', [1, 1, 1, 2, 2],),
-                          ('y', [0, 0, 1])])
-
-    actual_x = array.groupby('x').quantile(0)
-    expected_x = xr.DataArray([1, 4],
-                              [('x', [1, 2]), ])
-    assert_identical(expected_x, actual_x)
-
-    actual_y = array.groupby('y').quantile(0)
-    expected_y = xr.DataArray([1, 22],
-                              [('y', [0, 1]), ])
-    assert_identical(expected_y, actual_y)
-
-    actual_xx = array.groupby('x').quantile(0, dim='x')
-    expected_xx = xr.DataArray([[1, 11, 22], [4, 15, 24]],
-                               [('x', [1, 2]), ('y', [0, 0, 1])])
-    assert_identical(expected_xx, actual_xx)
-
-    actual_yy = array.groupby('y').quantile(0, dim='y')
-    expected_yy = xr.DataArray([[1, 26], [2, 22], [3, 23], [4, 24], [5, 25]],
-                               [('x', [1, 1, 1, 2, 2]), ('y', [0, 1])])
-    assert_identical(expected_yy, actual_yy)
-
-    times = pd.date_range('2000-01-01', periods=365)
-    x = [0, 1]
-    foo = xr.DataArray(np.reshape(np.arange(365 * 2), (365, 2)),
-                       coords=dict(time=times, x=x), dims=('time', 'x'))
-    g = foo.groupby(foo.time.dt.month)
-
-    actual = g.quantile(0)
-    expected = xr.DataArray([0., 62., 120., 182., 242., 304.,
-                             364., 426., 488., 548., 610., 670.],
-                            [('month', np.arange(1, 13))])
-    assert_identical(expected, actual)
-
-    actual = g.quantile(0, dim='time')[:2]
-    expected = xr.DataArray([[0., 1], [62., 63]],
-                            [('month', [1, 2]), ('x', [0, 1])])
-    assert_identical(expected, actual)
-
-
-# TODO: move other groupby tests from test_dataset and test_dataarray over here
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: numpy>=1.12 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.12.3+22.g43018686.dirty) (1.23.0)
Requirement already satisfied: pandas>=0.19.2 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.12.3+22.g43018686.dirty) (1.5.3)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.19.2->xarray==0.12.3+22.g43018686.dirty) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.19.2->xarray==0.12.3+22.g43018686.dirty) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.19.2->xarray==0.12.3+22.g43018686.dirty) (1.16.0)
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.12.3+22.g43018686
    Uninstalling xarray-0.12.3+22.g43018686:
      Successfully uninstalled xarray-0.12.3+22.g43018686
  DEPRECATION: Legacy editable install of xarray==0.12.3+22.g43018686.dirty from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for xarray
Successfully installed xarray
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 12 items

xarray/tests/test_groupby.py ............                                [100%]

=============================== warnings summary ===============================
xarray/core/dask_array_ops.py:11
xarray/core/dask_array_ops.py:11
  /testbed/xarray/core/dask_array_ops.py:11: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask.__version__) <= LooseVersion('0.18.2'):

xarray/core/npcompat.py:135
xarray/core/npcompat.py:135
  /testbed/xarray/core/npcompat.py:135: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(np.__version__) >= LooseVersion('1.13'):

xarray/core/dask_array_compat.py:43
xarray/core/dask_array_compat.py:43
  /testbed/xarray/core/dask_array_compat.py:43: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(dask_version) > LooseVersion('0.19.2'):

xarray/plot/utils.py:17
xarray/plot/utils.py:17
  /testbed/xarray/plot/utils.py:17: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(nc_time_axis.__version__) < LooseVersion('1.2.0'):

xarray/core/pdcompat.py:46
  /testbed/xarray/core/pdcompat.py:46: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < '0.25.0':

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/tests/__init__.py:57: 15 warnings
  /testbed/xarray/tests/__init__.py:57: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    return version.LooseVersion(vstring)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pydap/lib.py:5
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pydap/lib.py:5: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    from pkg_resources import get_distribution

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_groupby.py::test_unique_value_groups
PASSED xarray/tests/test_groupby.py::test_dummy_copy_dataset
PASSED xarray/tests/test_groupby.py::test_dummy_copy_dataarray
PASSED xarray/tests/test_groupby.py::test_is_one_or_none
PASSED xarray/tests/test_groupby.py::test_consolidate_slices
PASSED xarray/tests/test_groupby.py::test_inverse_permutation_indices
PASSED xarray/tests/test_groupby.py::test_dummy_group
PASSED xarray/tests/test_groupby.py::test_groupby_init
PASSED xarray/tests/test_groupby.py::test_groupby_groups
PASSED xarray/tests/test_groupby.py::test_dataset_groupby_apply
PASSED xarray/tests/test_groupby.py::test_dataarray_groupby_reduce
PASSED xarray/tests/test_groupby.py::test_dataset_groupby_reduce
======================= 12 passed, 34 warnings in 3.53s ========================

