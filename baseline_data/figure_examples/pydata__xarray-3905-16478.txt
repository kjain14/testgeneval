Instance ID: pydata__xarray-3905-16478

Baseline 1:
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2:
Predicted Test Suite: 
import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from pandas.errors import OutOfBoundsDatetime
from xarray.core import formatting

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 3) == "tes..."

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 3) == "tes..."

def test_wrap_indent():
    text = "line1\nline2"
    expected = "startline1\n      line2"
    assert formatting.wrap_indent(text, start="start", length=6) == expected

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]

def test_format_timestamp():
    ts = pd.Timestamp("2023-01-01")
    assert formatting.format_timestamp(ts) == "2023-01-01"

def test_format_timedelta():
    td = pd.Timedelta(days=1, hours=5)
    assert formatting.format_timedelta(td) == "1 days 05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2023-01-01')) == "2023-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item("test") == "'test'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64('2023-01-01'), timedelta(days=1), "test", 3.14159]
    expected = ["2023-01-01", "1 days 00:00:00", "'test'", "3.142"]
    assert formatting.format_items(items) == expected

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result.startswith("1 ... 5")

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.ndarray((3, 3))

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3, 3), meta=np.ndarray>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 10
        fill_value = 0

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=10, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.dtype('int32')
        _in_memory = True

        def __getitem__(self, key):
            return np.array([1, 2, 3])

    var = MockVariable()
    result = formatting.summarize_variable("var", var, 20)
    assert "var" in result
    assert "int32" in result

def test_summarize_attr():
    result = formatting.summarize_attr("key", "value", 20)
    assert "key:" in result
    assert "value" in result

def test_limit_lines():
    text = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(text, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.short_numpy_repr(array)
    assert "array" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ('x',)
        sizes = {'x': 5}
        data = np.array([1, 2, 3, 4, 5])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result
    assert "x: 5" in result

def test_dataset_repr():
    class MockDataset:
        dims = {'x': 5}
        coords = {}
        data_vars = {}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "<xarray." in result
    assert "Dimensions" in result

Coverage: 36.28808864265928
Mutation Score: 21.72

Approach:
Predicted Test Suite: import pytest
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from pandas.errors import OutOfBoundsDatetime
from xarray.core import formatting

def test_pretty_print():
    assert formatting.pretty_print("test", 10) == "test      "
    assert formatting.pretty_print("test", 3) == "..."

def test_maybe_truncate():
    assert formatting.maybe_truncate("test", 10) == "test"
    assert formatting.maybe_truncate("test", 3) == "..."

def test_wrap_indent():
    text = "line1\nline2"
    expected = "startline1\n      line2"
    assert formatting.wrap_indent(text, start="start", length=6) == expected

def test_first_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.first_n_items(array, 3)) == [1, 2, 3]

def test_last_n_items():
    array = np.array([1, 2, 3, 4, 5])
    assert list(formatting.last_n_items(array, 3)) == [3, 4, 5]

def test_last_item():
    array = np.array([1, 2, 3, 4, 5])
    assert formatting.last_item(array) == [5]

def test_format_timestamp():
    ts = pd.Timestamp("2023-01-01")
    assert formatting.format_timestamp(ts) == "2023-01-01"

def test_format_timedelta():
    td = pd.Timedelta(days=1, hours=5)
    assert formatting.format_timedelta(td) == "1 days 05:00:00"

def test_format_item():
    assert formatting.format_item(np.datetime64('2023-01-01')) == "2023-01-01"
    assert formatting.format_item(timedelta(days=1)) == "1 days 00:00:00"
    assert formatting.format_item("test") == "'test'"
    assert formatting.format_item(3.14159) == "3.142"

def test_format_items():
    items = [np.datetime64('2023-01-01'), timedelta(days=1), "test", 3.14159]
    expected = ["2023-01-01", "1 days 00:00:00", "'test'", "3.142"]
    assert formatting.format_items(items) == expected

def test_format_array_flat():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.format_array_flat(array, 10)
    assert result.startswith("1 ... 5")

def test_inline_dask_repr():
    class MockDaskArray:
        chunks = ((3,), (3,))
        _meta = np.ndarray((3, 3))
        _in_memory = False

    array = MockDaskArray()
    assert formatting.inline_dask_repr(array) == "dask.array<chunksize=(3, 3), meta=np.ndarray>"

def test_inline_sparse_repr():
    class MockSparseArray:
        nnz = 10
        fill_value = 0
        _in_memory = False

    array = MockSparseArray()
    assert formatting.inline_sparse_repr(array) == "<MockSparseArray: nnz=10, fill_value=0>"

def test_summarize_variable():
    class MockVariable:
        dims = ('x',)
        dtype = np.dtype('int32')
        _in_memory = True

        size = 3

        def __getitem__(self, key):
            return np.array([1, 2, 3])

    var = MockVariable()
    result = formatting.summarize_variable("var", var, 20)
    assert "var" in result
    assert "int32" in result

def test_summarize_attr():
    result = formatting.summarize_attr("key", "value", 20)
    assert "key:" in result
    assert "value" in result

def test_limit_lines():
    text = "line1\nline2\nline3\nline4\nline5"
    result = formatting.limit_lines(text, limit=3)
    assert result == "line1\n...\nline5"

def test_short_numpy_repr():
    array = np.array([1, 2, 3, 4, 5])
    result = formatting.short_numpy_repr(array)
    assert "array" in result

def test_array_repr():
    class MockArray:
        name = "mock"
        dims = ('x',)
        sizes = {'x': 5}
        _data = np.array([1, 2, 3, 4, 5])
        coords = {}
        attrs = {}

    arr = MockArray()
    result = formatting.array_repr(arr)
    assert "mock" in result
    assert "x: 5" in result

def test_dataset_repr():
    class MockDataset:
        dims = {'x': 5}
        coords = {}
        variables = {}
        data_vars = {}
        attrs = {}

    ds = MockDataset()
    result = formatting.dataset_repr(ds)
    assert "<xarray." in result
    assert "Dimensions" in result
Coverage: 36.56509695290859
Mutation Score: 24.650000000000006
