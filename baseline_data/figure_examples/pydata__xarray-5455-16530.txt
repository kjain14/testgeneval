Instance ID: pydata__xarray-5455-16530

Baseline 1 (Pynguin):
Predicted Test Suite: 
Coverage: -1
Mutation Score: -1

Baseline 2 (CodaMosa):
Predicted Test Suite: import xarray.backends.plugins as module_0
import xarray.backends.store as module_1

def test_case_1():
    pass


def test_case_2():
    set_0 = set()
    var_0 = module_0.remove_duplicates(set_0)
    assert var_0 == []
    assert len(module_0.BACKEND_ENTRYPOINTS) == 9
    assert module_0.STANDARD_BACKENDS_ORDER == ['netcdf4', 'h5netcdf', 'scipy']


def test_case_3():
    list_0 = []
    var_0 = module_0.build_engines(list_0)
    assert len(var_0) == 1
    assert len(module_0.BACKEND_ENTRYPOINTS) == 9
    assert module_0.STANDARD_BACKENDS_ORDER == ['netcdf4', 'h5netcdf', 'scipy']


def test_case_4():
    str_0 = 'h5netcdf'
    str_1 = 'scipy'
    str_2 = 'netcdf4'
    str_3 = 'custom'
    str_4 = 'another'
    str_5 = 'h5netcdf_backend'
    str_6 = 'scipy_backend'
    str_7 = 'netcdf4_backend'
    str_8 = 'custom_backend'
    str_9 = 'another_backend'
    str_10 = {str_0: str_5, str_1: str_6, str_2: str_7, str_3: str_8, str_4: str_9}
    var_0 = module_0.sort_backends(str_10)
    assert module_0.STANDARD_BACKENDS_ORDER == ['netcdf4', 'h5netcdf', 'scipy']# Automatically generated by Pynguin.


def test_case_5():
    try:
        set_0 = set()
        var_0 = module_0.build_engines(set_0)
        assert len(var_0) == 1
        assert len(module_0.BACKEND_ENTRYPOINTS) == 9
        assert module_0.STANDARD_BACKENDS_ORDER == ['netcdf4', 'h5netcdf', 'scipy']
        bytes_0 = b''
        var_1 = module_0.build_engines(bytes_0)
        assert len(var_1) == 1
    except BaseException:
        pass


def test_case_6():
    try:
        int_0 = -722
        var_0 = module_0.detect_parameters(int_0)
    except BaseException:
        pass


def test_case_7():
    try:
        bool_0 = True
        var_0 = module_0.backends_dict_from_pkg(bool_0)
    except BaseException:
        pass


def test_case_8():
    try:
        str_0 = 'levels'
        var_0 = module_0.backends_dict_from_pkg(str_0)
    except BaseException:
        pass


def test_case_9():
    try:
        bytes_0 = b'q\xcaN\xab'
        var_0 = module_0.set_missing_parameters(bytes_0)
    except BaseException:
        pass


def test_case_10():
    try:
        list_0 = []
        var_0 = module_0.guess_engine(list_0)
    except BaseException:
        pass


def test_case_11():
    try:
        list_0 = []
        var_0 = module_0.guess_engine(list_0)
    except BaseException:
        pass


def test_case_12():
    try:
        list_0 = None
        var_0 = module_0.get_backend(list_0)
    except BaseException:
        pass


def test_case_13():
    try:
        str_0 = 'N9s'
        var_0 = module_0.remove_duplicates(str_0)
    except BaseException:
        pass


def test_case_14():
    try:
        str_0 = '33y$eG'
        var_0 = module_0.get_backend(str_0)
    except BaseException:
        pass


def test_case_15():
    try:
        str_0 = "Like array_equal, but doesn't actually compare values.\n    Returns True when arr1, arr2 identical or their dask tokens are equal.\n    Returns False when shapes are not equal.\n    Returns None when equality cannot determined: one or both of arr1, arr2 are numpy arrays;\n    or their dask tokens are not equal\n    "
        var_0 = module_0.guess_engine(str_0)
    except BaseException:
        pass


def test_case_16():
    try:
        str_0 = 'store'
        var_0 = module_0.get_backend(str_0)
        assert var_0 is not None
        assert len(module_0.BACKEND_ENTRYPOINTS) == 9
        assert module_0.STANDARD_BACKENDS_ORDER == ['netcdf4', 'h5netcdf', 'scipy']
        assert module_1.StoreBackendEntrypoint.available is True
        assert module_1.StoreBackendEntrypoint.open_dataset_parameters == ('store', 'mask_and_scale', 'decode_times', 'concat_characters', 'decode_coords', 'drop_variables', 'use_cftime', 'decode_timedelta')
        str_1 = 'Test with valid engine string passed.'
        var_1 = print(str_1)
        var_2 = module_0.get_backend(var_1)
    except BaseException:
        pass


def test_case_17():
    try:
        str_0 = 'test_data.nc'
        var_0 = module_0.guess_engine(str_0)
    except BaseException:
        pass

Coverage: 90.0
Mutation Score: 0.0

Baseline 3 (GPT-4o):
Predicted Test Suite: 
import warnings
from unittest.mock import MagicMock, patch
import pytest
from xarray.backends import plugins
from xarray.backends.common import BackendEntrypoint

# Mock setup for BACKEND_ENTRYPOINTS
mock_backend_entrypoint = MagicMock(spec=BackendEntrypoint)
mock_backend_entrypoint.available = True
mock_backend_entrypoint.open_dataset_parameters = None
mock_backend_entrypoint.open_dataset = MagicMock()
mock_backend_entrypoint.guess_can_open = MagicMock(return_value=True)

mock_backend_entrypoints = {
    "netcdf4": mock_backend_entrypoint,
    "h5netcdf": mock_backend_entrypoint,
    "scipy": mock_backend_entrypoint,
}

@pytest.fixture
def mock_pkg_entrypoints():
    mock_entrypoint = MagicMock()
    mock_entrypoint.name = "mock_engine"
    mock_entrypoint.module_name = "mock_module"
    mock_entrypoint.load = MagicMock(return_value=mock_backend_entrypoint)
    return [mock_entrypoint]

def test_remove_duplicates(mock_pkg_entrypoints):
    with warnings.catch_warnings(record=True) as w:
        result = plugins.remove_duplicates(mock_pkg_entrypoints)
        assert len(result) == 1
        assert result[0].name == "mock_engine"
        assert len(w) == 0

def test_detect_parameters():
    def mock_open_dataset(self, param1, param2):
        pass

    result = plugins.detect_parameters(mock_open_dataset)
    assert result == ("param1", "param2")

    def mock_open_dataset_with_kwargs(self, *args, **kwargs):
        pass

    with pytest.raises(TypeError):
        plugins.detect_parameters(mock_open_dataset_with_kwargs)

def test_backends_dict_from_pkg(mock_pkg_entrypoints):
    with warnings.catch_warnings(record=True) as w:
        result = plugins.backends_dict_from_pkg(mock_pkg_entrypoints)
        assert "mock_engine" in result
        assert len(w) == 0

def test_set_missing_parameters():
    backend_entrypoints = {"mock_engine": mock_backend_entrypoint}
    plugins.set_missing_parameters(backend_entrypoints)
    assert mock_backend_entrypoint.open_dataset_parameters == ("self",)

def test_sort_backends():
    backend_entrypoints = {
        "mock_engine": mock_backend_entrypoint,
        "netcdf4": mock_backend_entrypoint,
    }
    result = plugins.sort_backends(backend_entrypoints)
    assert list(result.keys()) == ["netcdf4", "mock_engine"]

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_build_engines(mock_pkg_entrypoints):
    result = plugins.build_engines(mock_pkg_entrypoints)
    assert "netcdf4" in result
    assert "mock_engine" in result

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_list_engines(mock_pkg_entrypoints):
    with patch("pkg_resources.iter_entry_points", return_value=mock_pkg_entrypoints):
        result = plugins.list_engines()
        assert "netcdf4" in result
        assert "mock_engine" in result

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_guess_engine(mock_pkg_entrypoints):
    with patch("pkg_resources.iter_entry_points", return_value=mock_pkg_entrypoints):
        engine = plugins.guess_engine("mock_store_spec")
        assert engine == "netcdf4"

    with patch("pkg_resources.iter_entry_points", return_value=[]):
        with pytest.raises(ValueError):
            plugins.guess_engine("mock_store_spec")

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_get_backend():
    with patch("pkg_resources.iter_entry_points", return_value=[]):
        backend = plugins.get_backend("netcdf4")
        assert backend == mock_backend_entrypoint

        with pytest.raises(ValueError):
            plugins.get_backend("unknown_engine")

        with pytest.raises(TypeError):
            plugins.get_backend(123)

Coverage: 48.0
Mutation Score: 34.55

Approach:
Predicted Test Suite: import warnings
from unittest.mock import MagicMock, patch
import pytest
from xarray.backends import plugins
from xarray.backends.common import BackendEntrypoint

# Mock setup for BACKEND_ENTRYPOINTS
mock_backend_entrypoint = MagicMock(spec=BackendEntrypoint)
mock_backend_entrypoint.available = True
mock_backend_entrypoint.open_dataset_parameters = None
def mock_open_dataset(self, param1, param2):
    pass
mock_backend_entrypoint.open_dataset = mock_open_dataset
mock_backend_entrypoint.guess_can_open = MagicMock(side_effect=[False, True])

mock_backend_entrypoints = {
    "netcdf4": mock_backend_entrypoint,
    "h5netcdf": mock_backend_entrypoint,
    "scipy": mock_backend_entrypoint,
}

@pytest.fixture
def mock_pkg_entrypoints():
    mock_entrypoint = MagicMock()
    mock_entrypoint.name = "mock_engine"
    mock_entrypoint.module_name = "mock_module"
    mock_entrypoint.load = MagicMock(return_value=mock_backend_entrypoint)
    return [mock_entrypoint]

def test_remove_duplicates(mock_pkg_entrypoints):
    with warnings.catch_warnings(record=True) as w:
        result = plugins.remove_duplicates(mock_pkg_entrypoints)
        assert len(result) == 1
        assert result[0].name == "mock_engine"
        assert len(w) == 0

def test_detect_parameters():
    def mock_open_dataset(self, param1, param2):
        pass

    result = plugins.detect_parameters(mock_open_dataset)
    assert result == ("param1", "param2")

    def mock_open_dataset_with_kwargs(self, *args, **kwargs):
        pass

    with pytest.raises(TypeError):
        plugins.detect_parameters(mock_open_dataset_with_kwargs)

def test_backends_dict_from_pkg(mock_pkg_entrypoints):
    with warnings.catch_warnings(record=True) as w:
        result = plugins.backends_dict_from_pkg(mock_pkg_entrypoints)
        assert "mock_engine" in result
        assert len(w) == 0

def test_set_missing_parameters():
    backend_entrypoints = {"mock_engine": mock_backend_entrypoint}
    plugins.set_missing_parameters(backend_entrypoints)
    assert mock_backend_entrypoint.open_dataset_parameters == ("param1", "param2")

def test_sort_backends():
    backend_entrypoints = {
        "mock_engine": mock_backend_entrypoint,
        "netcdf4": mock_backend_entrypoint,
    }
    result = plugins.sort_backends(backend_entrypoints)
    assert list(result.keys()) == ["netcdf4", "mock_engine"]

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_build_engines(mock_pkg_entrypoints):
    result = plugins.build_engines(mock_pkg_entrypoints)
    assert "netcdf4" in result
    assert "mock_engine" in result

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_list_engines(mock_pkg_entrypoints):
    with patch("pkg_resources.iter_entry_points", return_value=mock_pkg_entrypoints):
        result = plugins.list_engines()
        assert "netcdf4" in result
        assert "mock_engine" in result

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_guess_engine(mock_pkg_entrypoints):
    with patch("pkg_resources.iter_entry_points", return_value=mock_pkg_entrypoints):
        engine = plugins.guess_engine("mock_store_spec")
        assert engine == "netcdf4"

    with patch("pkg_resources.iter_entry_points", return_value=[]):
        with pytest.raises(ValueError, match='did not find a match in any of xarray'):
            plugins.guess_engine("mock_store_spec")

@patch("xarray.backends.plugins.BACKEND_ENTRYPOINTS", mock_backend_entrypoints)
def test_get_backend():
    with patch("pkg_resources.iter_entry_points", return_value=[]):
        backend = plugins.get_backend("netcdf4")
        assert isinstance(backend, MagicMock)

        with pytest.raises(ValueError):
            plugins.get_backend("unknown_engine")

        with pytest.raises(TypeError):
            plugins.get_backend(123)
Coverage: 72.0
Mutation Score: 47.27
Output: On branch main
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    .coveragerc

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        xarray/tests/test_plugins.py

no changes added to commit (use "git add" and/or "git commit -a")
commit 9bf32f2a0cb30da69d5817f448ad515abc4fd11d
Author: TestGenEval <>
Date:   Wed Dec 11 12:44:46 2024 +0000

    Testing fixes

diff --git a/xarray/backends/cfgrib_.py b/xarray/backends/cfgrib_.py
index 9e5546f0..e7aeaaba 100644
--- a/xarray/backends/cfgrib_.py
+++ b/xarray/backends/cfgrib_.py
@@ -94,6 +94,8 @@ class CfGribDataStore(AbstractDataStore):


 class CfgribfBackendEntrypoint(BackendEntrypoint):
+    available = has_cfgrib
+
     def guess_can_open(self, filename_or_obj):
         try:
             _, ext = os.path.splitext(filename_or_obj)
@@ -147,5 +149,4 @@ class CfgribfBackendEntrypoint(BackendEntrypoint):
         return ds


-if has_cfgrib:
-    BACKEND_ENTRYPOINTS["cfgrib"] = CfgribfBackendEntrypoint
+BACKEND_ENTRYPOINTS["cfgrib"] = CfgribfBackendEntrypoint
diff --git a/xarray/backends/h5netcdf_.py b/xarray/backends/h5netcdf_.py
index a6e04fe7..3a49928e 100644
--- a/xarray/backends/h5netcdf_.py
+++ b/xarray/backends/h5netcdf_.py
@@ -337,6 +337,8 @@ class H5NetCDFStore(WritableCFDataStore):


 class H5netcdfBackendEntrypoint(BackendEntrypoint):
+    available = has_h5netcdf
+
     def guess_can_open(self, filename_or_obj):
         magic_number = try_read_magic_number_from_file_or_path(filename_or_obj)
         if magic_number is not None:
@@ -394,5 +396,4 @@ class H5netcdfBackendEntrypoint(BackendEntrypoint):
         return ds


-if has_h5netcdf:
-    BACKEND_ENTRYPOINTS["h5netcdf"] = H5netcdfBackendEntrypoint
+BACKEND_ENTRYPOINTS["h5netcdf"] = H5netcdfBackendEntrypoint
diff --git a/xarray/backends/netCDF4_.py b/xarray/backends/netCDF4_.py
index 95e8943d..769c96c9 100644
--- a/xarray/backends/netCDF4_.py
+++ b/xarray/backends/netCDF4_.py
@@ -512,6 +512,8 @@ class NetCDF4DataStore(WritableCFDataStore):


 class NetCDF4BackendEntrypoint(BackendEntrypoint):
+    available = has_netcdf4
+
     def guess_can_open(self, filename_or_obj):
         if isinstance(filename_or_obj, str) and is_remote_uri(filename_or_obj):
             return True
@@ -573,5 +575,4 @@ class NetCDF4BackendEntrypoint(BackendEntrypoint):
         return ds


-if has_netcdf4:
-    BACKEND_ENTRYPOINTS["netcdf4"] = NetCDF4BackendEntrypoint
+BACKEND_ENTRYPOINTS["netcdf4"] = NetCDF4BackendEntrypoint
diff --git a/xarray/backends/plugins.py b/xarray/backends/plugins.py
index 63345923..08c1bec8 100644
--- a/xarray/backends/plugins.py
+++ b/xarray/backends/plugins.py
@@ -81,7 +81,10 @@ def sort_backends(backend_entrypoints):


 def build_engines(pkg_entrypoints):
-    backend_entrypoints = BACKEND_ENTRYPOINTS.copy()
+    backend_entrypoints = {}
+    for backend_name, backend in BACKEND_ENTRYPOINTS.items():
+        if backend.available:
+            backend_entrypoints[backend_name] = backend
     pkg_entrypoints = remove_duplicates(pkg_entrypoints)
     external_backend_entrypoints = backends_dict_from_pkg(pkg_entrypoints)
     backend_entrypoints.update(external_backend_entrypoints)
@@ -101,30 +104,49 @@ def guess_engine(store_spec):

     for engine, backend in engines.items():
         try:
-            if backend.guess_can_open and backend.guess_can_open(store_spec):
+            if backend.guess_can_open(store_spec):
                 return engine
         except Exception:
             warnings.warn(f"{engine!r} fails while guessing", RuntimeWarning)

-    installed = [k for k in engines if k != "store"]
-    if installed:
-        raise ValueError(
-            "did not find a match in any of xarray's currently installed IO "
-            f"backends {installed}. Consider explicitly selecting one of the "
-            "installed backends via the ``engine`` parameter to "
-            "xarray.open_dataset(), or installing additional IO dependencies:\n"
-            "http://xarray.pydata.org/en/stable/getting-started-guide/installing.html\n"
-            "http://xarray.pydata.org/en/stable/user-guide/io.html"
-        )
+    compatible_engines = []
+    for engine, backend_cls in BACKEND_ENTRYPOINTS.items():
+        try:
+            backend = backend_cls()
+            if backend.guess_can_open(store_spec):
+                compatible_engines.append(engine)
+        except Exception:
+            warnings.warn(f"{engine!r} fails while guessing", RuntimeWarning)
+
+    installed_engines = [k for k in engines if k != "store"]
+    if not compatible_engines:
+        if installed_engines:
+            error_msg = (
+                "did not find a match in any of xarray's currently installed IO "
+                f"backends {installed_engines}. Consider explicitly selecting one of the "
+                "installed engines via the ``engine`` parameter, or installing "
+                "additional IO dependencies, see:\n"
+                "http://xarray.pydata.org/en/stable/getting-started-guide/installing.html\n"
+                "http://xarray.pydata.org/en/stable/user-guide/io.html"
+            )
+        else:
+            error_msg = (
+                "xarray is unable to open this file because it has no currently "
+                "installed IO backends. Xarray's read/write support requires "
+                "installing optional IO dependencies, see:\n"
+                "http://xarray.pydata.org/en/stable/getting-started-guide/installing.html\n"
+                "http://xarray.pydata.org/en/stable/user-guide/io"
+            )
     else:
-        raise ValueError(
-            "xarray is unable to open this file because it has no currently "
-            "installed IO backends. Xarray's read/write support requires "
-            "installing optional dependencies:\n"
-            "http://xarray.pydata.org/en/stable/getting-started-guide/installing.html\n"
-            "http://xarray.pydata.org/en/stable/user-guide/io.html"
+        error_msg = (
+            "found the following matches with the input file in xarray's IO "
+            f"backends: {compatible_engines}. But their dependencies may not be installed, see:\n"
+            "http://xarray.pydata.org/en/stable/user-guide/io.html \n"
+            "http://xarray.pydata.org/en/stable/getting-started-guide/installing.html"
         )

+    raise ValueError(error_msg)
+

 def get_backend(engine):
     """Select open_dataset method based on current engine."""
diff --git a/xarray/backends/pseudonetcdf_.py b/xarray/backends/pseudonetcdf_.py
index c97c7141..da178926 100644
--- a/xarray/backends/pseudonetcdf_.py
+++ b/xarray/backends/pseudonetcdf_.py
@@ -102,6 +102,7 @@ class PseudoNetCDFDataStore(AbstractDataStore):


 class PseudoNetCDFBackendEntrypoint(BackendEntrypoint):
+    available = has_pseudonetcdf

     # *args and **kwargs are not allowed in open_backend_dataset_ kwargs,
     # unless the open_dataset_parameters are explicity defined like this:
@@ -153,5 +154,4 @@ class PseudoNetCDFBackendEntrypoint(BackendEntrypoint):
         return ds


-if has_pseudonetcdf:
-    BACKEND_ENTRYPOINTS["pseudonetcdf"] = PseudoNetCDFBackendEntrypoint
+BACKEND_ENTRYPOINTS["pseudonetcdf"] = PseudoNetCDFBackendEntrypoint
diff --git a/xarray/backends/pydap_.py b/xarray/backends/pydap_.py
index 25d2df9d..bc479f9a 100644
--- a/xarray/backends/pydap_.py
+++ b/xarray/backends/pydap_.py
@@ -110,6 +110,8 @@ class PydapDataStore(AbstractDataStore):


 class PydapBackendEntrypoint(BackendEntrypoint):
+    available = has_pydap
+
     def guess_can_open(self, filename_or_obj):
         return isinstance(filename_or_obj, str) and is_remote_uri(filename_or_obj)

@@ -154,5 +156,4 @@ class PydapBackendEntrypoint(BackendEntrypoint):
             return ds


-if has_pydap:
-    BACKEND_ENTRYPOINTS["pydap"] = PydapBackendEntrypoint
+BACKEND_ENTRYPOINTS["pydap"] = PydapBackendEntrypoint
diff --git a/xarray/backends/pynio_.py b/xarray/backends/pynio_.py
index bb57e0be..4e912f3e 100644
--- a/xarray/backends/pynio_.py
+++ b/xarray/backends/pynio_.py
@@ -99,6 +99,8 @@ class NioDataStore(AbstractDataStore):


 class PynioBackendEntrypoint(BackendEntrypoint):
+    available = has_pynio
+
     def open_dataset(
         self,
         filename_or_obj,
@@ -112,13 +114,13 @@ class PynioBackendEntrypoint(BackendEntrypoint):
         mode="r",
         lock=None,
     ):
+        filename_or_obj = _normalize_path(filename_or_obj)
         store = NioDataStore(
             filename_or_obj,
             mode=mode,
             lock=lock,
         )

-        filename_or_obj = _normalize_path(filename_or_obj)
         store_entrypoint = StoreBackendEntrypoint()
         with close_on_error(store):
             ds = store_entrypoint.open_dataset(
@@ -134,5 +136,4 @@ class PynioBackendEntrypoint(BackendEntrypoint):
         return ds


-if has_pynio:
-    BACKEND_ENTRYPOINTS["pynio"] = PynioBackendEntrypoint
+BACKEND_ENTRYPOINTS["pynio"] = PynioBackendEntrypoint
diff --git a/xarray/backends/scipy_.py b/xarray/backends/scipy_.py
index 7394770c..4c1ce1ef 100644
--- a/xarray/backends/scipy_.py
+++ b/xarray/backends/scipy_.py
@@ -238,6 +238,8 @@ class ScipyDataStore(WritableCFDataStore):


 class ScipyBackendEntrypoint(BackendEntrypoint):
+    available = has_scipy
+
     def guess_can_open(self, filename_or_obj):

         magic_number = try_read_magic_number_from_file_or_path(filename_or_obj)
@@ -290,5 +292,4 @@ class ScipyBackendEntrypoint(BackendEntrypoint):
         return ds


-if has_scipy:
-    BACKEND_ENTRYPOINTS["scipy"] = ScipyBackendEntrypoint
+BACKEND_ENTRYPOINTS["scipy"] = ScipyBackendEntrypoint
diff --git a/xarray/backends/store.py b/xarray/backends/store.py
index 860a0254..b774d2bc 100644
--- a/xarray/backends/store.py
+++ b/xarray/backends/store.py
@@ -4,6 +4,8 @@ from .common import BACKEND_ENTRYPOINTS, AbstractDataStore, BackendEntrypoint


 class StoreBackendEntrypoint(BackendEntrypoint):
+    available = True
+
     def guess_can_open(self, filename_or_obj):
         return isinstance(filename_or_obj, AbstractDataStore)

diff --git a/xarray/backends/zarr.py b/xarray/backends/zarr.py
index 72c4e992..5b228f77 100644
--- a/xarray/backends/zarr.py
+++ b/xarray/backends/zarr.py
@@ -703,6 +703,15 @@ def open_zarr(


 class ZarrBackendEntrypoint(BackendEntrypoint):
+    available = has_zarr
+
+    def guess_can_open(self, filename_or_obj):
+        try:
+            _, ext = os.path.splitext(filename_or_obj)
+        except TypeError:
+            return False
+        return ext in {".zarr"}
+
     def open_dataset(
         self,
         filename_or_obj,
@@ -757,5 +766,4 @@ class ZarrBackendEntrypoint(BackendEntrypoint):
         return ds


-if has_zarr:
-    BACKEND_ENTRYPOINTS["zarr"] = ZarrBackendEntrypoint
+BACKEND_ENTRYPOINTS["zarr"] = ZarrBackendEntrypoint
diff --git a/xarray/tests/test_plugins.py b/xarray/tests/test_plugins.py
deleted file mode 100644
index b35971e1..00000000
--- a/xarray/tests/test_plugins.py
+++ /dev/null
@@ -1,179 +0,0 @@
-from unittest import mock
-
-import pkg_resources
-import pytest
-
-from xarray.backends import common, plugins
-
-
-class DummyBackendEntrypointArgs(common.BackendEntrypoint):
-    def open_dataset(filename_or_obj, *args):
-        pass
-
-
-class DummyBackendEntrypointKwargs(common.BackendEntrypoint):
-    def open_dataset(filename_or_obj, **kwargs):
-        pass
-
-
-class DummyBackendEntrypoint1(common.BackendEntrypoint):
-    def open_dataset(self, filename_or_obj, *, decoder):
-        pass
-
-
-class DummyBackendEntrypoint2(common.BackendEntrypoint):
-    def open_dataset(self, filename_or_obj, *, decoder):
-        pass
-
-
-@pytest.fixture
-def dummy_duplicated_entrypoints():
-    specs = [
-        "engine1 = xarray.tests.test_plugins:backend_1",
-        "engine1 = xarray.tests.test_plugins:backend_2",
-        "engine2 = xarray.tests.test_plugins:backend_1",
-        "engine2 = xarray.tests.test_plugins:backend_2",
-    ]
-    eps = [pkg_resources.EntryPoint.parse(spec) for spec in specs]
-    return eps
-
-
-@pytest.mark.filterwarnings("ignore:Found")
-def test_remove_duplicates(dummy_duplicated_entrypoints):
-    with pytest.warns(RuntimeWarning):
-        entrypoints = plugins.remove_duplicates(dummy_duplicated_entrypoints)
-    assert len(entrypoints) == 2
-
-
-def test_broken_plugin():
-    broken_backend = pkg_resources.EntryPoint.parse(
-        "broken_backend = xarray.tests.test_plugins:backend_1"
-    )
-    with pytest.warns(RuntimeWarning) as record:
-        _ = plugins.build_engines([broken_backend])
-    assert len(record) == 1
-    message = str(record[0].message)
-    assert "Engine 'broken_backend'" in message
-
-
-def test_remove_duplicates_warnings(dummy_duplicated_entrypoints):
-
-    with pytest.warns(RuntimeWarning) as record:
-        _ = plugins.remove_duplicates(dummy_duplicated_entrypoints)
-
-    assert len(record) == 2
-    message0 = str(record[0].message)
-    message1 = str(record[1].message)
-    assert "entrypoints" in message0
-    assert "entrypoints" in message1
-
-
-@mock.patch("pkg_resources.EntryPoint.load", mock.MagicMock(return_value=None))
-def test_backends_dict_from_pkg():
-    specs = [
-        "engine1 = xarray.tests.test_plugins:backend_1",
-        "engine2 = xarray.tests.test_plugins:backend_2",
-    ]
-    entrypoints = [pkg_resources.EntryPoint.parse(spec) for spec in specs]
-    engines = plugins.backends_dict_from_pkg(entrypoints)
-    assert len(engines) == 2
-    assert engines.keys() == set(("engine1", "engine2"))
-
-
-def test_set_missing_parameters():
-    backend_1 = DummyBackendEntrypoint1
-    backend_2 = DummyBackendEntrypoint2
-    backend_2.open_dataset_parameters = ("filename_or_obj",)
-    engines = {"engine_1": backend_1, "engine_2": backend_2}
-    plugins.set_missing_parameters(engines)
-
-    assert len(engines) == 2
-    assert backend_1.open_dataset_parameters == ("filename_or_obj", "decoder")
-    assert backend_2.open_dataset_parameters == ("filename_or_obj",)
-
-    backend = DummyBackendEntrypointKwargs()
-    backend.open_dataset_parameters = ("filename_or_obj", "decoder")
-    plugins.set_missing_parameters({"engine": backend})
-    assert backend.open_dataset_parameters == ("filename_or_obj", "decoder")
-
-    backend = DummyBackendEntrypointArgs()
-    backend.open_dataset_parameters = ("filename_or_obj", "decoder")
-    plugins.set_missing_parameters({"engine": backend})
-    assert backend.open_dataset_parameters == ("filename_or_obj", "decoder")
-
-
-def test_set_missing_parameters_raise_error():
-
-    backend = DummyBackendEntrypointKwargs()
-    with pytest.raises(TypeError):
-        plugins.set_missing_parameters({"engine": backend})
-
-    backend = DummyBackendEntrypointArgs()
-    with pytest.raises(TypeError):
-        plugins.set_missing_parameters({"engine": backend})
-
-
-@mock.patch(
-    "pkg_resources.EntryPoint.load",
-    mock.MagicMock(return_value=DummyBackendEntrypoint1),
-)
-def test_build_engines():
-    dummy_pkg_entrypoint = pkg_resources.EntryPoint.parse(
-        "cfgrib = xarray.tests.test_plugins:backend_1"
-    )
-    backend_entrypoints = plugins.build_engines([dummy_pkg_entrypoint])
-
-    assert isinstance(backend_entrypoints["cfgrib"], DummyBackendEntrypoint1)
-    assert backend_entrypoints["cfgrib"].open_dataset_parameters == (
-        "filename_or_obj",
-        "decoder",
-    )
-
-
-@mock.patch(
-    "pkg_resources.EntryPoint.load",
-    mock.MagicMock(return_value=DummyBackendEntrypoint1),
-)
-def test_build_engines_sorted():
-    dummy_pkg_entrypoints = [
-        pkg_resources.EntryPoint.parse(
-            "dummy2 = xarray.tests.test_plugins:backend_1",
-        ),
-        pkg_resources.EntryPoint.parse(
-            "dummy1 = xarray.tests.test_plugins:backend_1",
-        ),
-    ]
-    backend_entrypoints = plugins.build_engines(dummy_pkg_entrypoints)
-    backend_entrypoints = list(backend_entrypoints)
-
-    indices = []
-    for be in plugins.STANDARD_BACKENDS_ORDER:
-        try:
-            index = backend_entrypoints.index(be)
-            backend_entrypoints.pop(index)
-            indices.append(index)
-        except ValueError:
-            pass
-
-    assert set(indices) < {0, -1}
-    assert list(backend_entrypoints) == sorted(backend_entrypoints)
-
-
-@mock.patch(
-    "xarray.backends.plugins.list_engines",
-    mock.MagicMock(return_value={"dummy": DummyBackendEntrypointArgs()}),
-)
-def test_no_matching_engine_found():
-    with pytest.raises(
-        ValueError, match="match in any of xarray's currently installed IO"
-    ):
-        plugins.guess_engine("not-valid")
-
-
-@mock.patch(
-    "xarray.backends.plugins.list_engines",
-    mock.MagicMock(return_value={}),
-)
-def test_no_engines_installed():
-    with pytest.raises(ValueError, match="no currently installed IO backends."):
-        plugins.guess_engine("not-valid")
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.18.2.dev33+g9bf32f2a.d20250207) (1.23.0)
Requirement already satisfied: pandas>=1.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.18.2.dev33+g9bf32f2a.d20250207) (1.5.3)
Requirement already satisfied: setuptools>=40.4 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.18.2.dev33+g9bf32f2a.d20250207) (68.0.0)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.0->xarray==0.18.2.dev33+g9bf32f2a.d20250207) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.0->xarray==0.18.2.dev33+g9bf32f2a.d20250207) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=1.0->xarray==0.18.2.dev33+g9bf32f2a.d20250207) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-0.18.2.dev33+g9bf32f2a.d20250207-0.editable-py3-none-any.whl size=9091 sha256=5d98b35f6a2d2271c932534a36a6c2927c2707d85a02c308cb0a322a1f65609e
  Stored in directory: /tmp/pip-ephem-wheel-cache-35oik48j/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 0.18.2.dev33+g9bf32f2a
    Uninstalling xarray-0.18.2.dev33+g9bf32f2a:
      Successfully uninstalled xarray-0.18.2.dev33+g9bf32f2a
Successfully installed xarray-0.18.2.dev33+g9bf32f2a.d20250207
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-7.4.0, pluggy-1.5.0
rootdir: /testbed
configfile: setup.cfg
plugins: env-1.1.3, cov-5.0.0, hypothesis-6.108.5, xdist-3.6.1
collected 8 items

xarray/tests/test_plugins.py ........                                    [100%]

=============================== warnings summary ===============================
xarray/__init__.py:1
  /testbed/xarray/__init__.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.responses')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2350: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.handlers')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pkg_resources/__init__.py:2871: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('pydap.tests')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

xarray/core/pycompat.py:14
  /testbed/xarray/core/pycompat.py:14: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    dask_version = LooseVersion(dask.__version__)

xarray/core/pycompat.py:33
  /testbed/xarray/core/pycompat.py:33: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    sparse_version = LooseVersion(sparse.__version__)

xarray/core/pycompat.py:46
  /testbed/xarray/core/pycompat.py:46: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    cupy_version = LooseVersion("0.0.0")

../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345
  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

xarray/core/npcompat.py:131
  /testbed/xarray/core/npcompat.py:131: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(np.__version__) >= "1.20.0":

xarray/core/pdcompat.py:45
  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(pd.__version__) < "0.25.0":

xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
xarray/tests/__init__.py:58
  /testbed/xarray/tests/__init__.py:58: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    return version.LooseVersion(vstring)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_plugins.py::test_remove_duplicates
PASSED xarray/tests/test_plugins.py::test_detect_parameters
PASSED xarray/tests/test_plugins.py::test_backends_dict_from_pkg
PASSED xarray/tests/test_plugins.py::test_set_missing_parameters
PASSED xarray/tests/test_plugins.py::test_sort_backends
PASSED xarray/tests/test_plugins.py::test_build_engines
PASSED xarray/tests/test_plugins.py::test_list_engines
PASSED xarray/tests/test_plugins.py::test_get_backend
======================== 8 passed, 23 warnings in 0.18s ========================

